{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.22.0",
  "conda_private": false,
  "conda_version": "22.9.0",
  "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
  "dev_url": "https://github.com/root-project/root/",
  "doc_url": "https://root.cern/documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "parent_recipe": {
    "name": "root_base",
    "path": "/home/conda/recipe_root",
    "version": "6.26.10"
   },
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "home": "https://root.cern/",
  "identifiers": [],
  "keywords": [],
  "license": "LGPL-2.1-only",
  "license_file": "root-source/LICENSE",
  "root_pkgs": [
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "tqdm 4.64.1 pyhd8ed1ab_0",
   "urllib3 1.26.11 pyhd8ed1ab_0",
   "libedit 3.1.20191231 he28a2e2_2",
   "backports 1.0 py_2",
   "libcurl 7.86.0 h2283fc2_1",
   "libmamba 1.0.0 h9eff5f0_2",
   "libzlib 1.2.13 h166bdaf_4",
   "icu 70.1 h27087fc_0",
   "_openmp_mutex 4.5 2_gnu",
   "pyrsistent 0.19.2 py310h5764c6d_0",
   "patchelf 0.17.0 h58526e2_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "yaml-cpp 0.7.0 h27087fc_2",
   "attrs 22.1.0 pyh71513ae_1",
   "curl 7.86.0 h2283fc2_1",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.21 py310h5764c6d_2",
   "conda-build 3.22.0 py310hff52083_3",
   "tzdata 2022f h191b570_0",
   "bzip2 1.0.8 h7f98852_4",
   "conda-package-handling 1.9.0 py310h5764c6d_1",
   "cffi 1.15.1 py310h255011f_2",
   "requests 2.28.1 pyhd8ed1ab_1",
   "libsqlite 3.39.4 h753d276_0",
   "libarchive 3.5.2 hada088e_3",
   "expat 2.5.0 h27087fc_0",
   "certifi 2022.9.24 pyhd8ed1ab_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "boa 0.13.0 pyha770c72_0",
   "conda 22.9.0 py310hff52083_2",
   "openssl 3.0.7 h166bdaf_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "brotlipy 0.7.0 py310h5764c6d_1005",
   "patch 2.7.6 h7f98852_1002",
   "ca-certificates 2022.9.24 ha878542_0",
   "future 0.18.2 pyhd8ed1ab_6",
   "fmt 9.1.0 h924138e_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "ruamel.yaml.clib 0.2.7 py310h5764c6d_0",
   "ripgrep 13.0.0 h2f28480_2",
   "importlib-metadata 5.0.0 pyha770c72_1",
   "charset-normalizer 2.1.1 pyhd8ed1ab_0",
   "xz 5.2.6 h166bdaf_0",
   "keyutils 1.6.1 h166bdaf_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "libnsl 2.0.0 h7f98852_0",
   "krb5 1.19.3 h08a2579_0",
   "markupsafe 2.1.1 py310h5764c6d_2",
   "pycparser 2.21 pyhd8ed1ab_0",
   "lz4-c 1.9.3 h9c3ff4c_1",
   "libev 4.33 h516909a_1",
   "libmambapy 1.0.0 py310hd5a56e8_2",
   "commonmark 0.9.1 py_0",
   "readline 8.1.2 h0f457ee_0",
   "mamba 1.0.0 py310h51d5547_2",
   "chardet 5.0.0 py310hff52083_1",
   "pybind11-abi 4 hd8ed1ab_3",
   "importlib_resources 5.10.0 pyhd8ed1ab_0",
   "cryptography 38.0.3 py310h600f1e7_0",
   "libnghttp2 1.47.0 hff17c54_1",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "python-fastjsonschema 2.16.2 pyhd8ed1ab_0",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "ncurses 6.3 h27087fc_1",
   "pcre2 10.40 hc3806b6_0",
   "setuptools 65.5.1 pyhd8ed1ab_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "libiconv 1.17 h166bdaf_0",
   "python-libarchive-c 4.0 py310hff52083_2",
   "rich 12.6.0 pyhd8ed1ab_0",
   "platformdirs 2.5.2 pyhd8ed1ab_1",
   "pycosat 0.6.4 py310h5764c6d_1",
   "tk 8.6.12 h27826a3_0",
   "libuuid 2.32.1 h7f98852_1000",
   "libffi 3.4.2 h7f98852_5",
   "ruamel_yaml 0.15.80 py310h5764c6d_1008",
   "python 3.10.6 ha86cf86_0_cpython",
   "wheel 0.38.4 pyhd8ed1ab_0",
   "c-ares 1.18.1 h7f98852_0",
   "git 2.38.1 pl5321h8df7355_1",
   "su-exec 0.2 h166bdaf_1003",
   "reproc 14.2.3 h7f98852_0",
   "zstd 1.5.2 h6239696_4",
   "gettext 0.21.1 h27087fc_0",
   "six 1.16.0 pyh6c4a22f_0",
   "jsonschema 4.17.0 pyhd8ed1ab_0",
   "idna 3.4 pyhd8ed1ab_0",
   "typing_extensions 4.4.0 pyha770c72_0",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "libxml2 2.10.3 h7463322_0",
   "perl 5.32.1 2_h7f98852_perl5",
   "lzo 2.10 h516909a_1000",
   "traitlets 5.5.0 pyhd8ed1ab_0",
   "psutil 5.9.4 py310h5764c6d_0",
   "pygments 2.13.0 pyhd8ed1ab_0",
   "anyio 3.6.2 pyhd8ed1ab_0",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "nbformat 5.7.0 pyhd8ed1ab_0",
   "ld_impl_linux-64 2.39 hc81fddc_0",
   "prompt_toolkit 3.0.32 hd8ed1ab_0",
   "pip 22.3.1 pyhd8ed1ab_0",
   "pyopenssl 22.1.0 pyhd8ed1ab_0",
   "python_abi 3.10 2_cp310",
   "reproc-cpp 14.2.3 h9c3ff4c_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "libstdcxx-ng 12.2.0 h46fd767_19",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "prompt-toolkit 3.0.32 pyha770c72_0",
   "libgomp 12.2.0 h65d4601_19",
   "filelock 3.8.0 pyhd8ed1ab_0",
   "_libgcc_mutex 0.1 conda_forge",
   "jupyter_core 5.0.0 py310hff52083_0",
   "tini 0.19.0 h166bdaf_1",
   "clyent 1.2.2 py_1",
   "dataclasses 0.8 pyhc8e2a94_3",
   "libgcc-ng 12.2.0 h65d4601_19",
   "toml 0.10.2 pyhd8ed1ab_0",
   "libsolv 0.7.22 h6239696_0",
   "zipp 3.10.0 pyhd8ed1ab_0",
   "yaml 0.2.5 h7f98852_2",
   "libssh2 1.10.0 hf14f497_3",
   "pyyaml 6.0 py310h5764c6d_5",
   "pytz 2022.6 pyhd8ed1ab_0",
   "conda-env 2.6.0 1",
   "oniguruma 6.9.8 h166bdaf_0",
   "liblief 0.11.5 h9c3ff4c_1",
   "jq 1.6 h36c2ea0_1000",
   "py-lief 0.11.5 py310h122e73d_1",
   "click 8.1.3 unix_pyhd8ed1ab_2",
   "conda-forge-ci-setup 3.21.0 py310hce54274_101",
   "shyaml 0.6.2 pyhd3deb0d_0"
  ],
  "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "cfitsio": "4.1.0",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "davix": "0.8",
  "docker_image": "quay.io/condaforge/linux-anvil-cos7-x86_64",
  "extend_keys": [
   "extend_keys",
   "ignore_version",
   "ignore_build_only_deps",
   "pin_run_as_build"
  ],
  "fftw": "3",
  "fortran_compiler": "gfortran",
  "freetype": "2",
  "gdk_pixbuf": "2",
  "giflib": "5.2",
  "glew": "2.1",
  "glib": "2",
  "graphviz": "6",
  "gsl": "2.7",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "libblas": "3.9 *netlib",
  "libcblas": "3.9 *netlib",
  "libpng": "1.6",
  "librsvg": "2",
  "libtiff": "4",
  "libxml2": "2.10",
  "lua": "5",
  "lz4_c": "1.9.3",
  "numpy": "1.23",
  "openssl": "3",
  "pcre": "8",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "graphviz": {
    "max_pin": "x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.11.* *_cpython",
  "r_base": "3.5",
  "sqlite": "3",
  "target_platform": "linux-64",
  "tbb": "2021",
  "tbb_devel": "2021",
  "xrootd": "5",
  "xz": "5",
  "zip_keys": [
   [
    "python",
    "numpy"
   ],
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ],
  "zlib": "1.2",
  "zstd": "1.5"
 },
 "conda_pkg_format": null,
 "files": [],
 "index": {
  "arch": "x86_64",
  "build": "py311h8b32b4d_1",
  "build_number": 1,
  "depends": [
   "compilers",
   "ipython",
   "metakernel",
   "notebook",
   "openssl >=3.0.7,<4.0a0",
   "python >=3.11,<3.12.0a0",
   "python_abi 3.11.* *_cp311",
   "root_base 6.26.10 py311hd69c50d_1"
  ],
  "license": "LGPL-2.1-only",
  "name": "root",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1668705820514,
  "version": "6.26.10"
 },
 "metadata_version": 1,
 "name": "root",
 "raw_recipe": "# This file created by conda-build 3.22.0\n# ------------------------------------------------\n\npackage:\n  name: root\n  version: 6.26.10\nsource:\n  folder: root-source\n  patches:\n    - no-link-libpython.patch\n    - patches/0001-Hacks.patch\n    - patches/0001-Patch-for-apple-silicon.patch\n    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch\n    - patches/pr-10734.patch\n    - patches/root-x.xx.xx_cling-runtime-sysroot.patch\n  sha256: a84ed095252614c6e2084987fce9ce4a5a62057bfd5a4a2725123ca9f60f674f\n  url: https://github.com/root-project/root/archive/refs/tags/v6-26-10.tar.gz\nbuild:\n  number: 1\n  string: py311h8b32b4d_1\nrequirements:\n  host:\n    - _libgcc_mutex 0.1 conda_forge\n    - _openmp_mutex 4.5 2_gnu\n    - bzip2 1.0.8 h7f98852_4\n    - ca-certificates 2022.9.24 ha878542_0\n    - ld_impl_linux-64 2.39 hc81fddc_0\n    - libffi 3.4.2 h7f98852_5\n    - libgcc-ng 12.2.0 h65d4601_19\n    - libgomp 12.2.0 h65d4601_19\n    - libnsl 2.0.0 h7f98852_0\n    - libsqlite 3.40.0 h753d276_0\n    - libuuid 2.32.1 h7f98852_1000\n    - libzlib 1.2.13 h166bdaf_4\n    - ncurses 6.3 h27087fc_1\n    - openssl 3.0.7 h166bdaf_0\n    - python 3.11.0 ha86cf86_0_cpython\n    - readline 8.1.2 h0f457ee_0\n    - root_base 6.26.10 py311hd69c50d_1\n    - tk 8.6.12 h27826a3_0\n    - tzdata 2022f h191b570_0\n    - xz 5.2.6 h166bdaf_0\n  run:\n    - compilers\n    - ipython\n    - metakernel\n    - notebook\n    - openssl >=3.0.7,<4.0a0\n    - python >=3.11,<3.12.0a0\n    - python_abi 3.11.* *_cp311\n    - root_base 6.26.10 py311hd69c50d_1\ntest:\n  commands:\n    - ipython -c \"import JsMVA\"\n    - python test_pyroot.py\n    - root -l -b -q -x test.cpp\n    - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n    - root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true\n    - root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"\n    - root -l -b -q -x test.cpp++\n    - jupyter-kernelspec list | grep ' root '\n  files:\n    - test.cpp\n    - test_pyroot.py\n  imports:\n    - JupyROOT\n    - ROOT\nabout:\n  description: 'Almost everything in ROOT should be supported in this Conda package;\n    ROOT was built with lots of options turned\n\n    on. Here are a few things to try:\n\n\n    * `root`: you can start up a session and see the splash screen; Control-D to exit.\n\n    * `python` followed by `import ROOT` will load PyROOT.\n\n    * `root --notebook` will start a notebook server with a ROOT kernel choice.\n\n    * `rootbrowse` will open a TBrowser session so you can look through files.\n\n    * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a\n    DataFrame example with an animated plot.\n\n    * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will\n    print the tutorial dir.\n\n    * `root -b -l -q -e ''std::cout << (float) TPython::Eval(\"1+1\") << endl;''` will\n    run Python from C++ ROOT.\n\n\n    See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information\n    about using this Conda package.\n\n\n    The ROOT package will prepare the required compilers. Everything in Conda is symlinked\n    into\n\n    `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically.\n    The `thisroot.*`\n\n    scripts should not be used and are not provided. Graphics, `rootbrowse`, etc.\n    all should work. OpenGL is enabled.\n\n\n    There is also a `root_base` package, with minimal dependecies, that libraries\n    should depend on this to avoid\n\n    having a runtime dependency on the `compilers` package. `root-dependencies` and\n    `root-binaries` are also available.\n\n    In most cases users should use the `root` package directly, since it adds both\n    of these, along with compilers,\n\n    Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\n\n    ROOT was built with and will report `-std=c++17` from `root-config`.\n\n    '\n  dev_url: https://github.com/root-project/root/\n  doc_url: https://root.cern/documentation\n  home: https://root.cern/\n  license: LGPL-2.1-only\n  license_file: root-source/LICENSE\n  summary: 'ROOT is a modular scientific software toolkit. It provides all the functionalities\n    needed to deal with big data\n\n    processing, statistical analysis, visualisation and storage. It is mainly written\n    in C++ but integrated with other\n\n    languages such as Python and R.\n\n    '\nextra:\n  copy_test_source_files: true\n  final: true\n  recipe-maintainers:\n    - chrisburr\n    - eguiraud\n    - henryiii\n",
 "rendered_recipe": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "number": 1,
   "string": "py311h8b32b4d_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "eguiraud",
    "henryiii"
   ]
  },
  "package": {
   "name": "root",
   "version": "6.26.10"
  },
  "requirements": {
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "bzip2 1.0.8 h7f98852_4",
    "ca-certificates 2022.9.24 ha878542_0",
    "ld_impl_linux-64 2.39 hc81fddc_0",
    "libffi 3.4.2 h7f98852_5",
    "libgcc-ng 12.2.0 h65d4601_19",
    "libgomp 12.2.0 h65d4601_19",
    "libnsl 2.0.0 h7f98852_0",
    "libsqlite 3.40.0 h753d276_0",
    "libuuid 2.32.1 h7f98852_1000",
    "libzlib 1.2.13 h166bdaf_4",
    "ncurses 6.3 h27087fc_1",
    "openssl 3.0.7 h166bdaf_0",
    "python 3.11.0 ha86cf86_0_cpython",
    "readline 8.1.2 h0f457ee_0",
    "root_base 6.26.10 py311hd69c50d_1",
    "tk 8.6.12 h27826a3_0",
    "tzdata 2022f h191b570_0",
    "xz 5.2.6 h166bdaf_0"
   ],
   "run": [
    "compilers",
    "ipython",
    "metakernel",
    "notebook",
    "openssl >=3.0.7,<4.0a0",
    "python >=3.11,<3.12.0a0",
    "python_abi 3.11.* *_cp311",
    "root_base 6.26.10 py311hd69c50d_1"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "no-link-libpython.patch",
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/pr-10734.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch"
   ],
   "sha256": "a84ed095252614c6e2084987fce9ce4a5a62057bfd5a4a2725123ca9f60f674f",
   "url": "https://github.com/root-project/root/archive/refs/tags/v6-26-10.tar.gz"
  },
  "test": {
   "commands": [
    "ipython -c \"import JsMVA\"",
    "python test_pyroot.py",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++",
    "jupyter-kernelspec list | grep ' root '"
   ],
   "files": [
    "test.cpp",
    "test_pyroot.py"
   ],
   "imports": [
    "JupyROOT",
    "ROOT"
   ]
  }
 },
 "version": "6.26.10"
}