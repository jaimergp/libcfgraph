{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.9",
  "conda_private": false,
  "conda_version": "4.13.0",
  "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
  "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
  "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "ivanyashchuk",
    "kkraus14"
   ]
  },
  "home": "https://developer.nvidia.com/cudnn",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "license_file": "LICENSE",
  "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
  "root_pkgs": [
   "libgcc-ng 12.1.0 hba45bf4_16",
   "pybind11-abi 4 hd8ed1ab_3",
   "patch 2.7.6 h4e0d66e_1002",
   "pyopenssl 22.0.0 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "attrs 21.4.0 pyhd8ed1ab_0",
   "ruamel.yaml.clib 0.2.6 py39h98ec90c_1",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "icu 70.1 h3b4ca64_0",
   "python_abi 3.9 2_cp39",
   "ripgrep 13.0.0 h0cb23b2_2",
   "openssl 1.1.1o hb283c62_0",
   "perl 5.32.1 2_h4e0d66e_perl5",
   "setuptools 62.3.4 py39hc1b9086_0",
   "pycosat 0.6.3 py39h98ec90c_1010",
   "filelock 3.7.1 pyhd8ed1ab_0",
   "requests 2.28.0 pyhd8ed1ab_0",
   "pyrsistent 0.18.1 py39h9ca6cee_1",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "libarchive 3.5.2 h01158bd_2",
   "sniffio 1.2.0 py39h0b1cf3c_3",
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "jupyter_core 4.10.0 py39h0b1cf3c_0",
   "tk 8.6.12 h41c6715_0",
   "libstdcxx-ng 12.1.0 h9be8c7b_16",
   "json5 0.9.5 pyh9f0ad1d_0",
   "backports 1.0 py_2",
   "zipp 3.8.0 pyhd8ed1ab_0",
   "conda-build 3.21.9 py39h0b1cf3c_0",
   "traitlets 5.2.2.post1 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.21 py39h98ec90c_1",
   "six 1.16.0 pyh6c4a22f_0",
   "curl 7.83.1 h2ae36b4_0",
   "zlib 1.2.12 hb283c62_0",
   "cryptography 37.0.2 py39hd4ec19a_0",
   "py-lief 0.11.5 py39h4c72827_1",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "rich 12.4.4 pyhd8ed1ab_0",
   "gettext 0.19.8.1 h6603d1e_1008",
   "cffi 1.15.0 py39h7bf629d_0",
   "python-fastjsonschema 2.15.3 pyhd8ed1ab_0",
   "libnghttp2 1.47.0 h262a72d_0",
   "psutil 5.9.1 py39h98ec90c_0",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "pip 22.1.2 pyhd8ed1ab_0",
   "tqdm 4.64.0 pyhd8ed1ab_0",
   "python 3.9.13 h08a33c2_0_cpython",
   "libiconv 1.16 h6eb9509_0",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "xz 5.2.5 h6eb9509_1",
   "importlib_resources 5.7.1 pyhd8ed1ab_1",
   "lzo 2.10 h6eb9509_1000",
   "pcre2 10.37 h32277c3_0",
   "libzlib 1.2.12 hb283c62_0",
   "pyyaml 6.0 py39h98ec90c_4",
   "git 2.35.3 pl5321h131946c_0",
   "clyent 1.2.2 py_1",
   "commonmark 0.9.1 py_0",
   "yaml-cpp 0.7.0 hbbae597_1",
   "charset-normalizer 2.0.12 pyhd8ed1ab_0",
   "_openmp_mutex 4.5 2_gnu",
   "krb5 1.19.3 h33c4487_0",
   "su-exec 0.2 h6eb9509_1002",
   "anyio 3.6.1 py39hc1b9086_0",
   "liblief 0.11.5 h3b9df90_1",
   "mamba 0.24.0 py39h3651b5a_1",
   "bzip2 1.0.8 h4e0d66e_4",
   "libffi 3.4.2 h4e0d66e_5",
   "jsonschema 4.6.0 pyhd8ed1ab_0",
   "reproc 14.2.3 h4e0d66e_0",
   "pysocks 1.7.1 py39hc1b9086_5",
   "conda 4.13.0 py39h0b1cf3c_1",
   "lz4-c 1.9.3 h3b9df90_1",
   "expat 2.4.8 hbbae597_0",
   "libmamba 0.24.0 h9b76632_1",
   "urllib3 1.26.9 pyhd8ed1ab_0",
   "libev 4.33 h6eb9509_1",
   "brotlipy 0.7.0 py39h98ec90c_1004",
   "future 0.18.2 py39hc1b9086_5",
   "markupsafe 2.1.1 py39h9ca6cee_1",
   "boa 0.11.0 pyha770c72_1",
   "glob2 0.7 py_0",
   "c-ares 1.18.1 h4e0d66e_0",
   "keyutils 1.6.1 hb283c62_0",
   "ruamel_yaml 0.15.80 py39h98ec90c_1007",
   "idna 3.3 pyhd8ed1ab_0",
   "libmambapy 0.24.0 py39h12c9af7_1",
   "pytz 2022.1 pyhd8ed1ab_0",
   "libedit 3.1.20191231 h41a240f_2",
   "libnsl 2.0.0 h4e0d66e_0",
   "libsolv 0.7.22 ha72a2fa_0",
   "libgomp 12.1.0 hba45bf4_16",
   "pygments 2.12.0 pyhd8ed1ab_0",
   "nbformat 5.4.0 pyhd8ed1ab_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "conda-package-handling 1.8.1 py39h98ec90c_1",
   "chardet 4.0.0 py39hc1b9086_3",
   "python-libarchive-c 4.0 py39h0b1cf3c_1",
   "importlib-metadata 4.11.4 py39hc1b9086_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "typing_extensions 4.2.0 pyha770c72_1",
   "soupsieve 2.3.1 pyhd8ed1ab_0",
   "tzdata 2022a h191b570_0",
   "patchelf 0.14.5 hea85c5d_0",
   "libxml2 2.9.14 hc8bd4e3_0",
   "tini 0.19.0 h4e0d66e_0",
   "libcurl 7.83.1 h2ae36b4_0",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "ncurses 6.3 hab78ccb_1",
   "readline 8.1.2 h6828edc_0",
   "sqlite 3.38.5 h3bd21b8_0",
   "libuuid 2.32.1 h4e0d66e_1000",
   "prompt_toolkit 3.0.29 hd8ed1ab_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
   "reproc-cpp 14.2.3 h3b9df90_0",
   "prompt-toolkit 3.0.29 pyha770c72_0",
   "_libgcc_mutex 0.1 conda_forge",
   "zstd 1.5.2 h8ac4a70_1",
   "yaml 0.2.5 h4e0d66e_2",
   "libssh2 1.10.0 ha5a9321_2",
   "jq 1.6 h339bb43_1000",
   "conda-forge-ci-setup 3.21.0 py39h3eade6b_100",
   "certifi 2022.6.15 py39h0b1cf3c_0",
   "click 8.1.3 py39h0b1cf3c_0",
   "ca-certificates 2022.6.15 h1084571_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "oniguruma 6.9.8 hb283c62_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "NVIDIA's cuDNN deep neural network acceleration library",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "11.2",
  "cudnn": "8",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le-cuda:11.2",
  "extend_keys": [
   "pin_run_as_build",
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cudnn",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "files": [
  "bin/.cudnn-post-link.sh",
  "include/cudnn.h",
  "include/cudnn_adv_infer.h",
  "include/cudnn_adv_infer_v8.h",
  "include/cudnn_adv_train.h",
  "include/cudnn_adv_train_v8.h",
  "include/cudnn_backend.h",
  "include/cudnn_backend_v8.h",
  "include/cudnn_cnn_infer.h",
  "include/cudnn_cnn_infer_v8.h",
  "include/cudnn_cnn_train.h",
  "include/cudnn_cnn_train_v8.h",
  "include/cudnn_ops_infer.h",
  "include/cudnn_ops_infer_v8.h",
  "include/cudnn_ops_train.h",
  "include/cudnn_ops_train_v8.h",
  "include/cudnn_version.h",
  "include/cudnn_version_v8.h",
  "lib/libcudnn.so",
  "lib/libcudnn.so.8",
  "lib/libcudnn.so.8.3.2",
  "lib/libcudnn_adv_infer.so",
  "lib/libcudnn_adv_infer.so.8",
  "lib/libcudnn_adv_infer.so.8.3.2",
  "lib/libcudnn_adv_train.so",
  "lib/libcudnn_adv_train.so.8",
  "lib/libcudnn_adv_train.so.8.3.2",
  "lib/libcudnn_cnn_infer.so",
  "lib/libcudnn_cnn_infer.so.8",
  "lib/libcudnn_cnn_infer.so.8.3.2",
  "lib/libcudnn_cnn_train.so",
  "lib/libcudnn_cnn_train.so.8",
  "lib/libcudnn_cnn_train.so.8.3.2",
  "lib/libcudnn_ops_infer.so",
  "lib/libcudnn_ops_infer.so.8",
  "lib/libcudnn_ops_infer.so.8.3.2",
  "lib/libcudnn_ops_train.so",
  "lib/libcudnn_ops_train.so.8",
  "lib/libcudnn_ops_train.so.8.3.2"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "h321de51_1",
  "build_number": 1,
  "constrains": [
   "__glibc >=2.17"
  ],
  "depends": [
   "__glibc >=2.17",
   "cudatoolkit 11.*",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12",
   "libzlib >=1.2.12,<1.3.0a0"
  ],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "name": "cudnn",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1655403209364,
  "version": "8.3.2.44"
 },
 "metadata_version": 1,
 "name": "cudnn",
 "raw_recipe": "{% set version = \"8.3.2.44\" %}\n\n# cuDNN v8.3.x supports CUDA versions 10.2 - 11.5\n# For CUDA 11.x there is one cuDNN distribution that works with all CUDA 11 versions\n# (We don't support CUDA 10.2 anymore as it's x86-64 only.)\n{% if cuda_compiler_version[:2] == \"11\" %}\n{% set cudnn_cuda_version = \"11.5\" %}\n{% endif %}\n\npackage:\n  name: cudnn\n  version: {{ version }}\n\nsource:\n  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ \".\".join(version.split(\".\")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-x86_64-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [linux64]\n    sha256: 5500953c08c5e5d1dddcfda234f9efbddcdbe43a53b26dc0a82c723fa170c457  # [linux64 and cuda_compiler_version == \"11.2\"]\n  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ \".\".join(version.split(\".\")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-ppc64le-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [ppc64le]\n    sha256: 0581bce48023a3ee71c3a819aaefcabe693eca18b61e2521dc5f8e6e71567b1b  # [ppc64le and cuda_compiler_version == \"11.2\"]\n  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ \".\".join(version.split(\".\")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-linux-sbsa-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.tar.xz  # [aarch64]\n    sha256: 7eb8c96bfeec98e8aa7cea1e95633d2a9481fc99040eb0311d31bf137a7aa6ea  # [aarch64 and cuda_compiler_version == \"11.2\"]\n  - url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ \".\".join(version.split(\".\")[:3]) }}/local_installers/{{ cudnn_cuda_version }}/cudnn-windows-x86_64-{{ version }}_cuda{{ cudnn_cuda_version }}-archive.zip  # [win64]\n    sha256: 9e36eef803f1cf9ab24846dc133a3014fdc548775ee29073e8466d415957a1c0  # [win64 and cuda_compiler_version == \"11.2\"]\n\nbuild:\n  number: 1\n  skip: True   # [cuda_compiler_version != \"11.2\"]\n  script:\n    - mkdir -p $PREFIX/include               # [linux]\n    - cp include/cudnn*.h $PREFIX/include/   # [linux]\n    - mkdir -p $PREFIX/lib                   # [linux]\n    - mv lib/libcudnn*.so* $PREFIX/lib/      # [linux]\n\n    - mkdir %LIBRARY_INC%                                # [win]\n    - copy %SRC_DIR%\\\\include\\\\cudnn*.h %LIBRARY_INC%\\\\  # [win]\n    - mkdir %LIBRARY_LIB%                                # [win]\n    - copy %SRC_DIR%\\\\lib\\\\cudnn*.lib %LIBRARY_LIB%\\\\    # [win]\n    - mkdir %LIBRARY_BIN%                                # [win]\n    - copy %SRC_DIR%\\\\bin\\\\cudnn*.dll %LIBRARY_BIN%\\\\    # [win]\n  ignore_run_exports:\n    - cudatoolkit\n  run_exports:\n    - {{ pin_subpackage('cudnn') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - sysroot_linux-64 2.17  # [linux64]\n  host:\n    - patchelf >=0.12  # [linux]\n    # to suppress \".so not found\" errors\n    - libzlib  # [linux]\n    - libzlib-wapi  # [win64]\n  run:\n    - cudatoolkit 11.*\n  run_constrained:\n    # Only GLIBC_2.17 or older symbols present\n    - __glibc >=2.17  # [linux]\n\ntest:\n  requires:\n    - {{ compiler('c') }}  # [linux]\n  files:\n    - test_load_elf.c      # [linux]\n  commands:\n    - if not exist %LIBRARY_INC%/cudnn.h exit 1        # [win]\n    - if not exist %LIBRARY_INC%/cudnn_adv_train.h exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1      # [win]\n    - if not exist %LIBRARY_LIB%/cudnn_adv_train.lib exit 1      # [win]\n    - if not exist %LIBRARY_BIN%/cudnn64_8.dll exit 1  # [win]\n    - if not exist %LIBRARY_BIN%/cudnn_adv_train64_8.dll exit 1  # [win]\n    - test -f $PREFIX/include/cudnn.h                  # [linux]\n    - test -f $PREFIX/include/cudnn_adv_train.h        # [linux]\n    - test -f $PREFIX/lib/libcudnn.so                  # [linux]\n    - test -f $PREFIX/lib/libcudnn_adv_train.so        # [linux]\n    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf  # [linux]\n    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [linux]\n\nabout:\n  home: https://developer.nvidia.com/cudnn\n  license: LicenseRef-cuDNN-Software-License-Agreement\n  license_file: LICENSE\n  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  summary: \"NVIDIA's cuDNN deep neural network acceleration library\"\n  description: |\n    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\n    primitives for deep neural networks. It provides highly tuned\n    implementations of routines arising frequently in DNN applications.\n\n    License Agreements:- The packages are governed by the NVIDIA cuDNN\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuDNN EULA -\n    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  doc_url: https://docs.nvidia.com/deeplearning/cudnn/\n  dev_url: https://developer.nvidia.com/rdp/cudnn-download\n\nextra:\n  recipe-maintainers:\n    - ivanyashchuk\n    - kkraus14\n",
 "rendered_recipe": {
  "about": {
   "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
   "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
   "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
   "home": "https://developer.nvidia.com/cudnn",
   "license": "LicenseRef-cuDNN-Software-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
   "summary": "NVIDIA's cuDNN deep neural network acceleration library"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "1",
   "run_exports": [
    "cudnn >=8.3.2.44,<9.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "cp include/cudnn*.h $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/libcudnn*.so* $PREFIX/lib/"
   ],
   "string": "h321de51_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "ivanyashchuk",
    "kkraus14"
   ]
  },
  "package": {
   "name": "cudnn",
   "version": "8.3.2.44"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-ppc64le 2.36.1 h5836da8_2",
    "binutils_linux-ppc64le 2.36 he035471_10",
    "gcc_impl_linux-ppc64le 10.3.0 h4706ea9_16",
    "gcc_linux-ppc64le 10.3.0 h0cb3363_10",
    "gxx_impl_linux-ppc64le 10.3.0 h4706ea9_16",
    "gxx_linux-ppc64le 10.3.0 ha412328_10",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libgcc-devel_linux-ppc64le 10.3.0 h5d09a8e_16",
    "libgcc-ng 12.1.0 hba45bf4_16",
    "libgomp 12.1.0 hba45bf4_16",
    "libsanitizer 10.3.0 h85ad208_16",
    "libstdcxx-devel_linux-ppc64le 10.3.0 h5d09a8e_16",
    "libstdcxx-ng 12.1.0 h9be8c7b_16",
    "nvcc_linux-ppc64le 11.2 h65ee2f8_18",
    "sed 4.8 ha07698b_0",
    "sysroot_linux-ppc64le 2.17 h395ec9b_13"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "libgcc-ng 12.1.0 hba45bf4_16",
    "libgomp 12.1.0 hba45bf4_16",
    "libstdcxx-ng 12.1.0 h9be8c7b_16",
    "libzlib 1.2.12 hb283c62_1",
    "patchelf 0.14.5 hea85c5d_0"
   ],
   "run": [
    "__glibc >=2.17",
    "cudatoolkit 11.*",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12",
    "libzlib >=1.2.12,<1.3.0a0"
   ],
   "run_constrained": [
    "__glibc >=2.17"
   ]
  },
  "source": [
   {
    "sha256": "0581bce48023a3ee71c3a819aaefcabe693eca18b61e2521dc5f8e6e71567b1b",
    "url": "https://developer.download.nvidia.com/compute/redist/cudnn/v8.3.2/local_installers/11.5/cudnn-linux-ppc64le-8.3.2.44_cuda11.5-archive.tar.xz"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/include/cudnn.h",
    "test -f $PREFIX/include/cudnn_adv_train.h",
    "test -f $PREFIX/lib/libcudnn.so",
    "test -f $PREFIX/lib/libcudnn_adv_train.so",
    "${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf",
    "for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done"
   ],
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "gcc_linux-ppc64le 10.*"
   ]
  }
 },
 "version": "8.3.2.44"
}