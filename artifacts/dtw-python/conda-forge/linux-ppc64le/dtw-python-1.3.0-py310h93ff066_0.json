{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.22.0",
  "conda_private": false,
  "conda_version": "4.13.0",
  "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
  "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
  "doc_url": "https://dynamictimewarping.github.io/python/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "tonigi"
   ]
  },
  "home": "https://dynamictimewarping.github.io/",
  "identifiers": [],
  "keywords": [],
  "license": "GPL-3.0-or-later",
  "license_family": "GPL",
  "license_file": "COPYING",
  "root_pkgs": [
   "libssh2 1.10.0 ha5a9321_2",
   "typing_extensions 4.3.0 pyha770c72_0",
   "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
   "libxml2 2.9.14 hc8bd4e3_3",
   "zlib 1.2.12 hb283c62_2",
   "bzip2 1.0.8 h4e0d66e_4",
   "krb5 1.19.3 h33c4487_0",
   "icu 70.1 h3b4ca64_0",
   "yaml-cpp 0.7.0 hbbae597_1",
   "brotlipy 0.7.0 py39h98ec90c_1004",
   "libgcc-ng 12.1.0 hba45bf4_16",
   "chardet 5.0.0 py39hc1b9086_0",
   "py-lief 0.11.5 py39h4c72827_1",
   "tqdm 4.64.0 pyhd8ed1ab_0",
   "python_abi 3.9 2_cp39",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "tini 0.19.0 h4e0d66e_0",
   "glob2 0.7 py_0",
   "gettext 0.19.8.1 h6603d1e_1008",
   "idna 3.3 pyhd8ed1ab_0",
   "c-ares 1.18.1 h4e0d66e_0",
   "nbformat 5.4.0 pyhd8ed1ab_0",
   "ripgrep 13.0.0 h0cb23b2_2",
   "prompt_toolkit 3.0.30 hd8ed1ab_0",
   "ruamel_yaml 0.15.80 py39h98ec90c_1007",
   "ruamel.yaml.clib 0.2.6 py39h98ec90c_1",
   "python 3.9.13 h08a33c2_0_cpython",
   "zstd 1.5.2 h8ac4a70_2",
   "anyio 3.6.1 py39hc1b9086_0",
   "traitlets 5.3.0 pyhd8ed1ab_0",
   "reproc-cpp 14.2.3 h3b9df90_0",
   "libffi 3.4.2 h4e0d66e_5",
   "_openmp_mutex 4.5 2_gnu",
   "clyent 1.2.2 py_1",
   "reproc 14.2.3 h4e0d66e_0",
   "sniffio 1.2.0 py39h0b1cf3c_3",
   "backports 1.0 py_2",
   "lz4-c 1.9.3 h3b9df90_1",
   "markupsafe 2.1.1 py39h9ca6cee_1",
   "conda 4.13.0 py39h0b1cf3c_1",
   "libuuid 2.32.1 h4e0d66e_1000",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "libiconv 1.16 h6eb9509_0",
   "python-libarchive-c 4.0 py39h0b1cf3c_1",
   "xz 5.2.5 h6eb9509_1",
   "charset-normalizer 2.1.0 pyhd8ed1ab_0",
   "keyutils 1.6.1 hb283c62_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "pycosat 0.6.3 py39h98ec90c_1010",
   "curl 7.83.1 h2ae36b4_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "importlib-metadata 4.11.4 py39hc1b9086_0",
   "libzlib 1.2.12 hb283c62_2",
   "pyopenssl 22.0.0 pyhd8ed1ab_0",
   "commonmark 0.9.1 py_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "conda-package-handling 1.8.1 py39h98ec90c_1",
   "pyrsistent 0.18.1 py39h9ca6cee_1",
   "patchelf 0.15.0 hea85c5d_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "urllib3 1.26.10 pyhd8ed1ab_0",
   "prompt-toolkit 3.0.30 pyha770c72_0",
   "libmamba 0.24.0 h9b76632_1",
   "sqlite 3.39.2 h3bd21b8_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "pyyaml 6.0 py39h98ec90c_4",
   "python-fastjsonschema 2.16.1 pyhd8ed1ab_0",
   "mamba 0.24.0 py39h3651b5a_1",
   "psutil 5.9.1 py39h98ec90c_0",
   "expat 2.4.8 hbbae597_0",
   "_libgcc_mutex 0.1 conda_forge",
   "libedit 3.1.20191231 h41a240f_2",
   "libnsl 2.0.0 h4e0d66e_0",
   "pytz 2022.1 pyhd8ed1ab_0",
   "libsolv 0.7.22 ha72a2fa_0",
   "lzo 2.10 h6eb9509_1000",
   "yaml 0.2.5 h4e0d66e_2",
   "su-exec 0.2 h6eb9509_1002",
   "rich 12.5.1 pyhd8ed1ab_0",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "future 0.18.2 py39hc1b9086_5",
   "ruamel.yaml 0.17.21 py39h98ec90c_1",
   "jupyter_core 4.11.1 py39h0b1cf3c_0",
   "cryptography 37.0.4 py39hd4ec19a_0",
   "zipp 3.8.0 pyhd8ed1ab_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "pysocks 1.7.1 py39hc1b9086_5",
   "pcre2 10.37 h32277c3_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "libcurl 7.83.1 h2ae36b4_0",
   "liblief 0.11.5 h3b9df90_1",
   "libarchive 3.5.2 h01158bd_3",
   "filelock 3.7.1 pyhd8ed1ab_0",
   "libmambapy 0.24.0 py39h12c9af7_1",
   "patch 2.7.6 h4e0d66e_1002",
   "tzdata 2022a h191b570_0",
   "pygments 2.12.0 pyhd8ed1ab_0",
   "jsonschema 4.7.2 pyhd8ed1ab_0",
   "attrs 21.4.0 pyhd8ed1ab_0",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "setuptools 63.2.0 py39hc1b9086_0",
   "libstdcxx-ng 12.1.0 h9be8c7b_16",
   "six 1.16.0 pyh6c4a22f_0",
   "importlib_resources 5.8.0 pyhd8ed1ab_0",
   "git 2.37.1 pl5321h131946c_0",
   "libnghttp2 1.47.0 h262a72d_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "readline 8.1.2 h6828edc_0",
   "libev 4.33 h6eb9509_1",
   "ncurses 6.3 hab78ccb_1",
   "colorama 0.4.5 pyhd8ed1ab_0",
   "cffi 1.15.1 py39h1929af6_0",
   "libgomp 12.1.0 hba45bf4_16",
   "tk 8.6.12 h41c6715_0",
   "requests 2.28.1 pyhd8ed1ab_0",
   "perl 5.32.1 2_h4e0d66e_perl5",
   "ca-certificates 2022.6.15 h1084571_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "openssl 1.1.1q hb283c62_0",
   "jq 1.6 h339bb43_1000",
   "pip 22.2.2 pyhd8ed1ab_0",
   "oniguruma 6.9.8 hb283c62_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "certifi 2022.6.15 pyhd8ed1ab_1",
   "conda-env 2.6.0 1",
   "conda-build 3.22.0 py39h0b1cf3c_2",
   "click 8.1.3 py39h0b1cf3c_0",
   "conda-forge-ci-setup 3.21.0 py39h3eade6b_100",
   "boa 0.11.0 pyha770c72_3",
   "toml 0.10.2 pyhd8ed1ab_0"
  ],
  "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc.",
  "tags": []
 },
 "conda_build_config": {
  "CI": "travis",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10.* *_cpython",
  "python_impl": "cpython",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "python",
    "python_impl"
   ]
  ]
 },
 "files": [
  "bin/dtw",
  "lib/python3.10/site-packages/dtw/__init__.py",
  "lib/python3.10/site-packages/dtw/__main__.py",
  "lib/python3.10/site-packages/dtw/_backtrack.py",
  "lib/python3.10/site-packages/dtw/_dtw_utils.c",
  "lib/python3.10/site-packages/dtw/_dtw_utils.cpython-310-powerpc64le-linux-gnu.so",
  "lib/python3.10/site-packages/dtw/_dtw_utils.pyx",
  "lib/python3.10/site-packages/dtw/_globalCostMatrix.py",
  "lib/python3.10/site-packages/dtw/countPaths.py",
  "lib/python3.10/site-packages/dtw/data/aami3a.csv",
  "lib/python3.10/site-packages/dtw/data/aami3b.csv",
  "lib/python3.10/site-packages/dtw/dtw.py",
  "lib/python3.10/site-packages/dtw/dtwPlot.py",
  "lib/python3.10/site-packages/dtw/dtw_core.c",
  "lib/python3.10/site-packages/dtw/dtw_core.h",
  "lib/python3.10/site-packages/dtw/dtw_test_data.py",
  "lib/python3.10/site-packages/dtw/mvm.py",
  "lib/python3.10/site-packages/dtw/stepPattern.py",
  "lib/python3.10/site-packages/dtw/warp.py",
  "lib/python3.10/site-packages/dtw/warpArea.py",
  "lib/python3.10/site-packages/dtw/window.py",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/AUTHORS.rst",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/COPYING",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/INSTALLER",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/METADATA",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/RECORD",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/REQUESTED",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/WHEEL",
  "lib/python3.10/site-packages/dtw_python-1.3.0.dist-info/direct_url.json"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "py310h93ff066_0",
  "build_number": 0,
  "depends": [
   "libgcc-ng >=12",
   "numpy >=1.23.2,<2.0a0",
   "python >=3.10,<3.11.0a0",
   "python_abi 3.10.* *_cp310",
   "scipy"
  ],
  "license": "GPL-3.0-or-later",
  "license_family": "GPL",
  "name": "dtw-python",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1662357067418,
  "version": "1.3.0"
 },
 "metadata_version": 1,
 "name": "dtw-python",
 "raw_recipe": "{% set name = \"dtw-python\" %}\n{% set version = \"1.3.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 2285012dc92c4744b78683d82439b279fd759b1005e702b62d03cbaa044f532b\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps -vv\n  skip: true  # [py<36 or python_impl == 'pypy']\n  entry_points:\n    - dtw = dtw.__main__:main\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython\n    - numpy >=1.19                           # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - setuptools\n  host:\n    - python\n    - pip\n    - cython\n    - numpy >=1.19\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n    - scipy\n\ntest:\n  imports:\n    - dtw\n  requires:\n    - pytest\n  source_files:\n    - tests\n  commands:\n    - pytest tests\n    - dtw --help\n\nabout:\n  home: https://dynamictimewarping.github.io/\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: COPYING\n  summary: A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions,\n    normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc.\n  description: DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW\n    is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.\n  doc_url: https://dynamictimewarping.github.io/python/\n  dev_url: https://github.com/DynamicTimeWarping/dtw-python\n\nextra:\n  recipe-maintainers:\n    - tonigi\n",
 "rendered_recipe": {
  "about": {
   "description": "DTW is a family of algorithms which compute the local stretch or compression to apply to the time axes of two timeseries in order to optimally map one (query) onto the other (reference). DTW outputs the remaining cumulative distance between the two and, if desired, the mapping itself (warping function). DTW is widely used for classification and clustering tasks, e.g. in bioinformatics, chemometrics, econometrics, and general timeseries mining.",
   "dev_url": "https://github.com/DynamicTimeWarping/dtw-python",
   "doc_url": "https://dynamictimewarping.github.io/python/",
   "home": "https://dynamictimewarping.github.io/",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "COPYING",
   "summary": "A comprehensive implementation of dynamic time warping (DTW) algorithms in Python.  DTW computes the optimal (least cumulative distance) alignment between points of two time series.  Common DTW variants covered include local (slope) and global (window) constraints, subsequence matches, arbitrary distance definitions, normalizations, minimum variance matching, and so on.  Provides cumulative distances, alignments, specialized plot styles, etc."
  },
  "build": {
   "entry_points": [
    "dtw = dtw.__main__:main"
   ],
   "number": "0",
   "script": "/home/conda/feedstock_root/build_artifacts/dtw-python_1662356906561/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . --no-deps -vv",
   "string": "py310h93ff066_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "tonigi"
   ]
  },
  "package": {
   "name": "dtw-python",
   "version": "1.3.0"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-ppc64le 2.36.1 h5836da8_2",
    "binutils_linux-ppc64le 2.36 he035471_10",
    "bzip2 1.0.8 h4e0d66e_4",
    "ca-certificates 2022.6.15 h1084571_0",
    "cython 0.29.32 py310h76aa780_0",
    "gcc_impl_linux-ppc64le 10.4.0 h340277b_16",
    "gcc_linux-ppc64le 10.4.0 hc879d7e_10",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libffi 3.4.2 h4e0d66e_5",
    "libgcc-devel_linux-ppc64le 10.4.0 h3c6d5d6_16",
    "libgcc-ng 12.1.0 hba45bf4_16",
    "libgomp 12.1.0 hba45bf4_16",
    "libnsl 2.0.0 h4e0d66e_0",
    "libsanitizer 10.4.0 h43f905f_16",
    "libsqlite 3.39.2 hcc10993_1",
    "libstdcxx-ng 12.1.0 h9be8c7b_16",
    "libuuid 2.32.1 h4e0d66e_1000",
    "libzlib 1.2.12 hb283c62_2",
    "ncurses 6.3 hab78ccb_1",
    "openssl 3.0.5 hb283c62_1",
    "python 3.10.6 h2c4edbf_0_cpython",
    "python_abi 3.10 2_cp310",
    "readline 8.1.2 h6828edc_0",
    "setuptools 65.3.0 pyhd8ed1ab_1",
    "sysroot_linux-ppc64le 2.17 h395ec9b_13",
    "tk 8.6.12 h41c6715_0",
    "tzdata 2022c h191b570_0",
    "xz 5.2.6 hb283c62_0"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "bzip2 1.0.8 h4e0d66e_4",
    "ca-certificates 2022.6.15 h1084571_0",
    "cython 0.29.32 py310h76aa780_0",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libblas 3.9.0 16_linuxppc64le_openblas",
    "libcblas 3.9.0 16_linuxppc64le_openblas",
    "libffi 3.4.2 h4e0d66e_5",
    "libgcc-ng 12.1.0 hba45bf4_16",
    "libgfortran-ng 12.1.0 hfdc3801_16",
    "libgfortran5 12.1.0 hda1505b_16",
    "libgomp 12.1.0 hba45bf4_16",
    "liblapack 3.9.0 16_linuxppc64le_openblas",
    "libnsl 2.0.0 h4e0d66e_0",
    "libopenblas 0.3.21 pthreads_h60f2977_3",
    "libsqlite 3.39.2 hcc10993_1",
    "libstdcxx-ng 12.1.0 h9be8c7b_16",
    "libuuid 2.32.1 h4e0d66e_1000",
    "libzlib 1.2.12 hb283c62_2",
    "ncurses 6.3 hab78ccb_1",
    "numpy 1.23.2 py310h5cafce7_0",
    "openssl 3.0.5 hb283c62_1",
    "pip 22.2.2 pyhd8ed1ab_0",
    "python 3.10.6 h2c4edbf_0_cpython",
    "python_abi 3.10 2_cp310",
    "readline 8.1.2 h6828edc_0",
    "setuptools 65.3.0 pyhd8ed1ab_1",
    "tk 8.6.12 h41c6715_0",
    "tzdata 2022c h191b570_0",
    "wheel 0.37.1 pyhd8ed1ab_0",
    "xz 5.2.6 hb283c62_0"
   ],
   "run": [
    "libgcc-ng >=12",
    "numpy >=1.23.2,<2.0a0",
    "python >=3.10,<3.11.0a0",
    "python_abi 3.10.* *_cp310",
    "scipy"
   ]
  },
  "source": {
   "sha256": "2285012dc92c4744b78683d82439b279fd759b1005e702b62d03cbaa044f532b",
   "url": "https://pypi.io/packages/source/d/dtw-python/dtw-python-1.3.0.tar.gz"
  },
  "test": {
   "commands": [
    "pytest tests",
    "dtw --help"
   ],
   "imports": [
    "dtw"
   ],
   "requires": [
    "pytest"
   ],
   "source_files": [
    "tests"
   ]
  }
 },
 "version": "1.3.0"
}