{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.8",
  "conda_private": false,
  "conda_version": "4.12.0",
  "dev_url": "https://github.com/oneapi-src/oneTBB",
  "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "anton-malakhov",
    "jschueller",
    "AlexVeprev"
   ]
  },
  "home": "https://github.com/oneapi-src/oneTBB",
  "identifiers": [],
  "keywords": [],
  "license": "Apache-2.0",
  "license_file": [
   "LICENSE.txt",
   "third-party-programs.txt"
  ],
  "root_pkgs": [
   "patch 2.7.6 h4e0d66e_1002",
   "dataclasses 0.8 pyhc8e2a94_3",
   "ca-certificates 2021.10.8 h1084571_0",
   "libgcc-ng 11.2.0 h7698a5e_14",
   "openssl 1.1.1n hb283c62_0",
   "prompt-toolkit 3.0.27 pyha770c72_0",
   "conda-package-handling 1.8.1 py39h9ca6cee_0",
   "lz4-c 1.9.3 h3b9df90_1",
   "json5 0.9.5 pyh9f0ad1d_0",
   "requests 2.27.1 pyhd8ed1ab_0",
   "libnsl 2.0.0 h4e0d66e_0",
   "ruamel_yaml 0.15.80 py39ha810350_1006",
   "pycparser 2.21 pyhd8ed1ab_0",
   "backports 1.0 py_2",
   "cffi 1.15.0 py39h7bf629d_0",
   "libmambapy 0.22.1 py39h937fae0_0",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "pygments 2.11.2 pyhd8ed1ab_0",
   "anyio 3.5.0 py39hc1b9086_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "setuptools 61.3.1 py39hc1b9086_0",
   "glob2 0.7 py_0",
   "py-lief 0.11.5 py39h4c72827_1",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "libedit 3.1.20191231 h41a240f_2",
   "libnghttp2 1.47.0 h262a72d_0",
   "filelock 3.6.0 pyhd8ed1ab_0",
   "libiconv 1.16 h6eb9509_0",
   "libzlib 1.2.11 hb283c62_1014",
   "pyopenssl 22.0.0 pyhd8ed1ab_0",
   "ruamel.yaml.clib 0.2.6 py39hf1a8857_0",
   "python-libarchive-c 4.0 py39h0b1cf3c_0",
   "libev 4.33 h6eb9509_1",
   "libxml2 2.9.12 hc8bd4e3_2",
   "python 3.9.12 h08a33c2_1_cpython",
   "pytz 2022.1 pyhd8ed1ab_0",
   "importlib_resources 5.6.0 pyhd8ed1ab_0",
   "su-exec 0.2 h6eb9509_1002",
   "libstdcxx-ng 11.2.0 habdf983_14",
   "yaml-cpp 0.6.3 hb209c28_4",
   "jinja2 3.1.1 pyhd8ed1ab_0",
   "_openmp_mutex 4.5 1_gnu",
   "pkginfo 1.8.2 pyhd8ed1ab_0",
   "tqdm 4.63.1 pyhd8ed1ab_0",
   "pyrsistent 0.18.1 py39ha810350_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "libuuid 2.32.1 h4e0d66e_1000",
   "libssh2 1.10.0 ha5a9321_2",
   "yaml 0.2.5 h4e0d66e_2",
   "jupyter_core 4.9.2 py39h0b1cf3c_0",
   "ncurses 6.3 h3b9df90_0",
   "soupsieve 2.3.1 pyhd8ed1ab_0",
   "urllib3 1.26.9 pyhd8ed1ab_0",
   "keyutils 1.6.1 hb283c62_0",
   "pycosat 0.6.3 py39ha810350_1009",
   "clyent 1.2.2 py_1",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "commonmark 0.9.1 py_0",
   "charset-normalizer 2.0.12 pyhd8ed1ab_0",
   "attrs 21.4.0 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "chardet 4.0.0 py39hc1b9086_2",
   "libmamba 0.22.1 h7a317dc_0",
   "libsolv 0.7.19 h690f14c_5",
   "conda-build 3.21.8 py39h0b1cf3c_0",
   "reproc 14.2.3 h4e0d66e_0",
   "zlib 1.2.11 hb283c62_1014",
   "sniffio 1.2.0 py39h0b1cf3c_3",
   "readline 8.1 h5c45dff_0",
   "rich 12.0.1 pyhd8ed1ab_0",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "libffi 3.4.2 h4e0d66e_5",
   "certifi 2021.10.8 py39h0b1cf3c_2",
   "tk 8.6.12 h41c6715_0",
   "icu 70.1 h3b4ca64_0",
   "nbformat 5.2.0 pyhd8ed1ab_0",
   "reproc-cpp 14.2.3 h3b9df90_0",
   "ripgrep 13.0.0 h0cb23b2_2",
   "prompt_toolkit 3.0.27 hd8ed1ab_0",
   "importlib-metadata 4.11.3 py39hc1b9086_1",
   "expat 2.4.8 hbbae597_0",
   "zipp 3.7.0 pyhd8ed1ab_1",
   "boa 0.10.0 pyha770c72_0",
   "xz 5.2.5 h6eb9509_1",
   "cryptography 36.0.2 py39hd4ec19a_0",
   "ruamel.yaml 0.17.21 py39hf1a8857_0",
   "typing_extensions 4.1.1 pyha770c72_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "traitlets 5.1.1 pyhd8ed1ab_0",
   "mamba 0.22.1 py39h3651b5a_0",
   "sqlite 3.37.1 h3bd21b8_0",
   "pip 22.0.4 pyhd8ed1ab_0",
   "conda 4.12.0 py39h0b1cf3c_0",
   "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
   "pcre2 10.37 h32277c3_0",
   "bzip2 1.0.8 h4e0d66e_4",
   "pysocks 1.7.1 py39hc1b9086_5",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "libarchive 3.5.2 h3281d6a_1",
   "future 0.18.2 py39hc1b9086_4",
   "_libgcc_mutex 0.1 conda_forge",
   "jsonschema 4.4.0 pyhd8ed1ab_0",
   "lzo 2.10 h6eb9509_1000",
   "patchelf 0.14.5 hea85c5d_0",
   "idna 3.3 pyhd8ed1ab_0",
   "libcurl 7.82.0 h2ae36b4_0",
   "tini 0.19.0 h4e0d66e_0",
   "liblief 0.11.5 h3b9df90_1",
   "tzdata 2022a h191b570_0",
   "python_abi 3.9 2_cp39",
   "brotlipy 0.7.0 py39h98ec90c_1004",
   "zstd 1.5.1 h65c4b1a_0",
   "pyyaml 6.0 py39h98ec90c_4",
   "gettext 0.19.8.1 h6603d1e_1008",
   "psutil 5.9.0 py39h98ec90c_1",
   "krb5 1.19.3 h33c4487_0",
   "curl 7.82.0 h2ae36b4_0",
   "libgomp 11.2.0 h7698a5e_14",
   "six 1.16.0 pyh6c4a22f_0",
   "perl 5.32.1 2_h4e0d66e_perl5",
   "markupsafe 2.1.1 py39h9ca6cee_1",
   "git 2.35.1 pl5321h131946c_0",
   "c-ares 1.18.1 h4e0d66e_0",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "oniguruma 6.9.7.1 h4e0d66e_0",
   "click 8.1.2 py39h0b1cf3c_0",
   "jq 1.6 h339bb43_1000",
   "conda-forge-ci-setup 3.20.0 py39ha7e1dda_100"
  ],
  "summary": "High level abstract threading library",
  "tags": []
 },
 "conda_build_config": {
  "CI": "travis",
  "c_compiler": "gcc",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_73_pypy",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "tbb": "2020"
 },
 "files": [
  "lib/libtbb.so.12",
  "lib/libtbb.so.12.5",
  "lib/libtbbmalloc.so.2",
  "lib/libtbbmalloc.so.2.5",
  "lib/libtbbmalloc_proxy.so.2",
  "lib/libtbbmalloc_proxy.so.2.5"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "h06f31f1_1",
  "build_number": 1,
  "depends": [
   "libgcc-ng >=10.3.0",
   "libstdcxx-ng >=10.3.0"
  ],
  "license": "Apache-2.0",
  "name": "tbb",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1649099900673,
  "version": "2021.5.0"
 },
 "metadata_version": 1,
 "name": "tbb",
 "raw_recipe": "{% set version = \"2021.5.0\" %}\n\n{% set vmajor = version.split('.')[0]|int %}\n{% set vminor = version.split('.')[1]|int %}\n{% set vpatch = version.split('.')[2]|int %}\n{% set vbinary = vmajor - 2009 %}\n\n{% set vtag = \"v%d.%d.%d\" % (vmajor, vminor, vpatch) %}\n\n# Official patch version for the first release of 2021 is 1,\n# but internal patch version is 0, handle it for interface version.\n{% set vinterface = \"%d\" % (vbinary * 1000 + vminor * 10 + (vpatch if vmajor != 2021 or vminor != 1 else 0)) %}\n\n# Libraries on Windows are expected to be installed into LIBRARY_PREFIX.\n# tbb4py files should be installed into PREFIX.\n# See https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html.\n# On non-Windows CMAKE_ARGS already contains CMAKE_INSTALL_PREFIX.\n# CMAKE_PREFIX_PATH is needed to discover libhwloc with PkgConfig.\n{% if win %}\n    {% set cmake_args = \"%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX%\" %}\n    {% set cmake_tbb4py_args = \"%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%PREFIX%\" %}\n{% else %}\n    {% set cmake_args = \"$CMAKE_ARGS\" %}\n    {% set cmake_tbb4py_args = \"$CMAKE_ARGS\" %}\n{% endif %}\n\n# Use specific test list agreed with TBB team to cover core functionality on high level.\n# Execution of all tests is too heavy task for packaging CI.\n# test_malloc_compliance is temporary excluded from the list since it causes failures that likely appear due to test implementation or env misconfiguration.\n# oneTBB issue: https://github.com/oneapi-src/oneTBB/issues/700\n# Agreed with oneTBB developers that it is suitable approach since the product is fully tested on oneTBB side.\n{% set tests = \"test_parallel_for test_tbb_header conformance_version test_flow_graph test_arena_constraints\" %}\n{% set ctest_regex = \"^(%s)$\" % (tests.replace(' ', '|')) %}\n\n{% set tbb4py_build_dir = \"build_$PKG_HASH\" %}  # [not win]\n{% set tbb4py_build_dir = \"build_%PKG_HASH%\" %}  # [win]\n\npackage:\n  name: tbb\n  version: {{ version }}\n\nsource:\n  fn: {{ vtag }}.tar.gz\n  url: https://github.com/oneapi-src/oneTBB/archive/{{ vtag }}.tar.gz\n  sha256: e5b57537c741400cf6134b428fc1689a649d7d38d9bb9c1b6d64f092ea28178a\n\nbuild:\n  number: 1\n\nrequirements:\n  build:\n    - python *\n    - {{ compiler('cxx') }}\n    - ninja  # [win]\n    - make   # [not win]\n    - cmake\n\noutputs:\n  - name: tbb\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja      # [win]\n        # unset option that ninja complains about\n        - set CMAKE_GENERATOR_TOOLSET=   # [win]\n        - set CMAKE_GENERATOR_PLATFORM=  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=runtime -P build/cmake_install.cmake\n    test:\n      requires:\n        # any python version is ok for sake of testing of shared libraries\n        - python *\n      commands:\n        {% set libname = \"libtbb.so.\" ~ vbinary ~ \".\" ~ vminor %}          # [linux]\n        {% set libname = \"libtbb.\" ~ vbinary ~ \".\" ~ vminor ~ \".dylib\" %}  # [osx]\n        {% set libname = \"tbb\" ~ vbinary ~ \".dll\" %}                       # [win]\n        {% set win_extra = \"os.add_dll_directory(os.environ['LIBRARY_BIN']); \" if win else \"\" %}\n        - python -c \"import ctypes, os; {{ win_extra }} assert {{ vinterface }} == ctypes.cdll[r'{{ libname }}']['TBB_runtime_interface_version']()\"\n\n  - name: tbb-devel\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja      # [win]\n        - set CMAKE_GENERATOR_TOOLSET=   # [win]\n        - set CMAKE_GENERATOR_PLATFORM=  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=devel -P build/cmake_install.cmake\n      run_exports:\n        - tbb >={{ version }}\n    requirements:\n      build:\n        - python *\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake >=3.13\n\n      run:\n        - {{ pin_subpackage('tbb', exact=True) }}        # development package is for specific version of tbb\n    test:\n      requires:\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n      source_files:\n        - cmake\n        - test\n        - CMakeLists.txt\n        - include  # some tests depend on files from include\n        - src      # some tests depend on files from src\n      commands:\n        - set CMAKE_GENERATOR=Ninja      # [win]\n        - set CMAKE_GENERATOR_TOOLSET=   # [win]\n        - set CMAKE_GENERATOR_PLATFORM=  # [win]\n        # Setting TBB_DIR=TRUE is needed to use libraries from the tested package,\n        # but do not build them from sources; real path to TBBConfig files is not required,\n        # because CMake will successfully find installed tested package.\n        - cmake {{ cmake_args }} -DTBB_TEST=ON -DTBB_DIR=TRUE -S . -B test_build\n        - cmake --build test_build --target {{ tests }} --parallel  # build tests\n        - cd test_build\n        - ctest -R \"{{ ctest_regex }}\" --output-on-failure\n\n  - name: tbb4py\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja      # [win]\n        - set CMAKE_GENERATOR_TOOLSET=   # [win]\n        - set CMAKE_GENERATOR_PLATFORM=  # [win]\n        - cmake {{ cmake_tbb4py_args }} -DTBB4PY_BUILD=ON -DTBB_TEST=OFF -S . -B {{ tbb4py_build_dir }}\n        - cmake --build {{ tbb4py_build_dir }} --target python_build --parallel\n        - cmake -DCOMPONENT=tbb4py -P {{ tbb4py_build_dir }}/cmake_install.cmake\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n        - swig\n      host:\n        - python\n        - {{ pin_subpackage('tbb-devel', exact=True) }}\n      run:\n        - tbb >={{ version }}                            # while python module works with any compatible tbb...\n        - python\n    test:\n      requires:\n        - python\n        - {{ pin_subpackage('tbb', exact=True) }}        # we want to test with this specific tbb package\n      imports:\n        - tbb\n        - TBB\n      commands:\n        - python -m TBB -h\n        - python -m tbb -h\n        - python -m tbb test\n    about:\n      summary: TBB module for Python\n      license: Apache 2.0\n      dev_url: https://github.com/oneapi-src/oneTBB\n\nabout:\n  home: https://github.com/oneapi-src/oneTBB\n  license: Apache-2.0\n  license_file:\n    - LICENSE.txt\n    - third-party-programs.txt\n  summary: High level abstract threading library\n  dev_url: https://github.com/oneapi-src/oneTBB\n  doc_url: https://software.intel.com/en-us/oneapi-tbb-documentation\n\nextra:\n  recipe-maintainers:\n    - anton-malakhov\n    - jschueller\n    - AlexVeprev\n",
 "rendered_recipe": {
  "about": {
   "dev_url": "https://github.com/oneapi-src/oneTBB",
   "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
   "home": "https://github.com/oneapi-src/oneTBB",
   "license": "Apache-2.0",
   "license_file": [
    "LICENSE.txt",
    "third-party-programs.txt"
   ],
   "summary": "High level abstract threading library"
  },
  "build": {
   "number": "1",
   "script": [
    "cmake $CMAKE_ARGS -DTBB_TEST=OFF -S . -B build",
    "cmake --build build --parallel",
    "cmake -DCOMPONENT=runtime -P build/cmake_install.cmake"
   ],
   "string": "h06f31f1_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "AlexVeprev",
    "anton-malakhov",
    "jschueller"
   ]
  },
  "package": {
   "name": "tbb",
   "version": "2021.5.0"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "binutils_impl_linux-ppc64le 2.36.1 h5836da8_2",
    "binutils_linux-ppc64le 2.36 he035471_9",
    "bzip2 1.0.8 h4e0d66e_4",
    "c-ares 1.18.1 h4e0d66e_0",
    "ca-certificates 2021.10.8 h1084571_0",
    "cmake 3.23.0 h4f7acd8_1",
    "expat 2.4.8 hbbae597_0",
    "gcc_impl_linux-ppc64le 10.3.0 h4706ea9_14",
    "gcc_linux-ppc64le 10.3.0 h0cb3363_9",
    "gxx_impl_linux-ppc64le 10.3.0 h4706ea9_14",
    "gxx_linux-ppc64le 10.3.0 ha412328_9",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "keyutils 1.6.1 hb283c62_0",
    "krb5 1.19.3 ha6b4ebd_0",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libcurl 7.82.0 h1ac174b_0",
    "libedit 3.1.20191231 h41a240f_2",
    "libev 4.33 h6eb9509_1",
    "libffi 3.4.2 h4e0d66e_5",
    "libgcc-devel_linux-ppc64le 10.3.0 h5d09a8e_14",
    "libgcc-ng 11.2.0 h7698a5e_14",
    "libgomp 11.2.0 h7698a5e_14",
    "libnghttp2 1.47.0 h350ef5c_0",
    "libnsl 2.0.0 h4e0d66e_0",
    "libsanitizer 10.3.0 h85ad208_14",
    "libssh2 1.10.0 he881182_2",
    "libstdcxx-devel_linux-ppc64le 10.3.0 h5d09a8e_14",
    "libstdcxx-ng 11.2.0 habdf983_14",
    "libuuid 2.32.1 h4e0d66e_1000",
    "libuv 1.43.0 h4e0d66e_0",
    "libzlib 1.2.11 hb283c62_1014",
    "lz4-c 1.9.3 h3b9df90_1",
    "make 4.3 hf817498_1",
    "ncurses 6.3 h3b9df90_0",
    "openssl 3.0.2 hb283c62_1",
    "python 3.10.4 h88f7be1_0_cpython",
    "readline 8.1 h5c45dff_0",
    "rhash 1.4.1 h4e0d66e_0",
    "sqlite 3.37.1 h3bd21b8_0",
    "sysroot_linux-ppc64le 2.17 h395ec9b_13",
    "tk 8.6.12 h41c6715_0",
    "tzdata 2022a h191b570_0",
    "xz 5.2.5 h6eb9509_1",
    "zlib 1.2.11 hb283c62_1014",
    "zstd 1.5.1 h65c4b1a_0"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "libgcc-ng 11.2.0 h7698a5e_14",
    "libgomp 11.2.0 h7698a5e_14",
    "libstdcxx-ng 11.2.0 habdf983_14"
   ],
   "run": [
    "libgcc-ng >=10.3.0",
    "libstdcxx-ng >=10.3.0"
   ]
  },
  "source": {
   "fn": "v2021.5.0.tar.gz",
   "sha256": "e5b57537c741400cf6134b428fc1689a649d7d38d9bb9c1b6d64f092ea28178a",
   "url": "https://github.com/oneapi-src/oneTBB/archive/v2021.5.0.tar.gz"
  }
 },
 "version": "2021.5.0"
}