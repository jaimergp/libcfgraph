{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.22.0",
  "conda_private": false,
  "conda_version": "22.9.0",
  "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "duncanmmacleod",
    "scopatz",
    "chrisburr",
    "isuruf"
   ]
  },
  "home": "https://conda-forge.org",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE.txt",
  "root_pkgs": [
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "liblief 0.12.2 h4de3ea5_0",
   "patchelf 0.15.0 h884eca8_0",
   "icu 70.1 ha18d298_0",
   "su-exec 0.2 h4e544f5_1003",
   "backports 1.0 py_2",
   "tqdm 4.64.1 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "libffi 3.4.2 h3557bc0_5",
   "c-ares 1.18.1 hf897c2e_0",
   "traitlets 5.4.0 pyhd8ed1ab_0",
   "six 1.16.0 pyh6c4a22f_0",
   "pyopenssl 22.1.0 pyhd8ed1ab_0",
   "chardet 5.0.0 py310hbbe02a8_0",
   "urllib3 1.26.11 pyhd8ed1ab_0",
   "libgcc-ng 12.1.0 h3242a24_17",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "patch 2.7.6 hf897c2e_1002",
   "cryptography 38.0.2 py310h07dd38e_0",
   "expat 2.4.9 ha18d298_0",
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "tzdata 2022e h191b570_0",
   "zstd 1.5.2 hc1e27d5_4",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "pytz 2022.4 pyhd8ed1ab_0",
   "importlib_resources 5.10.0 pyhd8ed1ab_0",
   "ruamel.yaml.clib 0.2.6 py310h761cc84_1",
   "libedit 3.1.20191231 he28a2e2_2",
   "ruamel.yaml 0.17.21 py310h761cc84_1",
   "python 3.10.6 h023d47c_0_cpython",
   "importlib-metadata 4.11.4 py310hbbe02a8_0",
   "pcre2 10.37 he7b27c6_1",
   "tini 0.19.0 h4e544f5_1",
   "libarchive 3.5.2 h610d84a_3",
   "jsonschema 4.16.0 pyhd8ed1ab_0",
   "libxml2 2.9.14 h370961a_4",
   "ruamel_yaml 0.15.80 py310h761cc84_1007",
   "curl 7.85.0 h8fd98b7_0",
   "conda 22.9.0 py310h4c7bcd0_1",
   "git 2.38.0 pl5321h6429092_0",
   "python_abi 3.10 2_cp310",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "typing_extensions 4.4.0 pyha770c72_0",
   "gettext 0.21.1 ha18d298_0",
   "bzip2 1.0.8 hf897c2e_4",
   "pyrsistent 0.18.1 py310hdc54845_1",
   "python-libarchive-c 4.0 py310h4c7bcd0_1",
   "openssl 1.1.1q h4e544f5_0",
   "setuptools 65.5.0 pyhd8ed1ab_0",
   "libsolv 0.7.22 h7866ba4_0",
   "readline 8.1.2 h38e3740_0",
   "brotlipy 0.7.0 py310h761cc84_1004",
   "toml 0.10.2 pyhd8ed1ab_0",
   "idna 3.4 pyhd8ed1ab_0",
   "libstdcxx-ng 12.1.0 hd01590b_17",
   "anyio 3.6.1 pyhd8ed1ab_1",
   "ripgrep 13.0.0 hc770f70_2",
   "krb5 1.19.3 h7c456eb_0",
   "perl 5.32.1 2_hf897c2e_perl5",
   "tk 8.6.12 hd8af866_0",
   "libgomp 12.1.0 h3242a24_17",
   "requests 2.28.1 pyhd8ed1ab_1",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "libuuid 2.32.1 hf897c2e_1000",
   "pysocks 1.7.1 pyha2e5f31_6",
   "libmambapy 0.27.0 py310h76fea7e_0",
   "conda-build 3.22.0 py310h4c7bcd0_2",
   "libcurl 7.85.0 h8fd98b7_0",
   "psutil 5.9.2 py310h761cc84_0",
   "pygments 2.13.0 pyhd8ed1ab_0",
   "ca-certificates 2022.9.24 h4fd8a4c_0",
   "yaml 0.2.5 hf897c2e_2",
   "reproc 14.2.3 hf897c2e_0",
   "python-fastjsonschema 2.16.2 pyhd8ed1ab_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "libsqlite 3.39.4 hf9034f9_0",
   "libmamba 0.27.0 hfcbcd16_0",
   "lz4-c 1.9.3 h01db608_1",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "charset-normalizer 2.1.1 pyhd8ed1ab_0",
   "jupyter_core 4.11.1 py310h4c7bcd0_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "libzlib 1.2.13 h4e544f5_4",
   "clyent 1.2.2 py_1",
   "xz 5.2.6 h9cdd2b7_0",
   "pycosat 0.6.3 py310h761cc84_1010",
   "yaml-cpp 0.7.0 h4de3ea5_2",
   "pip 22.3 pyhd8ed1ab_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "future 0.18.2 py310hbbe02a8_5",
   "zipp 3.9.0 pyhd8ed1ab_0",
   "ncurses 6.3 headf329_1",
   "nbformat 5.7.0 pyhd8ed1ab_0",
   "libssh2 1.10.0 h4bb3959_3",
   "libnsl 2.0.0 hf897c2e_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "mamba 0.27.0 py310hcf12e44_0",
   "libiconv 1.17 h9cdd2b7_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "attrs 22.1.0 pyh71513ae_1",
   "_openmp_mutex 4.5 2_gnu",
   "lzo 2.10 h516909a_1000",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "certifi 2022.9.24 pyhd8ed1ab_0",
   "filelock 3.8.0 pyhd8ed1ab_0",
   "reproc-cpp 14.2.3 h01db608_0",
   "libnghttp2 1.47.0 h4173d3e_1",
   "colorama 0.4.5 pyhd8ed1ab_0",
   "py-lief 0.12.2 py310h130cc07_0",
   "pyyaml 6.0 py310h761cc84_4",
   "prompt_toolkit 3.0.31 hd8ed1ab_0",
   "commonmark 0.9.1 py_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "cffi 1.15.1 py310hf0c4615_0",
   "boa 0.12.0 pyha770c72_4",
   "markupsafe 2.1.1 py310hdc54845_1",
   "rich 12.6.0 pyhd8ed1ab_0",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "ld_impl_linux-aarch64 2.36.1 h02ad14f_2",
   "prompt-toolkit 3.0.31 pyha770c72_0",
   "conda-package-handling 1.9.0 py310h761cc84_0",
   "keyutils 1.6.1 h4e544f5_0",
   "libev 4.33 h516909a_1",
   "conda-forge-ci-setup 3.21.0 py310hf7ba518_100",
   "oniguruma 6.9.8 h4e544f5_0",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "click 8.1.3 py310h4c7bcd0_0",
   "jq 1.6 hb9de7d4_1000"
  ],
  "summary": "A metapackage to obtain compilers",
  "tags": []
 },
 "conda_build_config": {
  "BUILD": "aarch64-conda_cos7-linux-gnu",
  "CI": "travis",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_arch": "aarch64",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-aarch64",
  "extend_keys": [
   "ignore_version",
   "ignore_build_only_deps",
   "extend_keys",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "10",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-aarch64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "fortran_compiler_version"
   ]
  ]
 },
 "files": [],
 "index": {
  "arch": "aarch64",
  "build": "h8af1aa0_0",
  "build_number": 0,
  "depends": [
   "c-compiler 1.5.1 h4e544f5_0",
   "cxx-compiler 1.5.1 hdd96247_0",
   "fortran-compiler 1.5.1 h3fbb618_0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "compilers",
  "platform": "linux",
  "subdir": "linux-aarch64",
  "timestamp": 1666132082460,
  "version": "1.5.1"
 },
 "metadata_version": 1,
 "name": "compilers",
 "raw_recipe": "{% set c_compiler = compiler('c').split('_')[0] %}\n{% set cxx_compiler = compiler('cxx').split('_')[0] %}\n{% set fortran_compiler = compiler('fortran').split('_')[0] %}\n\n{% set commands = {\n  'c-compiler': {\n    'gcc': ['cc', 'cpp', 'gcc', 'gcc-ar', 'gcc-nm',\n              'gcc-ranlib', 'gcov', 'gcov-dump', 'gcov-tool'],\n    'clang': ['clang'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[c_compiler],\n  'cxx-compiler': {\n    'gxx': ['g++', 'c++'],\n    'clangxx': ['clang++'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[cxx_compiler],\n  'fortran-compiler': {\n    'gfortran': ['gfortran'],\n  }[fortran_compiler],\n} %}\n\n\npackage:\n  name: compilers\n  version: 1.5.1\n\nbuild:\n   number: 0\n\noutputs:\n  - name: c-compiler\n    requirements:\n      run:\n        - {{ compiler('c') }}\n        - binutils             # [linux]\n        - gcc                  # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n    test:\n      commands:\n        - $CC --help  # [unix]\n{%- for command in commands['c-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C compiler\n      description: |\n        This package is a generic way to obtain the C compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('c') instead.\n\n  - name: cxx-compiler\n    requirements:\n      run:\n        - {{ compiler('cxx') }}\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [unix]\n        - gxx                  # [linux]\n    test:\n      commands:\n        - $CXX --help  # [unix]\n{%- for command in commands['cxx-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C++ compiler\n      description: |\n        This package is a generic way to obtain the C++ compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('cxx') instead.\n\n  - name: fortran-compiler\n    requirements:\n      run:\n        - {{ compiler('fortran') }}\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n        - gfortran             # [linux or osx]\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [linux]\n    test:\n      commands:\n        - $FC --help  # [unix]\n{%- for command in commands['fortran-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a Fortran compiler\n      description: |\n        This package is a generic way to obtain the Fortran compiler for your\n        system that conda-forge used to compile its ecosystem.  This compiler\n        is, therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('fortran') instead.\n\n  - name: compilers\n    requirements:\n      run:\n        - {{ pin_subpackage('c-compiler', exact=True) }}\n        - {{ pin_subpackage('cxx-compiler', exact=True) }}\n        - {{ pin_subpackage('fortran-compiler', exact=True) }}\n    test:\n      commands:\n        - $CC --help  # [unix]\n        - $CXX --help  # [unix]\n        - $FC --help  # [unix]\n\nabout:\n  home: https://conda-forge.org\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: A metapackage to obtain compilers\n  description: |\n    This package is a generic way to obtain the compilers for your system\n    that conda-forge used to compile its ecosystem. These compilers are,\n    therefore, guaranteed to be ABI compatible with the conda packages\n    you have installed.\n\n    These compiler metapackages are a convenience ONLY for users.\n    Do NOT use these packages as a build or host dependencies in other\n    recipes.  Use the compiler Jinja template function instead.\n    For C++ for example, use compiler('cxx') as usual.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - scopatz\n    - chrisburr\n    - isuruf\n",
 "rendered_recipe": {
  "about": {
   "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
   "home": "https://conda-forge.org",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE.txt",
   "summary": "A metapackage to obtain compilers"
  },
  "build": {
   "number": "0",
   "string": "h8af1aa0_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "duncanmmacleod",
    "isuruf",
    "scopatz"
   ]
  },
  "package": {
   "name": "compilers",
   "version": "1.5.1"
  },
  "requirements": {
   "build": [],
   "run": [
    "c-compiler 1.5.1 h4e544f5_0",
    "cxx-compiler 1.5.1 hdd96247_0",
    "fortran-compiler 1.5.1 h3fbb618_0"
   ]
  }
 },
 "version": "1.5.1"
}