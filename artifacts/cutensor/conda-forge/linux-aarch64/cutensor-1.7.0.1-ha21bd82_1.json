{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.24.0",
  "conda_version": "23.1.0",
  "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
  "dev_url": "https://developer.nvidia.com/cutensor/downloads",
  "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "JeremyWangNVDA",
    "leofang",
    "jakirkham",
    "mtjrider"
   ]
  },
  "home": "https://developer.nvidia.com/cutensor",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "license_file": "LICENSE",
  "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
  "root_pkgs": [
   "prompt-toolkit 3.0.38 pyha770c72_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "libgcc-ng 12.2.0 h607ecd0_19",
   "su-exec 0.2 h4e544f5_1003",
   "libssh2 1.10.0 he5a64b1_3",
   "conda-package-streaming 0.7.0 pyhd8ed1ab_1",
   "glob2 0.7 py_0",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "libffi 3.4.2 h3557bc0_5",
   "c-ares 1.18.1 hf897c2e_0",
   "six 1.16.0 pyh6c4a22f_0",
   "fmt 9.1.0 hdd96247_0",
   "pyopenssl 23.1.0 pyhd8ed1ab_0",
   "zstd 1.5.2 h44f6412_6",
   "urllib3 1.26.15 pyhd8ed1ab_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "icu 72.1 hcf00150_0",
   "reproc 14.2.4 hb4cce97_0",
   "ca-certificates 2022.12.7 h4fd8a4c_0",
   "pycosat 0.6.4 py310h761cc84_1",
   "pyyaml 6.0 py310h761cc84_5",
   "pluggy 1.0.0 pyhd8ed1ab_5",
   "ruamel.yaml.clib 0.2.7 py310hb89b984_1",
   "openssl 3.1.0 hb4cce97_0",
   "boa 0.14.0 pyhd8ed1ab_4",
   "patch 2.7.6 hf897c2e_1002",
   "pygments 2.14.0 pyhd8ed1ab_0",
   "libmamba 1.4.0 h4a4fd89_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "platformdirs 3.1.1 pyhd8ed1ab_0",
   "cryptography 40.0.0 py310he4ba0b1_0",
   "typing-extensions 4.5.0 hd8ed1ab_0",
   "python-libarchive-c 4.0 py310h4c7bcd0_2",
   "libedit 3.1.20191231 he28a2e2_2",
   "conda-build 3.24.0 py310h4c7bcd0_0",
   "anyio 3.6.2 pyhd8ed1ab_0",
   "libsolv 0.7.23 h3cb9bc8_0",
   "backports 1.0 pyhd8ed1ab_3",
   "tini 0.19.0 h4e544f5_1",
   "tqdm 4.65.0 pyhd8ed1ab_1",
   "conda 23.1.0 py310h4c7bcd0_0",
   "chardet 5.1.0 py310hbbe02a8_0",
   "reproc-cpp 14.2.4 hd600fc2_0",
   "pcre2 10.40 he7b27c6_0",
   "pillow 9.4.0 py310hcf0f7da_2",
   "gettext 0.21.1 ha18d298_0",
   "bzip2 1.0.8 hf897c2e_4",
   "libxml2 2.10.3 h430b14f_6",
   "libstdcxx-ng 12.2.0 hc13a102_19",
   "pthread-stubs 0.4 hb9de7d4_1001",
   "conda-package-handling 2.0.2 pyh38be061_0",
   "requests 2.28.2 pyhd8ed1ab_0",
   "importlib_resources 5.12.0 pyhd8ed1ab_0",
   "readline 8.2 h8fc344f_1",
   "ruamel_yaml 0.15.80 py310h761cc84_1008",
   "libxcb 1.13 h3557bc0_1004",
   "anaconda-client 1.11.1 pyhd8ed1ab_0",
   "idna 3.4 pyhd8ed1ab_0",
   "tornado 6.2 py310hdc54845_1",
   "importlib-metadata 6.1.0 pyha770c72_0",
   "nbformat 5.8.0 pyhd8ed1ab_0",
   "liblief 0.12.3 h4de3ea5_0",
   "pyrsistent 0.19.3 py310h734f5e8_0",
   "xorg-libxdmcp 1.1.3 h3557bc0_0",
   "wcwidth 0.2.6 pyhd8ed1ab_0",
   "ripgrep 13.0.0 hc770f70_2",
   "perl 5.32.1 2_hf897c2e_perl5",
   "tk 8.6.12 hd8af866_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "libuuid 2.32.1 hf897c2e_1000",
   "pysocks 1.7.1 pyha2e5f31_6",
   "patchelf 0.17.2 h884eca8_0",
   "libnghttp2 1.52.0 h250e5c5_0",
   "jupyter_core 5.3.0 py310h4c7bcd0_0",
   "ruamel.yaml 0.17.21 py310hb89b984_3",
   "psutil 5.9.4 py310h761cc84_0",
   "libtiff 4.5.0 h536c0eb_6",
   "freetype 2.12.1 hbbbf32d_1",
   "yaml 0.2.5 hf897c2e_2",
   "libjpeg-turbo 2.1.5.1 hb4cce97_0",
   "certifi 2022.12.7 pyhd8ed1ab_0",
   "libwebp-base 1.3.0 hb4cce97_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "mdurl 0.1.0 pyhd8ed1ab_0",
   "libsqlite 3.40.0 hf9034f9_0",
   "jsonschema 4.17.3 pyhd8ed1ab_0",
   "charset-normalizer 2.1.1 pyhd8ed1ab_0",
   "prompt_toolkit 3.0.38 hd8ed1ab_0",
   "python-fastjsonschema 2.16.3 pyhd8ed1ab_0",
   "tzdata 2023b h71feb2d_0",
   "lz4-c 1.9.4 hd600fc2_0",
   "libgomp 12.2.0 h607ecd0_19",
   "dataclasses 0.8 pyhc8e2a94_3",
   "git 2.40.0 pl5321h7e2208b_1",
   "zstandard 0.19.0 py310hde4b81c_1",
   "libarchive 3.6.2 hc81d4a0_0",
   "markupsafe 2.1.2 py310h734f5e8_0",
   "libzlib 1.2.13 h4e544f5_4",
   "libdeflate 1.18 hb4cce97_0",
   "setuptools 65.6.3 pyhd8ed1ab_0",
   "clyent 1.2.2 py_1",
   "python 3.10.10 ha43d526_0_cpython",
   "attrs 22.2.0 pyh71513ae_0",
   "traitlets 5.9.0 pyhd8ed1ab_0",
   "xz 5.2.6 h9cdd2b7_0",
   "yaml-cpp 0.7.0 h4de3ea5_2",
   "libpng 1.6.39 hf9034f9_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "py-lief 0.12.3 py310h130cc07_0",
   "python_abi 3.10 3_cp310",
   "zipp 3.15.0 pyhd8ed1ab_0",
   "ncurses 6.3 headf329_1",
   "packaging 23.0 pyhd8ed1ab_0",
   "libnsl 2.0.0 hf897c2e_0",
   "ld_impl_linux-aarch64 2.40 h2d8c526_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "libiconv 1.17 h9cdd2b7_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "pytz 2023.2 pyhd8ed1ab_0",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "libcurl 7.88.1 h6ad7c7a_1",
   "_openmp_mutex 4.5 2_gnu",
   "lzo 2.10 h516909a_1000",
   "typing_extensions 4.5.0 pyha770c72_0",
   "markdown-it-py 2.2.0 pyhd8ed1ab_0",
   "mamba 1.4.0 py310hcbdc16a_0",
   "xorg-libxau 1.0.9 h3557bc0_0",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "cffi 1.15.1 py310hf0c4615_3",
   "wheel 0.40.0 pyhd8ed1ab_0",
   "brotlipy 0.7.0 py310h761cc84_1005",
   "libmambapy 1.4.0 py310hbc2a718_0",
   "filelock 3.10.6 pyhd8ed1ab_0",
   "pip 23.0.1 pyhd8ed1ab_0",
   "expat 2.5.0 ha18d298_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "krb5 1.20.1 h113d92e_0",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "curl 7.88.1 h6ad7c7a_1",
   "lcms2 2.15 h3e0bdec_1",
   "openjpeg 2.5.0 h9508984_2",
   "beautifulsoup4 4.12.0 pyha770c72_0",
   "conda-pack 0.7.0 pyh6c4a22f_0",
   "rich 13.3.2 pyhd8ed1ab_0",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "lerc 4.0.0 h4de3ea5_0",
   "keyutils 1.6.1 h4e544f5_0",
   "libev 4.33 h516909a_1",
   "oniguruma 6.9.8 h4e544f5_0",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "click 8.1.3 unix_pyhd8ed1ab_2",
   "conda-forge-ci-setup 3.29.1 py310hf7ba518_100",
   "jq 1.6 hb9de7d4_1000"
  ],
  "summary": "Tensor Linear Algebra on NVIDIA GPUs",
  "tags": []
 },
 "conda_build_config": {
  "BUILD": "aarch64-conda_cos7-linux-gnu",
  "CI": "travis",
  "arm_variant_type": "sbsa",
  "c_compiler": "gcc",
  "c_compiler_version": "11",
  "cdt_arch": "aarch64",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "11",
  "docker_image": "quay.io/condaforge/linux-anvil-aarch64",
  "extend_keys": [
   "ignore_build_only_deps",
   "pin_run_as_build",
   "ignore_version",
   "extend_keys"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.21",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-aarch64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "bin/.cutensor-post-link.sh",
  "include/cutensor.h",
  "include/cutensor/types.h",
  "include/cutensorMg.h",
  "lib/libcutensor.so",
  "lib/libcutensor.so.1",
  "lib/libcutensor.so.1.7.0",
  "lib/libcutensorMg.so",
  "lib/libcutensorMg.so.1",
  "lib/libcutensorMg.so.1.7.0"
 ],
 "index": {
  "arch": "aarch64",
  "build": "ha21bd82_1",
  "build_number": 1,
  "constrains": [
   "arm-variant * sbsa",
   "__glibc >=2.17"
  ],
  "depends": [
   "cuda-version >=12.0.0,<13.0a0",
   "libcublas",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12"
  ],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "name": "cutensor",
  "platform": "linux",
  "subdir": "linux-aarch64",
  "timestamp": 1680746275458,
  "version": "1.7.0.1"
 },
 "metadata_version": 1,
 "name": "cutensor",
 "raw_recipe": "{% set version = \"1.7.0.1\" %}\n{% set cuda_major = \"12\" %}\n{% set platform = \"linux-x86_64\" %}  # [linux64]\n{% set platform = \"linux-ppc64le\" %}  # [ppc64le]\n{% set platform = \"linux-sbsa\" %}  # [aarch64]\n{% set platform = \"windows-x86_64\" %}  # [win]\n{% set extension = \"tar.xz\" %}  # [not win]\n{% set extension = \"zip\" %}  # [win]\n\npackage:\n  name: cutensor\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/cutensor/redist/libcutensor/{{ platform }}/libcutensor-{{ platform }}-{{ version }}-archive.{{ extension }}\n  sha256: dd3557891371a19e73e7c955efe5383b0bee954aba6a30e4892b0e7acb9deb26  # [linux64]\n  sha256: af4ad5e29dcb636f1bf941ed1fd7fc8053eeec4813fbc0b41581e114438e84c8  # [ppc64le]\n  sha256: c31f8e4386539434a5d1643ebfed74572011783b4e21b62be52003e3a9de3720  # [aarch64]\n  sha256: cdbb53bcc1c7b20ee0aa2dee781644a324d2d5e8065944039024fe22d6b822ab  # [win64]\n\nbuild:\n  number: 1\n  # this recipe only supports CUDA 12; the other CUDA versions are in the cuda-11 branch\n  skip: true  # [win32 or osx]\n  script:\n    - mkdir -p $PREFIX/include                                             # [linux]\n    - mv include/* $PREFIX/include/                                        # [linux]\n    - mkdir -p $PREFIX/lib                                                 # [linux]\n    - mv lib/{{ cuda_major }}/*.so* $PREFIX/lib/                           # [linux]\n    - patchelf --add-needed libcudart.so $PREFIX/lib/libcutensor.so        # [ppc64le]\n\n    - copy include\\\\cutensor.h %LIBRARY_INC%\\\\                             # [win64]\n    - copy include\\\\cutensorMg.h %LIBRARY_INC%\\\\                           # [win64]\n    - mkdir %LIBRARY_INC%\\\\cutensor                                        # [win64]\n    - copy include\\\\cutensor\\\\types.h %LIBRARY_INC%\\\\cutensor              # [win64]\n    - del lib\\\\{{ cuda_major }}\\\\*static*                                  # [win64]\n    - copy lib\\\\{{ cuda_major }}\\\\*.dll %LIBRARY_BIN%\\\\                    # [win64]\n    - copy lib\\\\{{ cuda_major }}\\\\*.lib %LIBRARY_LIB%\\\\                    # [win64]\n  run_exports:\n    - {{ pin_subpackage('cutensor') }}\n  missing_dso_whitelist:\n    - \"*/libcuda.so.*\"    # [linux]\n    - \"*/nvcuda.dll\"      # [win]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    - sysroot_{{ target_platform }} 2.17    # [linux]\n  host:\n    - patchelf >=0.12  # [linux]\n    - cuda-version {{ cuda_major }}.0\n    - libcublas\n  run:\n    - {{ pin_compatible(\"cuda-version\", max_pin=\"x\") }}\n    - libcublas\n  run_constrained:\n    # Only GLIBC_2.17 or older symbols present\n    - __glibc >=2.17      # [linux]\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\ntest:\n  requires:\n    - git\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - sysroot_{{ target_platform }} 2.17  # [linux]\n  files:\n    - test_load_elf.c        # [linux]\n\nabout:\n  home: https://developer.nvidia.com/cutensor\n  license: LicenseRef-cuTENSOR-Software-License-Agreement\n  license_url: https://docs.nvidia.com/cuda/cutensor/license.html\n  license_file: LICENSE\n  summary: Tensor Linear Algebra on NVIDIA GPUs\n  description: |\n    The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\n    algebra library providing tensor contraction, reduction and elementwise\n    operations. cuTENSOR is used to accelerate applications in the areas of\n    deep learning training and inference, computer vision, quantum chemistry\n    and computational physics.\n\n    License Agreements:- The packages are governed by the NVIDIA cuTENSOR\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuTENSOR EULA -\n    https://docs.nvidia.com/cuda/cutensor/license.html\n  doc_url: https://docs.nvidia.com/cuda/cutensor/index.html\n  dev_url: https://developer.nvidia.com/cutensor/downloads\n\nextra:\n  recipe-maintainers:\n    - JeremyWangNVDA\n    - leofang\n    - jakirkham\n    - mtjrider\n",
 "rendered_recipe": {
  "about": {
   "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
   "dev_url": "https://developer.nvidia.com/cutensor/downloads",
   "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
   "home": "https://developer.nvidia.com/cutensor",
   "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
   "license_file": "LICENSE",
   "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
   "summary": "Tensor Linear Algebra on NVIDIA GPUs"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.so.*"
   ],
   "number": "1",
   "run_exports": [
    "cutensor >=1.7.0.1,<2.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "mv include/* $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/12/*.so* $PREFIX/lib/"
   ],
   "string": "ha21bd82_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "JeremyWangNVDA",
    "jakirkham",
    "leofang",
    "mtjrider"
   ]
  },
  "package": {
   "name": "cutensor",
   "version": "1.7.0.1"
  },
  "requirements": {
   "build": [
    "_openmp_mutex 4.5 2_gnu",
    "arm-variant 1.0.0 sbsa",
    "binutils_impl_linux-aarch64 2.39 h48546ad_1",
    "binutils_linux-aarch64 2.39 h489c705_12",
    "gcc_impl_linux-aarch64 11.3.0 h771ed3b_19",
    "gcc_linux-aarch64 11.3.0 h2cafa97_12",
    "gxx_impl_linux-aarch64 11.3.0 h771ed3b_19",
    "gxx_linux-aarch64 11.3.0 h7ccc656_12",
    "kernel-headers_linux-aarch64 4.18.0 h5b4a56d_13",
    "ld_impl_linux-aarch64 2.39 h16cd69b_1",
    "libgcc-devel_linux-aarch64 11.3.0 h02014c4_19",
    "libgcc-ng 12.2.0 h607ecd0_19",
    "libgomp 12.2.0 h607ecd0_19",
    "libsanitizer 11.3.0 hdddb281_19",
    "libstdcxx-devel_linux-aarch64 11.3.0 h02014c4_19",
    "libstdcxx-ng 12.2.0 hc13a102_19",
    "sysroot_linux-aarch64 2.17 h43d7e78_13"
   ],
   "host": [
    "_openmp_mutex 4.5 2_gnu",
    "cuda-version 12.0.0 hd8ed1ab_0",
    "libcublas 12.0.1.189 ha21bd82_0",
    "libgcc-ng 12.2.0 h607ecd0_19",
    "libgomp 12.2.0 h607ecd0_19",
    "libstdcxx-ng 12.2.0 hc13a102_19",
    "patchelf 0.17.2 h884eca8_0"
   ],
   "run": [
    "cuda-version >=12.0.0,<13.0a0",
    "libcublas",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12"
   ],
   "run_constrained": [
    "__glibc >=2.17",
    "arm-variant * sbsa"
   ]
  },
  "source": {
   "sha256": "c31f8e4386539434a5d1643ebfed74572011783b4e21b62be52003e3a9de3720",
   "url": "https://developer.download.nvidia.com/compute/cutensor/redist/libcutensor/linux-sbsa/libcutensor-linux-sbsa-1.7.0.1-archive.tar.xz"
  },
  "test": {
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "gcc_linux-aarch64 11.*",
    "git",
    "gxx_linux-aarch64 11.*",
    "sysroot_linux-aarch64 2.17.*"
   ]
  }
 },
 "version": "1.7.0.1"
}