{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.24.0",
  "conda_version": "23.3.1",
  "description": "The nvCOMP library provides fast lossless data compression and\ndecompression using a GPU. It features generic compression interfaces to\nenable developers to use high-performance GPU compressors in their\napplications.\n\nLicense Agreements:- The packages are governed by the standard NVIDIA\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA nvCOMP EULA -\nhttps://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt\n",
  "dev_url": "https://developer.nvidia.com/nvcomp",
  "doc_url": "https://github.com/NVIDIA/nvcomp/blob/main/README.md",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley",
    "bdice",
    "jakirkham"
   ]
  },
  "home": "https://developer.nvidia.com/nvcomp",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-nvCOMP-Software-License-Agreement AND LicenseRef-NVIDIA-End-User-License-Agreement",
  "license_file": [
   "LICENSE",
   "cudart_LICENSE"
  ],
  "license_url": "https://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt",
  "root_pkgs": [
   "libtiff 4.5.0 ha587672_6",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "reproc-cpp 14.2.4 hcb278e6_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "libedit 3.1.20191231 he28a2e2_2",
   "python 3.10.11 he550d4f_0_cpython",
   "_openmp_mutex 4.5 2_gnu",
   "traitlets 5.9.0 pyhd8ed1ab_0",
   "libsqlite 3.42.0 h2797004_0",
   "patchelf 0.18.0 h59595ed_0",
   "zstandard 0.19.0 py310hdeb6495_1",
   "libiconv 1.17 h166bdaf_0",
   "anyio 3.7.0 pyhd8ed1ab_1",
   "pybind11-abi 4 hd8ed1ab_3",
   "lzo 2.10 h516909a_1000",
   "urllib3 1.26.15 pyhd8ed1ab_0",
   "pyyaml 6.0 py310h5764c6d_5",
   "openssl 3.1.1 hd590300_1",
   "markdown-it-py 2.2.0 pyhd8ed1ab_0",
   "platformdirs 3.5.3 pyhd8ed1ab_0",
   "nbformat 5.9.0 pyhd8ed1ab_0",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "ld_impl_linux-64 2.40 h41732ed_0",
   "packaging 23.1 pyhd8ed1ab_0",
   "pluggy 1.0.0 pyhd8ed1ab_5",
   "importlib-metadata 6.6.0 pyha770c72_0",
   "libmambapy 1.4.2 py310h1428755_0",
   "conda-build 3.24.0 py310hff52083_1",
   "libarchive 3.6.2 h039dbb9_1",
   "libcurl 8.1.2 h409715c_0",
   "ruamel.yaml.clib 0.2.7 py310h1fa729e_1",
   "python-fastjsonschema 2.17.1 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "conda-package-streaming 0.8.0 pyhd8ed1ab_0",
   "libbrotlicommon 1.0.9 h166bdaf_8",
   "backports 1.0 pyhd8ed1ab_3",
   "requests 2.31.0 pyhd8ed1ab_0",
   "mdurl 0.1.0 pyhd8ed1ab_0",
   "yaml-cpp 0.7.0 h27087fc_2",
   "pkginfo 1.9.6 pyhd8ed1ab_0",
   "pcre2 10.40 hc3806b6_0",
   "libuuid 2.38.1 h0b41bf4_0",
   "brotli-bin 1.0.9 h166bdaf_8",
   "attrs 23.1.0 pyh71513ae_1",
   "wcwidth 0.2.6 pyhd8ed1ab_0",
   "fmt 9.1.0 h924138e_0",
   "libgomp 13.1.0 he5830b7_0",
   "typing_extensions 4.6.3 pyha770c72_0",
   "ruamel_yaml 0.15.80 py310h5764c6d_1008",
   "libffi 3.4.2 h7f98852_5",
   "charset-normalizer 3.1.0 pyhd8ed1ab_0",
   "libstdcxx-ng 13.1.0 hfd8a6a1_0",
   "libnghttp2 1.52.0 h61bc06f_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "anaconda-project 0.11.1 pyhd8ed1ab_0",
   "pycosat 0.6.4 py310h5764c6d_1",
   "importlib_resources 5.12.0 pyhd8ed1ab_0",
   "xz 5.2.6 h166bdaf_0",
   "filelock 3.12.1 pyhd8ed1ab_0",
   "six 1.16.0 pyh6c4a22f_0",
   "rich 13.4.1 pyhd8ed1ab_0",
   "conda-pack 0.7.0 pyh6c4a22f_0",
   "libwebp-base 1.3.0 h0b41bf4_0",
   "pyrsistent 0.19.3 py310h1fa729e_0",
   "exceptiongroup 1.1.1 pyhd8ed1ab_0",
   "ncurses 6.4 hcb278e6_0",
   "clyent 1.2.2 py_1",
   "tzdata 2023c h71feb2d_0",
   "defusedxml 0.7.1 pyhd8ed1ab_0",
   "setuptools 67.7.2 pyhd8ed1ab_0",
   "libbrotlienc 1.0.9 h166bdaf_8",
   "beautifulsoup4 4.12.2 pyha770c72_0",
   "jsonschema 4.17.3 pyhd8ed1ab_0",
   "perl 5.32.1 2_h7f98852_perl5",
   "pillow 9.5.0 py310h582fbeb_1",
   "zipp 3.15.0 pyhd8ed1ab_0",
   "conda-package-handling 2.0.2 pyh38be061_0",
   "bzip2 1.0.8 h7f98852_4",
   "gettext 0.21.1 h27087fc_0",
   "libexpat 2.5.0 hcb278e6_1",
   "brotlipy 0.7.0 py310h5764c6d_1005",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "jupyter_core 5.3.0 py310hff52083_0",
   "mamba 1.4.2 py310h51d5547_0",
   "freetype 2.12.1 hca18f0e_1",
   "ruamel.yaml 0.17.31 py310h2372a71_0",
   "pytz 2023.3 pyhd8ed1ab_0",
   "yaml 0.2.5 h7f98852_2",
   "python-libarchive-c 4.0 py310hff52083_2",
   "krb5 1.20.1 h81ceb04_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "openjpeg 2.5.0 hfec8fc6_2",
   "python_abi 3.10 3_cp310",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "lz4-c 1.9.4 hcb278e6_0",
   "zstd 1.5.2 h3eb15da_6",
   "psutil 5.9.5 py310h1fa729e_0",
   "prompt-toolkit 3.0.38 pyha770c72_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "prompt_toolkit 3.0.38 hd8ed1ab_0",
   "py-lief 0.12.3 py310hd8f1fbe_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "_libgcc_mutex 0.1 conda_forge",
   "boltons 23.0.0 pyhd8ed1ab_0",
   "libxcb 1.15 h0b41bf4_0",
   "libbrotlidec 1.0.9 h166bdaf_8",
   "tomli 2.0.1 pyhd8ed1ab_0",
   "tk 8.6.12 h27826a3_0",
   "liblief 0.12.3 h27087fc_0",
   "idna 3.4 pyhd8ed1ab_0",
   "keyutils 1.6.1 h166bdaf_0",
   "libjpeg-turbo 2.1.5.1 h0b41bf4_0",
   "certifi 2023.5.7 pyhd8ed1ab_0",
   "libgcc-ng 13.1.0 he5830b7_0",
   "icu 72.1 hcb278e6_0",
   "xorg-libxau 1.0.11 hd590300_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "tornado 6.3.2 py310h2372a71_0",
   "glob2 0.7 py_0",
   "curl 8.1.2 h409715c_0",
   "brotli 1.0.9 h166bdaf_8",
   "lcms2 2.15 haa2dc70_1",
   "libev 4.33 h516909a_1",
   "pthread-stubs 0.4 h36c2ea0_1001",
   "libdeflate 1.18 h0b41bf4_0",
   "wheel 0.40.0 pyhd8ed1ab_0",
   "readline 8.2 h8228510_1",
   "libsolv 0.7.24 h3eb15da_0",
   "lerc 4.0.0 h27087fc_0",
   "libzlib 1.2.13 h166bdaf_4",
   "libssh2 1.11.0 h0841786_0",
   "ca-certificates 2023.5.7 hbcca054_0",
   "libmamba 1.4.2 hcea66bb_0",
   "xorg-libxdmcp 1.1.3 h7f98852_0",
   "git 2.41.0 pl5321h86e50cf_0",
   "typing-extensions 4.6.3 hd8ed1ab_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "chardet 5.1.0 py310hff52083_0",
   "markupsafe 2.1.3 py310h2372a71_0",
   "anaconda-client 1.11.3 pyhd8ed1ab_0",
   "patch 2.7.6 h7f98852_1002",
   "jsonpatch 1.32 pyhd8ed1ab_0",
   "pygments 2.15.1 pyhd8ed1ab_0",
   "libnsl 2.0.0 h7f98852_0",
   "su-exec 0.2 h166bdaf_1003",
   "pip 23.1.2 pyhd8ed1ab_0",
   "ripgrep 13.0.0 h2f28480_2",
   "libpng 1.6.39 h753d276_0",
   "reproc 14.2.4 h0b41bf4_0",
   "jsonpointer 2.0 py_0",
   "requests-toolbelt 1.0.0 pyhd8ed1ab_0",
   "pyopenssl 23.2.0 pyhd8ed1ab_1",
   "cryptography 41.0.1 py310h75e40e8_0",
   "conda 23.3.1 py310hff52083_0",
   "tini 0.19.0 h166bdaf_1",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "tqdm 4.65.0 pyhd8ed1ab_1",
   "c-ares 1.19.1 hd590300_0",
   "boa 0.14.0 pyhd8ed1ab_4",
   "cffi 1.15.1 py310h255011f_3",
   "libxml2 2.11.4 h0d562d8_0",
   "oniguruma 6.9.8 h166bdaf_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "conda-forge-ci-setup 3.31.0 py310hce54274_100",
   "conda-forge-metadata 0.5.0 pyhd8ed1ab_0",
   "conda-oci-mirror 0.1.0 pyhd8ed1ab_0",
   "click 8.1.3 unix_pyhd8ed1ab_2",
   "oras-py 0.1.14 pyhd8ed1ab_0",
   "jq 1.6 h36c2ea0_1000",
   "conda-env 2.6.0 1"
  ],
  "summary": "High Speed Data Compression Using NVIDIA GPUs",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "11.2",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-cuda:11.2",
  "extend_keys": [
   "ignore_build_only_deps",
   "extend_keys",
   "pin_run_as_build",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.21",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cuda_compiler",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "conda_pkg_format": "2",
 "files": [
  "include/gdeflate/gdeflate.h",
  "include/gdeflate/gdeflate_cpu.h",
  "include/native/bitcomp.h",
  "include/nvcomp.h",
  "include/nvcomp.hpp",
  "include/nvcomp/CRC32.h",
  "include/nvcomp/ans.h",
  "include/nvcomp/ans.hpp",
  "include/nvcomp/bitcomp.h",
  "include/nvcomp/bitcomp.hpp",
  "include/nvcomp/cascaded.h",
  "include/nvcomp/cascaded.hpp",
  "include/nvcomp/deflate.h",
  "include/nvcomp/gdeflate.h",
  "include/nvcomp/gdeflate.hpp",
  "include/nvcomp/gzip.h",
  "include/nvcomp/lz4.h",
  "include/nvcomp/lz4.hpp",
  "include/nvcomp/nvcompManager.hpp",
  "include/nvcomp/nvcompManagerFactory.hpp",
  "include/nvcomp/shared_types.h",
  "include/nvcomp/snappy.h",
  "include/nvcomp/snappy.hpp",
  "include/nvcomp/zstd.h",
  "lib/cmake/nvcomp/nvcomp-config-version.cmake",
  "lib/cmake/nvcomp/nvcomp-config.cmake",
  "lib/cmake/nvcomp/nvcomp-targets-release.cmake",
  "lib/cmake/nvcomp/nvcomp-targets.cmake",
  "lib/libnvcomp.so",
  "lib/libnvcomp_bitcomp.so",
  "lib/libnvcomp_gdeflate.so",
  "lib/libnvcomp_gdeflate_cpu.so"
 ],
 "index": {
  "arch": "x86_64",
  "build": "h0800d71_0",
  "build_number": 0,
  "depends": [
   "__glibc >=2.17,<3.0.a0",
   "cuda-version >=11,<12.0a0",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12"
  ],
  "license": "LicenseRef-nvCOMP-Software-License-Agreement AND LicenseRef-NVIDIA-End-User-License-Agreement",
  "name": "nvcomp",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1686637599472,
  "version": "2.6.1"
 },
 "metadata_version": 1,
 "name": "nvcomp",
 "raw_recipe": "{% set version = \"2.6.1\" %}\n{% set cuda_major = (cuda_compiler_version|default(\"12.0.0\")).split(\".\")[0] %}\n{% set platform = \"x86_64\" %}  # [linux64]\n{% set platform = \"SBSA\" %}  # [aarch64]\n{% set platform = \"windows\" %}  # [win]\n{% set extension = \"tgz\" %}  # [not win]\n{% set extension = \"zip\" %}  # [win]\n\npackage:\n  name: nvcomp\n  version: {{ version }}\n\nsource:\n  - url: https://developer.download.nvidia.com/compute/nvcomp/{{ version }}/local_installers/nvcomp_{{ version }}_{{ platform }}_{{ cuda_major }}.x.{{ extension }}\n    sha256: 62046476076d1b455fb13fb78b38d3496bacafbfdbb0494fb3392240a04466ea  # [linux64 and cuda_major == \"11\"]\n    sha256: a0792b666caaf593a9dd4130979578fd3a78230f4407645c295700ef8e7aaaf2  # [linux64 and cuda_major == \"12\"]\n    sha256: a019f2c8a300991d94d718a3524377d978efadaa62349858741f17ef859a9e55  # [aarch64 and cuda_major == \"11\"]\n    sha256: fc668519a8344e9d05335bad4bc5d23a504cdc7579aea41f12d6aa0f3079e709  # [aarch64 and cuda_major == \"12\"]\n    sha256: 4f0105a51ac6ea947154e252c8b220baf3345803f55644b5aad84e22ae4f8986  # [win and cuda_major == \"11\"]\n    sha256: e362e1fbf6b101ad71aa5314f21d00a4353b90efbe5cdedc5fcfb0f3b68cd791  # [win and cuda_major == \"12\"]\n  # Include cudart license because it is statically linked.\n  - url: https://developer.download.nvidia.com/compute/cuda/redist/cuda_cudart/LICENSE.txt\n    fn: cudart_LICENSE\n    sha256: 5db25d4fd138013b563f9a3d1d87f7de7df1dac014fd4cccdfbb3435a5cff761\n\nbuild:\n  number: 0\n  # TODO: Enable aarch64 builds\n  # TODO: Enable Windows with CUDA 12 when it is supported\n  skip: True  # [win32 or osx or aarch64 or ppc64le or cuda_compiler_version not in (\"11.2\", \"12.0\") or (win and cuda_major == \"12\")]\n  script:\n    - mkdir -pv $PREFIX/include              # [linux]\n    - mv -v include/* $PREFIX/include        # [linux]\n    - mkdir -pv $PREFIX/lib                  # [linux]\n    - mv -v lib/* $PREFIX/lib/               # [linux]\n    - mkdir %LIBRARY_INC%                                   # [win]\n    - copy %SRC_DIR%\\\\include\\\\* %LIBRARY_INC%\\\\            # [win]\n    - mkdir %LIBRARY_LIB%                                   # [win]\n    - copy %SRC_DIR%\\\\lib\\\\nvcomp*.lib %LIBRARY_LIB%\\\\      # [win]\n    - mkdir %LIBRARY_BIN%                                   # [win]\n    - copy %SRC_DIR%\\\\lib\\\\nvcomp*.dll %LIBRARY_BIN%\\\\      # [win]\n  ignore_run_exports_from:\n    - {{ compiler('cuda') }}\n  run_exports:\n    - {{ pin_subpackage(\"nvcomp\") }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n    - sysroot_{{ target_platform }} 2.17  # [linux]\n  host:\n    - cuda-version {{ cuda_major }}\n  run:\n    - {{ pin_compatible(\"cuda-version\", min_pin=\"x\", max_pin=\"x\") }}\n  run_constrained:\n    - arm-variant * {{ arm_variant_type }}  # [aarch64]\n\ntest:\n  requires:\n    - {{ compiler('c') }}  # [linux]\n  files:\n    - test_load_elf.c      # [linux]\n  commands:\n    - test -f $PREFIX/include/nvcomp.h                                 # [linux]\n    - test -f $PREFIX/include/nvcomp.hpp                               # [linux]\n    - test -f $PREFIX/lib/libnvcomp.so                                 # [linux]\n    - test -f $PREFIX/lib/libnvcomp_bitcomp.so                         # [linux]\n    - test -f $PREFIX/lib/libnvcomp_gdeflate.so                        # [linux]\n    - test -f $PREFIX/lib/libnvcomp_gdeflate_cpu.so                    # [linux]\n    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf    # [linux]\n    - for f in $PREFIX/lib/libnvcomp*.so; do ./test_load_elf $f; done  # [linux]\n    - if not exist %LIBRARY_INC%/nvcomp.h exit 1                       # [win]\n    - if not exist %LIBRARY_INC%/nvcomp.hpp exit 1                     # [win]\n    - if not exist %LIBRARY_LIB%/nvcomp.lib exit 1                     # [win]\n    - if not exist %LIBRARY_LIB%/nvcomp_bitcomp.lib exit 1             # [win]\n    - if not exist %LIBRARY_LIB%/nvcomp_gdeflate.lib exit 1            # [win]\n    - if not exist %LIBRARY_BIN%/nvcomp.dll exit 1                     # [win]\n    - if not exist %LIBRARY_BIN%/nvcomp_bitcomp.dll exit 1             # [win]\n    - if not exist %LIBRARY_BIN%/nvcomp_gdeflate.dll exit 1            # [win]\n\nabout:\n  home: https://developer.nvidia.com/nvcomp\n  license:\n    LicenseRef-nvCOMP-Software-License-Agreement AND LicenseRef-NVIDIA-End-User-License-Agreement\n  license_file:\n    - LICENSE\n    - cudart_LICENSE\n  license_url: https://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt\n  summary: \"High Speed Data Compression Using NVIDIA GPUs\"\n  description: |\n    The nvCOMP library provides fast lossless data compression and\n    decompression using a GPU. It features generic compression interfaces to\n    enable developers to use high-performance GPU compressors in their\n    applications.\n\n    License Agreements:- The packages are governed by the standard NVIDIA\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA nvCOMP EULA -\n    https://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt\n  doc_url: https://github.com/NVIDIA/nvcomp/blob/main/README.md\n  dev_url: https://developer.nvidia.com/nvcomp\n\nextra:\n  recipe-maintainers:\n    - adibbley\n    - bdice\n    - jakirkham\n",
 "rendered_recipe": {
  "about": {
   "description": "The nvCOMP library provides fast lossless data compression and\ndecompression using a GPU. It features generic compression interfaces to\nenable developers to use high-performance GPU compressors in their\napplications.\n\nLicense Agreements:- The packages are governed by the standard NVIDIA\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA nvCOMP EULA -\nhttps://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt\n",
   "dev_url": "https://developer.nvidia.com/nvcomp",
   "doc_url": "https://github.com/NVIDIA/nvcomp/blob/main/README.md",
   "home": "https://developer.nvidia.com/nvcomp",
   "license": "LicenseRef-nvCOMP-Software-License-Agreement AND LicenseRef-NVIDIA-End-User-License-Agreement",
   "license_file": [
    "LICENSE",
    "cudart_LICENSE"
   ],
   "license_url": "https://developer.download.nvidia.com/compute/nvcomp/2.3/LICENSE.txt",
   "summary": "High Speed Data Compression Using NVIDIA GPUs"
  },
  "build": {
   "ignore_run_exports_from": [
    "nvcc_linux-64 11.2.*"
   ],
   "number": "0",
   "run_exports": [
    "nvcomp >=2.6.1,<3.0a0"
   ],
   "script": [
    "mkdir -pv $PREFIX/include",
    "mv -v include/* $PREFIX/include",
    "mkdir -pv $PREFIX/lib",
    "mv -v lib/* $PREFIX/lib/"
   ],
   "string": "h0800d71_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "adibbley",
    "bdice",
    "jakirkham"
   ]
  },
  "package": {
   "name": "nvcomp",
   "version": "2.6.1"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "_sysroot_linux-64_curr_repodata_hack 3 h69a702a_13",
    "binutils_impl_linux-64 2.39 he00db2b_1",
    "binutils_linux-64 2.39 h5fc0e48_13",
    "gcc_impl_linux-64 10.4.0 h5231bdf_19",
    "gcc_linux-64 10.4.0 h9215b83_13",
    "gxx_impl_linux-64 10.4.0 h5231bdf_19",
    "gxx_linux-64 10.4.0 h6e491c6_13",
    "kernel-headers_linux-64 3.10.0 h4a8ded7_13",
    "ld_impl_linux-64 2.39 hcc3a1bd_1",
    "libgcc-devel_linux-64 10.4.0 hd38fd1e_19",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libgomp 13.1.0 he5830b7_0",
    "libsanitizer 10.4.0 h5246dfb_19",
    "libstdcxx-devel_linux-64 10.4.0 hd38fd1e_19",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0",
    "nvcc_linux-64 11.2 hdb70940_22",
    "sed 4.8 he412f7d_0",
    "sysroot_linux-64 2.17 h4a8ded7_13"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "cuda-version 11.8 h70ddcb2_2",
    "libgcc-ng 13.1.0 he5830b7_0",
    "libgomp 13.1.0 he5830b7_0",
    "libstdcxx-ng 13.1.0 hfd8a6a1_0"
   ],
   "run": [
    "__glibc >=2.17,<3.0.a0",
    "cuda-version >=11,<12.0a0",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12"
   ],
   "run_constrained": []
  },
  "source": [
   {
    "url": "https://developer.download.nvidia.com/compute/nvcomp/2.6.1/local_installers/nvcomp_2.6.1_x86_64_11.x.tgz"
   },
   {
    "fn": "cudart_LICENSE",
    "sha256": "5db25d4fd138013b563f9a3d1d87f7de7df1dac014fd4cccdfbb3435a5cff761",
    "url": "https://developer.download.nvidia.com/compute/cuda/redist/cuda_cudart/LICENSE.txt"
   }
  ],
  "test": {
   "commands": [
    "test -f $PREFIX/include/nvcomp.h",
    "test -f $PREFIX/include/nvcomp.hpp",
    "test -f $PREFIX/lib/libnvcomp.so",
    "test -f $PREFIX/lib/libnvcomp_bitcomp.so",
    "test -f $PREFIX/lib/libnvcomp_gdeflate.so",
    "test -f $PREFIX/lib/libnvcomp_gdeflate_cpu.so",
    "${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf",
    "for f in $PREFIX/lib/libnvcomp*.so; do ./test_load_elf $f; done"
   ],
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "gcc_linux-64 10.*"
   ]
  }
 },
 "version": "2.6.1"
}