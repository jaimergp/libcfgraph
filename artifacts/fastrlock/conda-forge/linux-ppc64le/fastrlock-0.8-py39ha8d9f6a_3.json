{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.22.0",
  "conda_private": false,
  "conda_version": "22.9.0",
  "description": "This is a C-level implementation of a fast, re-entrant,\noptimistic lock for CPython. It is a drop-in replacement for\nthreading.RLock. FastRLock is implemented in Cython and also provides a\nC-API for direct use from Cython code via from fastrlock cimport rlock.\n\nUnder normal conditions, it is about 10x faster than threading.RLock in\nPython 2.7 because it avoids all locking unless two or more threads try to\nacquire it at the same time. Under congestion, it is still about 10% faster\nthan RLock due to being implemented in Cython.\n\nThis is mostly equivalent to the revised RLock implementation in Python\n3.2, but still faster due to being implemented in Cython. Note that the\nthreading.RLock implementation in Python 3.4 and later tends to be as fast\nor even faster than the lock provided by this package, when called through\nthe Python API. FastRLock is still faster also on these systems when called\nthrough its Cython API.\n",
  "dev_url": "https://github.com/scoder/fastrlock",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "hmaarrfk"
   ]
  },
  "home": "https://github.com/scoder/fastrlock",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "LICENSE",
  "root_pkgs": [
   "yaml-cpp 0.7.0 hbbae597_2",
   "json5 0.9.5 pyh9f0ad1d_0",
   "libssh2 1.10.0 h3f0f7ff_3",
   "curl 7.86.0 h2ae36b4_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "importlib_resources 5.10.0 pyhd8ed1ab_0",
   "conda-build 3.22.0 py310h194a6c8_2",
   "su-exec 0.2 hb283c62_1003",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "anyio 3.6.2 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "lz4-c 1.9.3 h3b9df90_1",
   "psutil 5.9.3 py310h939259b_1",
   "libxml2 2.10.3 h3010393_0",
   "boa 0.12.0 pyha770c72_4",
   "ruamel_yaml 0.15.80 py310h939259b_1008",
   "reproc-cpp 14.2.3 h3b9df90_0",
   "keyutils 1.6.1 hb283c62_0",
   "six 1.16.0 pyh6c4a22f_0",
   "c-ares 1.18.1 h4e0d66e_0",
   "attrs 22.1.0 pyh71513ae_1",
   "cryptography 38.0.2 py310h18e7aa8_2",
   "zstd 1.5.2 h581a010_4",
   "perl 5.32.1 2_h4e0d66e_perl5",
   "commonmark 0.9.1 py_0",
   "colorama 0.4.6 pyhd8ed1ab_0",
   "reproc 14.2.3 h4e0d66e_0",
   "idna 3.4 pyhd8ed1ab_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "toml 0.10.2 pyhd8ed1ab_0",
   "_openmp_mutex 4.5 2_gnu",
   "tk 8.6.12 h41c6715_0",
   "urllib3 1.26.11 pyhd8ed1ab_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "icu 70.1 h3b4ca64_0",
   "python 3.10.6 h0cb8861_0_cpython",
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "jsonschema 4.16.0 pyhd8ed1ab_0",
   "charset-normalizer 2.1.1 pyhd8ed1ab_0",
   "libedit 3.1.20191231 h41a240f_2",
   "libarchive 3.5.2 h01158bd_3",
   "libuuid 2.32.1 h4e0d66e_1000",
   "pip 22.3 pyhd8ed1ab_0",
   "tzdata 2022e h191b570_0",
   "nbformat 5.7.0 pyhd8ed1ab_0",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "expat 2.5.0 hbbae597_0",
   "libffi 3.4.2 h4e0d66e_5",
   "_libgcc_mutex 0.1 conda_forge",
   "typing_extensions 4.4.0 pyha770c72_0",
   "markupsafe 2.1.1 py310h93ff066_2",
   "rich 12.6.0 pyhd8ed1ab_0",
   "libstdcxx-ng 12.2.0 h99369c6_19",
   "ripgrep 13.0.0 h0cb23b2_2",
   "jupyter_core 4.11.1 py310h194a6c8_1",
   "pycosat 0.6.4 py310h939259b_1",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "python-fastjsonschema 2.16.2 pyhd8ed1ab_0",
   "pyyaml 6.0 py310h939259b_5",
   "prompt_toolkit 3.0.31 hd8ed1ab_0",
   "ca-certificates 2022.9.24 h1084571_0",
   "readline 8.1.2 h6828edc_0",
   "chardet 5.0.0 py310hd032262_1",
   "py-lief 0.12.2 py310h76aa780_0",
   "bzip2 1.0.8 h4e0d66e_4",
   "prompt-toolkit 3.0.31 pyha770c72_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "xz 5.2.6 hb283c62_0",
   "tqdm 4.64.1 pyhd8ed1ab_0",
   "libgomp 12.2.0 hbc1322c_19",
   "libmambapy 0.27.0 py310hd1c5742_0",
   "gettext 0.21.1 hbbae597_0",
   "python-libarchive-c 4.0 py310h194a6c8_2",
   "pyrsistent 0.18.1 py310h93ff066_2",
   "mamba 0.27.0 py310h0d84b84_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "filelock 3.8.0 pyhd8ed1ab_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "krb5 1.19.3 h33c4487_0",
   "pytz 2022.5 pyhd8ed1ab_0",
   "patchelf 0.15.0 hea85c5d_0",
   "libmamba 0.27.0 hc29fd01_0",
   "libsqlite 3.39.4 hcc10993_0",
   "pysocks 1.7.1 pyha2e5f31_6",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "brotlipy 0.7.0 py310h939259b_1005",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "zipp 3.10.0 pyhd8ed1ab_0",
   "pygments 2.13.0 pyhd8ed1ab_0",
   "libgcc-ng 12.2.0 hbc1322c_19",
   "pyopenssl 22.1.0 pyhd8ed1ab_0",
   "git 2.38.1 pl5321hecdd0d8_0",
   "openssl 1.1.1q hb283c62_1",
   "cffi 1.15.1 py310h8b509f7_2",
   "ld_impl_linux-ppc64le 2.39 hb4302b2_0",
   "backports 1.0 py_2",
   "tini 0.19.0 hb283c62_1",
   "future 0.18.2 pyhd8ed1ab_6",
   "ruamel.yaml.clib 0.2.7 py310h939259b_0",
   "importlib-metadata 5.0.0 pyha770c72_1",
   "glob2 0.7 py_0",
   "libzlib 1.2.13 hb283c62_4",
   "patch 2.7.6 h4e0d66e_1002",
   "setuptools 65.5.0 pyhd8ed1ab_0",
   "libnghttp2 1.47.0 h0975512_1",
   "ruamel.yaml 0.17.21 py310h939259b_2",
   "certifi 2022.9.24 pyhd8ed1ab_0",
   "pcre2 10.37 h02375f6_1",
   "python_abi 3.10 2_cp310",
   "requests 2.28.1 pyhd8ed1ab_1",
   "libnsl 2.0.0 h4e0d66e_0",
   "clyent 1.2.2 py_1",
   "yaml 0.2.5 h4e0d66e_2",
   "liblief 0.12.2 hbbae597_0",
   "ncurses 6.3 hab78ccb_1",
   "libiconv 1.17 hb283c62_0",
   "lzo 2.10 h6eb9509_1000",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "libsolv 0.7.22 ha72a2fa_0",
   "libcurl 7.86.0 h2ae36b4_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "conda 22.9.0 py310h194a6c8_1",
   "libev 4.33 h6eb9509_1",
   "conda-package-handling 1.9.0 py310h939259b_1",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "traitlets 5.5.0 pyhd8ed1ab_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "jq 1.6 h339bb43_1000",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "conda-forge-ci-setup 3.21.0 py310he5b63f5_100",
   "click 8.1.3 unix_pyhd8ed1ab_2",
   "oniguruma 6.9.8 hb283c62_0"
  ],
  "summary": "This is a C-level implementation of a fast, re-entrant, optimistic lock for CPython",
  "tags": []
 },
 "conda_build_config": {
  "CI": "travis",
  "c_compiler": "gcc",
  "c_compiler_version": "10",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "ignore_build_only_deps",
   "pin_run_as_build",
   "extend_keys",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_73_pypy",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ]
 },
 "files": [
  "lib/python3.9/site-packages/fastrlock-0.8-py3.9.egg-info/PKG-INFO",
  "lib/python3.9/site-packages/fastrlock-0.8-py3.9.egg-info/not-zip-safe",
  "lib/python3.9/site-packages/fastrlock/__init__.pxd",
  "lib/python3.9/site-packages/fastrlock/__init__.py",
  "lib/python3.9/site-packages/fastrlock/_lock.pxi",
  "lib/python3.9/site-packages/fastrlock/rlock.pxd",
  "lib/python3.9/site-packages/fastrlock/rlock.pypy39-pp73-ppc_64-linux-gnu.so"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "py39ha8d9f6a_3",
  "build_number": 3,
  "depends": [
   "libgcc-ng >=12",
   "libstdcxx-ng >=12",
   "pypy3.9 >=7.3.9",
   "python >=3.9,<3.10.0a0",
   "python_abi 3.9 *_pypy39_pp73"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "fastrlock",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1667048107699,
  "version": "0.8"
 },
 "metadata_version": 1,
 "name": "fastrlock",
 "raw_recipe": "{% set name = \"fastrlock\" %}\n{% set version = \"0.8\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: 9cc100ed0924b32173d7de705a82fdf1257cdf60af1952a13f64759307b40931\n\nbuild:\n  number: 3\n  # We need to pass --with-cython to force cython to regenerate the .c file\n  script: {{ PYTHON }} -m pip install . --global-option=\"--with-cython\" -vv\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n  host:\n    - python\n    - pip\n    - cython\n  run:\n    - python\n\ntest:\n  imports:\n    - fastrlock\n\nabout:\n  home: https://github.com/scoder/fastrlock\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: This is a C-level implementation of a fast, re-entrant, optimistic lock for CPython\n  description: |\n    This is a C-level implementation of a fast, re-entrant,\n    optimistic lock for CPython. It is a drop-in replacement for\n    threading.RLock. FastRLock is implemented in Cython and also provides a\n    C-API for direct use from Cython code via from fastrlock cimport rlock.\n\n    Under normal conditions, it is about 10x faster than threading.RLock in\n    Python 2.7 because it avoids all locking unless two or more threads try to\n    acquire it at the same time. Under congestion, it is still about 10% faster\n    than RLock due to being implemented in Cython.\n\n    This is mostly equivalent to the revised RLock implementation in Python\n    3.2, but still faster due to being implemented in Cython. Note that the\n    threading.RLock implementation in Python 3.4 and later tends to be as fast\n    or even faster than the lock provided by this package, when called through\n    the Python API. FastRLock is still faster also on these systems when called\n    through its Cython API.\n  dev_url: https://github.com/scoder/fastrlock\n\nextra:\n  recipe-maintainers:\n    - hmaarrfk\n",
 "rendered_recipe": {
  "about": {
   "description": "This is a C-level implementation of a fast, re-entrant,\noptimistic lock for CPython. It is a drop-in replacement for\nthreading.RLock. FastRLock is implemented in Cython and also provides a\nC-API for direct use from Cython code via from fastrlock cimport rlock.\n\nUnder normal conditions, it is about 10x faster than threading.RLock in\nPython 2.7 because it avoids all locking unless two or more threads try to\nacquire it at the same time. Under congestion, it is still about 10% faster\nthan RLock due to being implemented in Cython.\n\nThis is mostly equivalent to the revised RLock implementation in Python\n3.2, but still faster due to being implemented in Cython. Note that the\nthreading.RLock implementation in Python 3.4 and later tends to be as fast\nor even faster than the lock provided by this package, when called through\nthe Python API. FastRLock is still faster also on these systems when called\nthrough its Cython API.\n",
   "dev_url": "https://github.com/scoder/fastrlock",
   "home": "https://github.com/scoder/fastrlock",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "This is a C-level implementation of a fast, re-entrant, optimistic lock for CPython"
  },
  "build": {
   "number": "3",
   "script": "/home/conda/feedstock_root/build_artifacts/fastrlock_1667047785686/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_p/bin/python -m pip install . --global-option=\"--with-cython\" -vv",
   "string": "py39ha8d9f6a_3"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "hmaarrfk"
   ]
  },
  "package": {
   "name": "fastrlock",
   "version": "0.8"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-ppc64le 2.39 h6c0ba3f_0",
    "binutils_linux-ppc64le 2.39 h5e55cfe_11",
    "gcc_impl_linux-ppc64le 10.4.0 hb2bed53_19",
    "gcc_linux-ppc64le 10.4.0 hc879d7e_11",
    "gxx_impl_linux-ppc64le 10.4.0 hb2bed53_19",
    "gxx_linux-ppc64le 10.4.0 h1410db0_11",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "ld_impl_linux-ppc64le 2.39 hb4302b2_0",
    "libgcc-devel_linux-ppc64le 10.4.0 ha78d8ae_19",
    "libgcc-ng 12.2.0 hbc1322c_19",
    "libgomp 12.2.0 hbc1322c_19",
    "libsanitizer 10.4.0 h8902bdb_19",
    "libstdcxx-devel_linux-ppc64le 10.4.0 ha78d8ae_19",
    "libstdcxx-ng 12.2.0 h99369c6_19",
    "sysroot_linux-ppc64le 2.17 h395ec9b_13"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "bzip2 1.0.8 h4e0d66e_4",
    "ca-certificates 2022.9.24 h1084571_0",
    "cython 0.29.32 py39ha8ada65_1",
    "expat 2.5.0 hbbae597_0",
    "gdbm 1.18 h6c246ac_2",
    "libffi 3.4.2 h4e0d66e_5",
    "libgcc-ng 12.2.0 hbc1322c_19",
    "libgomp 12.2.0 hbc1322c_19",
    "libsqlite 3.39.4 hcc10993_0",
    "libstdcxx-ng 12.2.0 h99369c6_19",
    "libzlib 1.2.13 hb283c62_4",
    "ncurses 6.3 hab78ccb_1",
    "openssl 3.0.5 hb283c62_2",
    "pip 22.3 pyhd8ed1ab_0",
    "pypy3.9 7.3.9 h9158500_5",
    "python 3.9.12 0_73_pypy",
    "python_abi 3.9 2_pypy39_pp73",
    "readline 8.1.2 h6828edc_0",
    "setuptools 65.5.0 pyhd8ed1ab_0",
    "sqlite 3.39.4 h3bd21b8_0",
    "tk 8.6.12 h41c6715_0",
    "wheel 0.37.1 pyhd8ed1ab_0",
    "xz 5.2.6 hb283c62_0",
    "zlib 1.2.13 hb283c62_4"
   ],
   "run": [
    "libgcc-ng >=12",
    "libstdcxx-ng >=12",
    "pypy3.9 >=7.3.9",
    "python >=3.9,<3.10.0a0",
    "python_abi 3.9 *_pypy39_pp73"
   ]
  },
  "source": {
   "sha256": "9cc100ed0924b32173d7de705a82fdf1257cdf60af1952a13f64759307b40931",
   "url": "https://pypi.io/packages/source/f/fastrlock/fastrlock-0.8.tar.gz"
  },
  "test": {
   "imports": [
    "fastrlock"
   ]
  }
 },
 "version": "0.8"
}