{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.8",
  "conda_private": false,
  "conda_version": "4.12.0",
  "description": "The NVIDIA Collective Communications Library (NCCL) implements multi-GPU\nand multi-node collective communication primitives that are performance\noptimized for NVIDIA GPUs. NCCL provides routines such as all-gather,\nall-reduce, broadcast, reduce, reduce-scatter, that are optimized to\nachieve high bandwidth over PCIe and NVLink high-speed interconnect.\n",
  "dev_url": "https://github.com/NVIDIA/nccl",
  "doc_url": "https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jakirkham",
    "leofang"
   ]
  },
  "home": "https://developer.nvidia.com/nccl",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE.txt",
  "root_pkgs": [
   "conda-build 3.21.8 py39h0b1cf3c_0",
   "cryptography 36.0.2 py39hd4ec19a_1",
   "python-fastjsonschema 2.15.3 pyhd8ed1ab_0",
   "tini 0.19.0 h4e0d66e_0",
   "nbformat 5.3.0 pyhd8ed1ab_0",
   "ca-certificates 2021.10.8 h1084571_0",
   "libnghttp2 1.47.0 h262a72d_0",
   "libxml2 2.9.12 hc8bd4e3_2",
   "brotlipy 0.7.0 py39h98ec90c_1004",
   "libev 4.33 h6eb9509_1",
   "importlib_resources 5.6.0 pyhd8ed1ab_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "soupsieve 2.3.1 pyhd8ed1ab_0",
   "anyio 3.5.0 py39hc1b9086_0",
   "c-ares 1.18.1 h4e0d66e_0",
   "pyopenssl 22.0.0 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "_openmp_mutex 4.5 1_gnu",
   "idna 3.3 pyhd8ed1ab_0",
   "ncurses 6.3 h3b9df90_0",
   "six 1.16.0 pyh6c4a22f_0",
   "conda 4.12.0 py39h0b1cf3c_0",
   "jupyter_core 4.9.2 py39h0b1cf3c_0",
   "pcre2 10.37 h32277c3_0",
   "yaml-cpp 0.6.3 hb209c28_4",
   "pycosat 0.6.3 py39ha810350_1009",
   "typing_extensions 4.1.1 pyha770c72_0",
   "liblief 0.11.5 h3b9df90_1",
   "libiconv 1.16 h6eb9509_0",
   "zstd 1.5.1 h65c4b1a_0",
   "libzlib 1.2.11 hb283c62_1014",
   "importlib-metadata 4.11.3 py39hc1b9086_1",
   "libcurl 7.82.0 h2ae36b4_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "rich 12.2.0 pyhd8ed1ab_0",
   "sniffio 1.2.0 py39h0b1cf3c_3",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "libffi 3.4.2 h4e0d66e_5",
   "_libgcc_mutex 0.1 conda_forge",
   "prompt_toolkit 3.0.29 hd8ed1ab_0",
   "git 2.35.1 pl5321h131946c_0",
   "filelock 3.6.0 pyhd8ed1ab_0",
   "openssl 1.1.1n hb283c62_0",
   "setuptools 59.8.0 py39h0b1cf3c_1",
   "python-libarchive-c 4.0 py39h0b1cf3c_0",
   "keyutils 1.6.1 hb283c62_0",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "libmamba 0.22.1 h9b76632_1",
   "reproc-cpp 14.2.3 h3b9df90_0",
   "pytz 2022.1 pyhd8ed1ab_0",
   "lzo 2.10 h6eb9509_1000",
   "pyrsistent 0.18.1 py39h9ca6cee_1",
   "mamba 0.22.1 py39h3651b5a_1",
   "requests 2.27.1 pyhd8ed1ab_0",
   "expat 2.4.8 hbbae597_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "charset-normalizer 2.0.12 pyhd8ed1ab_0",
   "libnsl 2.0.0 h4e0d66e_0",
   "py-lief 0.11.5 py39h4c72827_1",
   "ruamel.yaml.clib 0.2.6 py39h98ec90c_1",
   "tk 8.6.12 h41c6715_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "markupsafe 2.1.1 py39h9ca6cee_1",
   "patchelf 0.14.5 hea85c5d_0",
   "prompt-toolkit 3.0.29 pyha770c72_0",
   "perl 5.32.1 2_h4e0d66e_perl5",
   "libssh2 1.10.0 ha5a9321_2",
   "tqdm 4.64.0 pyhd8ed1ab_0",
   "zipp 3.8.0 pyhd8ed1ab_0",
   "clyent 1.2.2 py_1",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "lz4-c 1.9.3 h3b9df90_1",
   "zlib 1.2.11 hb283c62_1014",
   "traitlets 5.1.1 pyhd8ed1ab_0",
   "pygments 2.11.2 pyhd8ed1ab_0",
   "boa 0.10.0 pyha770c72_0",
   "certifi 2021.10.8 py39h0b1cf3c_2",
   "libstdcxx-ng 11.2.0 habdf983_14",
   "json5 0.9.5 pyh9f0ad1d_0",
   "patch 2.7.6 h4e0d66e_1002",
   "pysocks 1.7.1 py39hc1b9086_5",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "ruamel.yaml 0.17.21 py39h98ec90c_1",
   "icu 70.1 h3b4ca64_0",
   "libuuid 2.32.1 h4e0d66e_1000",
   "libgcc-ng 11.2.0 h7698a5e_14",
   "xz 5.2.5 h6eb9509_1",
   "sqlite 3.37.1 h3bd21b8_0",
   "bzip2 1.0.8 h4e0d66e_4",
   "curl 7.82.0 h2ae36b4_0",
   "pyyaml 6.0 py39h98ec90c_4",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "reproc 14.2.3 h4e0d66e_0",
   "libsolv 0.7.19 h690f14c_5",
   "pkginfo 1.8.2 pyhd8ed1ab_0",
   "jinja2 3.1.1 pyhd8ed1ab_0",
   "psutil 5.9.0 py39h98ec90c_1",
   "python_abi 3.9 2_cp39",
   "ruamel_yaml 0.15.80 py39ha810350_1006",
   "pip 22.0.4 pyhd8ed1ab_0",
   "python 3.9.12 h08a33c2_1_cpython",
   "yaml 0.2.5 h4e0d66e_2",
   "readline 8.1 h5c45dff_0",
   "conda-package-handling 1.8.1 py39h9ca6cee_0",
   "su-exec 0.2 h6eb9509_1002",
   "chardet 4.0.0 py39hc1b9086_3",
   "libmambapy 0.22.1 py39h12c9af7_1",
   "future 0.18.2 py39hc1b9086_5",
   "ripgrep 13.0.0 h0cb23b2_2",
   "libarchive 3.5.2 h3281d6a_1",
   "jsonschema 4.4.0 pyhd8ed1ab_0",
   "dataclasses 0.8 pyhc8e2a94_3",
   "commonmark 0.9.1 py_0",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "libedit 3.1.20191231 h41a240f_2",
   "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
   "urllib3 1.26.9 pyhd8ed1ab_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "backports 1.0 py_2",
   "tzdata 2022a h191b570_0",
   "gettext 0.19.8.1 h6603d1e_1008",
   "krb5 1.19.3 h33c4487_0",
   "attrs 21.4.0 pyhd8ed1ab_0",
   "libgomp 11.2.0 h7698a5e_14",
   "cffi 1.15.0 py39h7bf629d_0",
   "click 8.1.2 py39h0b1cf3c_0",
   "conda-forge-ci-setup 3.20.0 py39ha7e1dda_100",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "jq 1.6 h339bb43_1000",
   "oniguruma 6.9.7.1 h4e0d66e_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "Optimized primitives for collective multi-GPU communication",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "8",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "10.2",
  "cudnn": "8",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "8",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le-cuda:10.2",
  "extend_keys": [
   "pin_run_as_build",
   "ignore_build_only_deps",
   "ignore_version",
   "extend_keys"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "9",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "files": [
  "include/nccl.h",
  "include/nccl_net.h",
  "lib/libnccl.so",
  "lib/libnccl.so.2",
  "lib/libnccl.so.2.12.10",
  "lib/pkgconfig/nccl.pc"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "hb9101e2_0",
  "build_number": 0,
  "depends": [
   "__glibc >=2.17",
   "cudatoolkit 10.2|10.2.*",
   "libgcc-ng >=8.5.0",
   "libstdcxx-ng >=8.5.0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "nccl",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1649500292021,
  "version": "2.12.10.1"
 },
 "metadata_version": 1,
 "name": "nccl",
 "raw_recipe": "{% set name = \"nccl\" %}\n{% set version = \"2.12.10-1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version|replace(\"-\", \".\") }}\n\nsource:\n  url: https://github.com/NVIDIA/nccl/archive/v{{ version }}.tar.gz\n  sha256: 7f53ed9f1af25bf5290e774d4fbe7a8fc71bcad34ab943602d36e4d0a8d30d16\n\nbuild:\n  number: 0\n  skip: true  # [(not linux) or cuda_compiler_version in (undefined, \"None\")]\n  run_exports:\n    # xref: https://github.com/NVIDIA/nccl/issues/218\n    - {{ pin_subpackage(name, max_pin=\"x\") }}\n  script_env:\n    # for some reason /usr/local/cuda is not added to $PATH in ppc64le's docker image\n    - CUDA_HOME  # [ppc64le or aarch64]\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n    - {{ compiler(\"cxx\") }}\n    - {{ compiler(\"cuda\") }}\n    - make\n\ntest:\n  commands:\n    - test -f \"${PREFIX}/include/nccl.h\"\n    - test -f \"${PREFIX}/lib/libnccl.so\"\n    - test ! -f \"${PREFIX}/lib/libnccl_static.a\"\n\nabout:\n  home: https://developer.nvidia.com/nccl\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: Optimized primitives for collective multi-GPU communication\n\n  description: |\n    The NVIDIA Collective Communications Library (NCCL) implements multi-GPU\n    and multi-node collective communication primitives that are performance\n    optimized for NVIDIA GPUs. NCCL provides routines such as all-gather,\n    all-reduce, broadcast, reduce, reduce-scatter, that are optimized to\n    achieve high bandwidth over PCIe and NVLink high-speed interconnect.\n\n  doc_url: https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/index.html\n  dev_url: https://github.com/NVIDIA/nccl\n\nextra:\n  recipe-maintainers:\n    - jakirkham\n    - leofang\n",
 "rendered_recipe": {
  "about": {
   "description": "The NVIDIA Collective Communications Library (NCCL) implements multi-GPU\nand multi-node collective communication primitives that are performance\noptimized for NVIDIA GPUs. NCCL provides routines such as all-gather,\nall-reduce, broadcast, reduce, reduce-scatter, that are optimized to\nachieve high bandwidth over PCIe and NVLink high-speed interconnect.\n",
   "dev_url": "https://github.com/NVIDIA/nccl",
   "doc_url": "https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/index.html",
   "home": "https://developer.nvidia.com/nccl",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE.txt",
   "summary": "Optimized primitives for collective multi-GPU communication"
  },
  "build": {
   "number": "0",
   "run_exports": [
    "nccl >=2.12.10.1,<3.0a0"
   ],
   "script_env": [
    "CUDA_HOME"
   ],
   "string": "hb9101e2_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jakirkham",
    "leofang"
   ]
  },
  "package": {
   "name": "nccl",
   "version": "2.12.10.1"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "binutils_impl_linux-ppc64le 2.36.1 h5836da8_2",
    "binutils_linux-ppc64le 2.36 he035471_9",
    "gcc_impl_linux-ppc64le 8.5.0 h5ef3a6d_15",
    "gcc_linux-ppc64le 8.5.0 h4467a4d_9",
    "gxx_impl_linux-ppc64le 8.5.0 h5ef3a6d_15",
    "gxx_linux-ppc64le 8.5.0 habf09f1_9",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_13",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libgcc-devel_linux-ppc64le 8.5.0 h1c8b4c6_15",
    "libgcc-ng 11.2.0 h7698a5e_15",
    "libgomp 11.2.0 h7698a5e_15",
    "libsanitizer 8.5.0 ha8825d8_15",
    "libstdcxx-devel_linux-ppc64le 8.5.0 h1c8b4c6_15",
    "libstdcxx-ng 11.2.0 habdf983_15",
    "make 4.3 hf817498_1",
    "nvcc_linux-ppc64le 10.2 hb3d3a0a_16",
    "sed 4.8 ha07698b_0",
    "sysroot_linux-ppc64le 2.17 h395ec9b_13"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "cudatoolkit 10.2.89 h455192d_10",
    "libgcc-ng 11.2.0 h7698a5e_15",
    "libgomp 11.2.0 h7698a5e_15",
    "libstdcxx-ng 11.2.0 habdf983_15"
   ],
   "run": [
    "__glibc >=2.17",
    "cudatoolkit 10.2|10.2.*",
    "libgcc-ng >=8.5.0",
    "libstdcxx-ng >=8.5.0"
   ]
  },
  "source": {
   "sha256": "7f53ed9f1af25bf5290e774d4fbe7a8fc71bcad34ab943602d36e4d0a8d30d16",
   "url": "https://github.com/NVIDIA/nccl/archive/v2.12.10-1.tar.gz"
  },
  "test": {
   "commands": [
    "test -f \"${PREFIX}/include/nccl.h\"",
    "test -f \"${PREFIX}/lib/libnccl.so\"",
    "test ! -f \"${PREFIX}/lib/libnccl_static.a\""
   ]
  }
 },
 "version": "2.12.10.1"
}