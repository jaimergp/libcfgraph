{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.22.0",
  "conda_private": false,
  "conda_version": "22.9.0",
  "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, \u2026), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option \u2014 except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
  "dev_url": "https://github.com/foonathan/cppast",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "saraedum"
   ]
  },
  "home": "https://github.com/foonathan/cppast",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "LICENSE.md",
  "root_pkgs": [
   "lzo 2.10 h516909a_1000",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "libsqlite 3.39.4 h753d276_0",
   "toolz 0.12.0 pyhd8ed1ab_0",
   "tk 8.6.12 h27826a3_0",
   "ripgrep 13.0.0 h2f28480_2",
   "libuuid 2.32.1 h7f98852_1000",
   "future 0.18.2 py310hff52083_5",
   "toml 0.10.2 pyhd8ed1ab_0",
   "reproc-cpp 14.2.3 h9c3ff4c_0",
   "nbformat 5.6.1 pyhd8ed1ab_0",
   "c-ares 1.18.1 h7f98852_0",
   "pyopenssl 22.0.0 pyhd8ed1ab_1",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "glob2 0.7 py_0",
   "conda-build 3.22.0 py310hff52083_2",
   "dataclasses 0.8 pyhc8e2a94_3",
   "anyio 3.6.1 pyhd8ed1ab_1",
   "_libgcc_mutex 0.1 conda_forge",
   "ca-certificates 2022.9.24 ha878542_0",
   "setuptools 65.4.1 pyhd8ed1ab_0",
   "tini 0.19.0 h7f98852_0",
   "yaml-cpp 0.7.0 h27087fc_2",
   "cryptography 38.0.1 py310h597c629_0",
   "requests 2.28.1 pyhd8ed1ab_1",
   "idna 3.4 pyhd8ed1ab_0",
   "sniffio 1.3.0 pyhd8ed1ab_0",
   "python-libarchive-c 4.0 py310hff52083_1",
   "cffi 1.15.1 py310h255011f_0",
   "libedit 3.1.20191231 he28a2e2_2",
   "conda-package-handling 1.9.0 py310h5764c6d_0",
   "filelock 3.8.0 pyhd8ed1ab_0",
   "ruamel.yaml.clib 0.2.6 py310h5764c6d_1",
   "libsolv 0.7.22 h6239696_0",
   "pytz 2022.4 pyhd8ed1ab_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "liblief 0.12.2 h27087fc_0",
   "python 3.10.6 h582c2e5_0_cpython",
   "rich 12.6.0 pyhd8ed1ab_0",
   "gettext 0.19.8.1 h27087fc_1009",
   "jinja2 3.1.2 pyhd8ed1ab_1",
   "libcurl 7.85.0 h7bff187_0",
   "pkginfo 1.8.3 pyhd8ed1ab_0",
   "patchelf 0.15.0 h58526e2_0",
   "pybind11-abi 4 hd8ed1ab_3",
   "brotlipy 0.7.0 py310h5764c6d_1004",
   "zipp 3.8.1 pyhd8ed1ab_0",
   "pyrsistent 0.18.1 py310h5764c6d_1",
   "pyyaml 6.0 py310h5764c6d_4",
   "libev 4.33 h516909a_1",
   "ruamel_yaml 0.15.80 py310h5764c6d_1007",
   "commonmark 0.9.1 py_0",
   "py-lief 0.12.2 py310hd8f1fbe_0",
   "clyent 1.2.2 py_1",
   "attrs 22.1.0 pyh71513ae_1",
   "krb5 1.19.3 h3790be6_0",
   "su-exec 0.2 h516909a_1002",
   "beautifulsoup4 4.11.1 pyha770c72_0",
   "libiconv 1.17 h166bdaf_0",
   "prompt_toolkit 3.0.31 hd8ed1ab_0",
   "curl 7.85.0 h7bff187_0",
   "lz4-c 1.9.3 h9c3ff4c_1",
   "libnsl 2.0.0 h7f98852_0",
   "libgomp 12.1.0 h8d9b700_16",
   "pygments 2.13.0 pyhd8ed1ab_0",
   "ncurses 6.3 h27087fc_1",
   "ld_impl_linux-64 2.36.1 hea4e1c9_2",
   "reproc 14.2.3 h7f98852_0",
   "markupsafe 2.1.1 py310h5764c6d_1",
   "pip 22.2.2 pyhd8ed1ab_0",
   "traitlets 5.4.0 pyhd8ed1ab_0",
   "bzip2 1.0.8 h7f98852_4",
   "pcre2 10.37 hc3806b6_1",
   "readline 8.1.2 h0f457ee_0",
   "icu 70.1 h27087fc_0",
   "libffi 3.4.2 h7f98852_5",
   "pysocks 1.7.1 pyha2e5f31_6",
   "backports 1.0 py_2",
   "libzlib 1.2.12 h166bdaf_4",
   "libssh2 1.10.0 haa6b8db_3",
   "libarchive 3.5.2 hb890918_3",
   "importlib_resources 5.9.0 pyhd8ed1ab_0",
   "git 2.38.0 pl5321h5fbbf19_0",
   "tqdm 4.64.1 pyhd8ed1ab_0",
   "libgcc-ng 12.1.0 h8d9b700_16",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "libxml2 2.9.14 h22db469_4",
   "joblib 1.2.0 pyhd8ed1ab_0",
   "zstd 1.5.2 h6239696_4",
   "keyutils 1.6.1 h166bdaf_0",
   "_openmp_mutex 4.5 2_gnu",
   "jupyter_core 4.11.1 py310hff52083_0",
   "libnghttp2 1.47.0 hdcd2b5c_1",
   "json5 0.9.5 pyh9f0ad1d_0",
   "colorama 0.4.5 pyhd8ed1ab_0",
   "pycosat 0.6.3 py310h5764c6d_1010",
   "psutil 5.9.2 py310h5764c6d_0",
   "yaml 0.2.5 h7f98852_2",
   "typing_extensions 4.3.0 pyha770c72_0",
   "python-fastjsonschema 2.16.2 pyhd8ed1ab_0",
   "jsonschema 4.16.0 pyhd8ed1ab_0",
   "openssl 1.1.1q h166bdaf_0",
   "xz 5.2.6 h166bdaf_0",
   "wheel 0.37.1 pyhd8ed1ab_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "soupsieve 2.3.2.post1 pyhd8ed1ab_0",
   "patch 2.7.6 h7f98852_1002",
   "six 1.16.0 pyh6c4a22f_0",
   "pkgutil-resolve-name 1.3.10 pyhd8ed1ab_0",
   "importlib-metadata 4.11.4 py310hff52083_0",
   "conda 22.9.0 py310hff52083_1",
   "ruamel.yaml 0.17.21 py310h5764c6d_1",
   "libstdcxx-ng 12.1.0 ha89aaad_16",
   "expat 2.4.9 h27087fc_0",
   "urllib3 1.26.11 pyhd8ed1ab_0",
   "prompt-toolkit 3.0.31 pyha770c72_0",
   "charset-normalizer 2.1.1 pyhd8ed1ab_0",
   "chardet 5.0.0 py310hff52083_0",
   "python_abi 3.10 2_cp310",
   "perl 5.32.1 2_h7f98852_perl5",
   "tzdata 2022d h191b570_0",
   "watchgod 0.8.2 pyhd8ed1ab_0",
   "certifi 2022.9.24 pyhd8ed1ab_0",
   "libmamba 0.27.0 h0dd8ff0_0",
   "boa 0.12.0 pyha770c72_4",
   "mamba 0.27.0 py310hf87f941_0",
   "oniguruma 6.9.8 h166bdaf_0",
   "libmambapy 0.27.0 py310hab0e683_0",
   "click 8.1.3 py310hff52083_0",
   "conda-forge-ci-setup 3.21.0 py310hce54274_100",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "jq 1.6 h36c2ea0_1000",
   "conda-env 2.6.0 1"
  ],
  "summary": "Library interface to the C++ AST",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "cdt_name": "cos6",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "10",
  "docker_image": "quay.io/condaforge/linux-anvil-cos7-x86_64",
  "extend_keys": [
   "ignore_version",
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.10",
  "r_base": "3.5",
  "target_platform": "linux-64"
 },
 "files": [
  "bin/cppast",
  "include/cppast/code_generator.hpp",
  "include/cppast/compile_config.hpp",
  "include/cppast/cpp_alias_template.hpp",
  "include/cppast/cpp_array_type.hpp",
  "include/cppast/cpp_attribute.hpp",
  "include/cppast/cpp_class.hpp",
  "include/cppast/cpp_class_template.hpp",
  "include/cppast/cpp_decltype_type.hpp",
  "include/cppast/cpp_entity.hpp",
  "include/cppast/cpp_entity_container.hpp",
  "include/cppast/cpp_entity_index.hpp",
  "include/cppast/cpp_entity_kind.hpp",
  "include/cppast/cpp_entity_ref.hpp",
  "include/cppast/cpp_enum.hpp",
  "include/cppast/cpp_expression.hpp",
  "include/cppast/cpp_file.hpp",
  "include/cppast/cpp_forward_declarable.hpp",
  "include/cppast/cpp_friend.hpp",
  "include/cppast/cpp_function.hpp",
  "include/cppast/cpp_function_template.hpp",
  "include/cppast/cpp_function_type.hpp",
  "include/cppast/cpp_language_linkage.hpp",
  "include/cppast/cpp_member_function.hpp",
  "include/cppast/cpp_member_variable.hpp",
  "include/cppast/cpp_namespace.hpp",
  "include/cppast/cpp_preprocessor.hpp",
  "include/cppast/cpp_static_assert.hpp",
  "include/cppast/cpp_storage_class_specifiers.hpp",
  "include/cppast/cpp_template.hpp",
  "include/cppast/cpp_template_parameter.hpp",
  "include/cppast/cpp_token.hpp",
  "include/cppast/cpp_type.hpp",
  "include/cppast/cpp_type_alias.hpp",
  "include/cppast/cpp_variable.hpp",
  "include/cppast/cpp_variable_base.hpp",
  "include/cppast/cpp_variable_template.hpp",
  "include/cppast/cppast_fwd.hpp",
  "include/cppast/detail/assert.hpp",
  "include/cppast/detail/intrusive_list.hpp",
  "include/cppast/diagnostic.hpp",
  "include/cppast/diagnostic_logger.hpp",
  "include/cppast/libclang_parser.hpp",
  "include/cppast/parser.hpp",
  "include/cppast/visitor.hpp",
  "lib/libcppast.so"
 ],
 "index": {
  "arch": "x86_64",
  "build": "h924138e_0",
  "build_number": 0,
  "depends": [
   "clangxx >=4.0.0",
   "libclang13 >=15.0.1",
   "libgcc-ng >=12",
   "libstdcxx-ng >=12",
   "tiny-process-library >=2.0.4,<2.1.0a0"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "cppast",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1665073733073,
  "version": "0.1.0"
 },
 "metadata_version": 1,
 "name": "cppast",
 "raw_recipe": "{% set name = \"cppast\" %}\n{% set version = \"0.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/foonathan/cppast/archive/refs/tags/v{{ version }}.zip\n  sha256: 06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721\n  patches:\n    - 0001-do-not-vendor-external-dependencies.patch\n    # Upstreamed at https://github.com/foonathan/cppast/pull/145\n    - 0002-install-library-binary.patch\n    - 0003-simplify-cmake.patch\n\nbuild:\n  number: 0\n  skip: true  # [win and vc<14]\n  run_exports:\n    # cppast does not to be too careful about not breaking their ABI so we pin strictly when building against it.\n    - {{ pin_subpackage('cppast', max_pin='x.x.x') }}\n  ignore_run_exports_from:  # [win]\n    # We do not link against zlib so we do not need it at runtime.\n    - zlib  # [win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [not win]\n    - ninja  # [win]\n  host:\n    - type_safe\n    - tiny-process-library\n    - cxxopts\n    # clangdev provides clang header files we build against\n    - clangdev\n    - libclang\n    # llvmdev provides LLVMConfig.cmake needed by the build system\n    - llvmdev\n    # The cmake setup of LLVM on Windows needs the zlib headers\n    - zlib  # [win]\n  run:\n    - clangxx >=4.0.0\n\ntest:\n  requires:\n    # To parse sample.h we need the type_traits headers shipped with the C++\n    # compiler on Linux & macOS.\n    # We do not use compiler('cxx') here since on macOS, that is a clang that\n    # might not be compatible with the libclang installed.\n    - cxx-compiler\n  files:\n    - sample.h\n  commands:\n    - if not exist %LIBRARY_INC%\\cppast\\cppast_fwd.hpp exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\cppast.lib exit 1             # [win]\n    - if not exist %LIBRARY_BIN%\\cppast.dll exit 1             # [win]\n    - test -f $PREFIX/include/cppast/cppast_fwd.hpp            # [unix]\n    - test -f $PREFIX/lib/libcppast.so                         # [linux]\n    - test -f $PREFIX/lib/libcppast.dylib                      # [osx]\n    - cppast sample.h                                          # [unix]\n    # When parsing Microsoft's C++ headers, we need to disable some #line\n    # macros that clang gets confused by:\n    # https://github.com/foonathan/cppast/issues/46\n    - cppast --msvc_compatibility sample.h                     # [win]\n\nabout:\n  home: https://github.com/foonathan/cppast\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE.md\n  summary: 'Library interface to the C++ AST'\n  description: |\n    If you're writing a tool that needs access to the C++ AST (i.e.\n    documentation generator, reflection library, \u2026), your only option apart\n    from writing your own parser is to use clang. It offers three interfaces\n    for tools, but the only one that really works for standalone applications\n    is libclang. However, libclang has various limitations and does not expose\n    the entire AST.\n    So there is no feasible option \u2014 except for this library. It was originally\n    a part of the standardese documentation generator, but has been extracted\n    into an independent library.\n  dev_url: https://github.com/foonathan/cppast\n\nextra:\n  recipe-maintainers:\n    - saraedum\n",
 "rendered_recipe": {
  "about": {
   "description": "If you're writing a tool that needs access to the C++ AST (i.e.\ndocumentation generator, reflection library, \u2026), your only option apart\nfrom writing your own parser is to use clang. It offers three interfaces\nfor tools, but the only one that really works for standalone applications\nis libclang. However, libclang has various limitations and does not expose\nthe entire AST.\nSo there is no feasible option \u2014 except for this library. It was originally\na part of the standardese documentation generator, but has been extracted\ninto an independent library.\n",
   "dev_url": "https://github.com/foonathan/cppast",
   "home": "https://github.com/foonathan/cppast",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE.md",
   "summary": "Library interface to the C++ AST"
  },
  "build": {
   "number": "0",
   "run_exports": [
    "cppast >=0.1.0,<0.1.1.0a0"
   ],
   "string": "h924138e_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "saraedum"
   ]
  },
  "package": {
   "name": "cppast",
   "version": "0.1.0"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-64 2.36.1 h193b22a_2",
    "binutils_linux-64 2.36 hf3e587d_10",
    "bzip2 1.0.8 h7f98852_4",
    "c-ares 1.18.1 h7f98852_0",
    "ca-certificates 2022.9.24 ha878542_0",
    "cmake 3.24.2 h5432695_0",
    "expat 2.4.9 h27087fc_0",
    "gcc_impl_linux-64 10.4.0 h7ee1905_16",
    "gcc_linux-64 10.4.0 h9215b83_10",
    "gxx_impl_linux-64 10.4.0 h7ee1905_16",
    "gxx_linux-64 10.4.0 h6e491c6_10",
    "kernel-headers_linux-64 2.6.32 he073ed8_15",
    "keyutils 1.6.1 h166bdaf_0",
    "krb5 1.19.3 h08a2579_0",
    "ld_impl_linux-64 2.36.1 hea4e1c9_2",
    "libcurl 7.85.0 h2283fc2_0",
    "libedit 3.1.20191231 he28a2e2_2",
    "libev 4.33 h516909a_1",
    "libgcc-devel_linux-64 10.4.0 h74af60c_16",
    "libgcc-ng 12.1.0 h8d9b700_16",
    "libgomp 12.1.0 h8d9b700_16",
    "libnghttp2 1.47.0 hff17c54_1",
    "libsanitizer 10.4.0 hde28e3b_16",
    "libssh2 1.10.0 hf14f497_3",
    "libstdcxx-devel_linux-64 10.4.0 h74af60c_16",
    "libstdcxx-ng 12.1.0 ha89aaad_16",
    "libuv 1.44.2 h166bdaf_0",
    "libzlib 1.2.12 h166bdaf_4",
    "make 4.3 hd18ef5c_1",
    "ncurses 6.3 h27087fc_1",
    "openssl 3.0.5 h166bdaf_2",
    "rhash 1.4.3 h166bdaf_0",
    "sysroot_linux-64 2.12 he073ed8_15",
    "xz 5.2.6 h166bdaf_0",
    "zlib 1.2.12 h166bdaf_4",
    "zstd 1.5.2 h6239696_4"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 2_gnu",
    "binutils_impl_linux-64 2.36.1 h193b22a_2",
    "clang 15.0.1 ha770c72_0",
    "clang-15 15.0.1 default_h2e3cab8_0",
    "clang-format 15.0.1 default_h2e3cab8_0",
    "clang-format-15 15.0.1 default_h2e3cab8_0",
    "clang-tools 15.0.1 default_h2e3cab8_0",
    "clangdev 15.0.1 default_h2e3cab8_0",
    "clangxx 15.0.1 default_ha074a59_0",
    "cxxopts 2.2.1 h4bd325d_1",
    "debug_assert 1.3.3 h924138e_0",
    "gcc_impl_linux-64 12.1.0 hea43390_16",
    "icu 70.1 h27087fc_0",
    "kernel-headers_linux-64 2.6.32 he073ed8_15",
    "ld_impl_linux-64 2.36.1 hea4e1c9_2",
    "libclang 15.0.1 default_h2e3cab8_0",
    "libclang-cpp 15.0.1 default_h2e3cab8_0",
    "libclang-cpp15 15.0.1 default_h2e3cab8_0",
    "libclang13 15.0.1 default_h3a83d3e_0",
    "libgcc-devel_linux-64 12.1.0 h1ec3361_16",
    "libgcc-ng 12.1.0 h8d9b700_16",
    "libgomp 12.1.0 h8d9b700_16",
    "libiconv 1.17 h166bdaf_0",
    "libllvm15 15.0.1 h503ea73_0",
    "libsanitizer 12.1.0 ha89aaad_16",
    "libstdcxx-ng 12.1.0 ha89aaad_16",
    "libxml2 2.9.14 h22db469_4",
    "libzlib 1.2.12 h166bdaf_4",
    "llvm-tools 15.0.1 h503ea73_0",
    "llvmdev 15.0.1 h503ea73_0",
    "sysroot_linux-64 2.12 he073ed8_15",
    "tiny-process-library 2.0.4 h27087fc_1",
    "type_safe 0.2.2 h924138e_0",
    "xz 5.2.6 h166bdaf_0",
    "zstd 1.5.2 h6239696_4"
   ],
   "run": [
    "clangxx >=4.0.0",
    "libclang13 >=15.0.1",
    "libgcc-ng >=12",
    "libstdcxx-ng >=12",
    "tiny-process-library >=2.0.4,<2.1.0a0"
   ]
  },
  "source": {
   "patches": [
    "0001-do-not-vendor-external-dependencies.patch",
    "0002-install-library-binary.patch",
    "0003-simplify-cmake.patch"
   ],
   "sha256": "06f11c7a86263f10187ce45977e78c53b597032b4d24f501cd54f41ceae53721",
   "url": "https://github.com/foonathan/cppast/archive/refs/tags/v0.1.0.zip"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/cppast/cppast_fwd.hpp",
    "test -f $PREFIX/lib/libcppast.so",
    "cppast sample.h"
   ],
   "files": [
    "sample.h"
   ],
   "requires": [
    "cxx-compiler"
   ]
  }
 },
 "version": "0.1.0"
}