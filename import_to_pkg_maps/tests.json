{
 "tests":{
  "__set__":true,
  "elements":[
   "ablog",
   "adversarial-robustness-toolbox",
   "aesara",
   "airflow",
   "andes",
   "arosics",
   "atlassian-python-api",
   "awacs",
   "aws-parallelcluster",
   "awslogs",
   "benchmark-4dn",
   "birdy",
   "borb",
   "bqplot",
   "btrack",
   "caper",
   "causalml",
   "cbsyst",
   "cellpy",
   "cloudpathlib",
   "cmreshandler",
   "codext",
   "conda-store-server",
   "condorpy",
   "crystals",
   "cyberpandas",
   "deepforest",
   "deeptime",
   "djangocms-admin-style",
   "edgetest",
   "edgetest-conda",
   "edgetest-pip-tools",
   "emperor",
   "esmlab",
   "explainerdashboard",
   "fasttsne",
   "ffx",
   "flask-restless",
   "flask-restplus",
   "flox",
   "foundry_ml",
   "fps",
   "gemgis",
   "genestboost",
   "geoarray",
   "geofileops",
   "ghost.py",
   "glymur",
   "google-cloud-bigquery",
   "google-cloud-resource-manager",
   "goosebib",
   "grayskull",
   "gruut",
   "histogrammar",
   "ibm_db",
   "icet",
   "igl",
   "implicit",
   "intake-spark",
   "iohexperimenter",
   "ioos_qc",
   "ipywebrtc",
   "jaws",
   "jesth",
   "jupyter_server",
   "jupyterlab-git",
   "kbatch",
   "kim-convergence",
   "kim-property",
   "landlab",
   "larch",
   "lava",
   "lifelines",
   "litemark",
   "llnl-sina",
   "localtileserver",
   "looker-sdk",
   "lux-api",
   "mesmerize-core",
   "metview-python",
   "mikeio",
   "mktestdocs",
   "mlconjug3",
   "mleap",
   "mols2grid",
   "mpire",
   "mpl-interactions",
   "nb_cron",
   "ncar-jobqueue",
   "neptune-client",
   "neurokit2",
   "neutronics_material_maker",
   "nr.types",
   "onnx-caffe2",
   "openfisca-france",
   "openmichrom",
   "optimade",
   "otwrapy",
   "panda3d_viewer",
   "pathy",
   "pdfme",
   "peppy",
   "pfapack",
   "planetary-computer",
   "plum-dispatch",
   "point_cloud_utils",
   "portalocker",
   "poster",
   "probed",
   "propka",
   "py-cordex",
   "py-tools-ds",
   "pyannote.core",
   "pyathena",
   "pybtex",
   "pycroscopy",
   "pydeck",
   "pygpcca",
   "pykafka",
   "pyls-memestra",
   "pyomeca",
   "pyomniscidb",
   "pyopenrivercam",
   "pyremo",
   "pyrobuf",
   "pystac",
   "pysyncrosim",
   "pytermgui",
   "pyusid",
   "quacc",
   "quickle",
   "quilt",
   "quilt3",
   "radioactivedecay",
   "raven-wps",
   "reacnetgenerator",
   "reciprocalspaceship",
   "remove_dagmc_tags",
   "sanic",
   "saws",
   "scikit-partial",
   "sed-plume",
   "sphinx-js",
   "stitchm",
   "suds-jurko",
   "superset",
   "suspect",
   "swot_simulator",
   "terrainbento",
   "textnets",
   "theano-pymc",
   "theseus-ai",
   "tinydb",
   "tomlkit",
   "triad",
   "trio-asyncio",
   "trio_asyncio",
   "tsod",
   "tyssue",
   "verta",
   "vizlo",
   "webdavclient3",
   "wrighttools",
   "xclim",
   "xcube_geodb",
   "xsum",
   "xyzservices",
   "yggdrasil",
   "yt_astro_analysis"
  ]
 },
 "tests._constants":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests._exporter_targets":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests._test_core_strings":{
  "__set__":true,
  "elements":[
   "emperor"
  ]
 },
 "tests._test_format_strings":{
  "__set__":true,
  "elements":[
   "emperor"
  ]
 },
 "tests._util":{
  "__set__":true,
  "elements":[
   "mpl-interactions"
  ]
 },
 "tests._utils":{
  "__set__":true,
  "elements":[
   "btrack"
  ]
 },
 "tests.access_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.actions":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.actions.conftest":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.actions.test_core_actions":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.actions.test_store_metric_action":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.actions.test_validation_operators":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.actions.test_validation_operators_in_data_context":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.aiotest":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.conftest":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_add_reader":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_callback":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_coroutine":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_network":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_thread":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.aiotest.test_timer":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.all_tests":{
  "__set__":true,
  "elements":[
   "emperor"
  ]
 },
 "tests.als_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.api":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.api.client":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.api.client.local_client":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.api.common":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.api.common.mark_tasks":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.app":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.approximate_als_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.asyncmock":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.attacks":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.conftest":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.conftest":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_adversarial_asr":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_adversarial_texture_pytorch":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_auto_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_auto_projected_gradient_descent":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_boundary":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_brendel_and_bethge":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_dpatch":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_dpatch_robust":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_fast_gradient":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_frame_saliency":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_geometric_decision_based_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_imperceptible_asr":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_imperceptible_asr_pytorch":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_laser_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_lowprofool":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_momentum_iterative_method":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_over_the_air":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_pe_malware_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_shadow_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_sign_opt":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.evasion.test_square_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_baseline":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_black_box":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_meminf_based":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_true_label_baseline":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_white_box_decision_tree":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.attribute_inference.test_white_box_lifestyle_decision_tree":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference.test_black_box":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference.test_black_box_rule_based":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference.test_label_only_boundary_distance":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference.test_label_only_gap_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.membership_inference.test_shadow_models":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.model_inversion":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.model_inversion.test_mi_face":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.inference.test_reconstruction":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_audio_perturbations":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_backdoor_attack_dgm_red":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_backdoor_attack_dgm_trail":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_bullseye_polytope_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_clean_label_backdoor_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_gradient_matching_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_hidden_trigger_backdoor":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_image_perturbations":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.poison.test_sleeper_agent_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_adversarial_embedding":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_adversarial_patch":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_backdoor_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_carlini":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_copycat_cnn":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_decision_tree_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_deepfool":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_elastic_net":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_feature_collision":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_functionally_equivalent_extraction":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_graphite":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_hclu":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_hop_skip_jump":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_input_filter":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_iterative_method":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_knockoff_nets":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_newtonfool":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_pixel_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_poisoning_attack_svm":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_projected_gradient_descent":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_saliency_map":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_shapeshifter":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_simba":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_spatial_transformation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_targeted_universal_perturbation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_threshold_attack":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_universal_perturbation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_virtual_adversarial":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_wasserstein":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.test_zoo":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.attacks.utils":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.auth":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.auth.test_security":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.avro":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.data_gen":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.mock_registry":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.mock_schema_registry_client":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.test_avro_producer":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.test_cached_client":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.test_message_serializer":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.test_mock_client":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.avro.test_util":{
  "__set__":true,
  "elements":[
   "python-confluent-kafka"
  ]
 },
 "tests.backend_test":{
  "__set__":true,
  "elements":[
   "llnl-sina",
   "pybtex"
  ]
 },
 "tests.base":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_base_interface":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_base_utils":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_cached_property":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_capi":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_dl_utils":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_immutale_data":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_pickling":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base.test_sklearn_compat":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.base_client_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.base_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.basis":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.basis.test_base":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.basis.test_monomials":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.behaviors":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.behaviors.test_sheet_events":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.benchmarks":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.benchmarks.test_benchmarks":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.bibtex_parser_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.binary_serialization_test":{
  "__set__":true,
  "elements":[
   "bqplot",
   "ipywebrtc"
  ]
 },
 "tests.bindings":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.geojson_layer":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.hexagon_layer_function":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.minimal":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.multilayers":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.scatterplot":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.pydeck_examples.stacked":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.test_deck":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bindings.test_layer":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.boosted_model_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.bpr_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.browser":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.browser.image_diff":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.browser.screenshot_utils":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.browser.test_examples":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.browser.test_html_renderer":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.bst_parser_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.bst_parser_test.apacite":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.bst_parser_test.bst_parser_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.bst_parser_test.jurabib":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.bst_parser_test.plain":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.ca":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.ca.cts_model":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.ca.grain_hill":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.ca.lattice_grain":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.ca.test_celllab_cts":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.ca.test_user_guide_example":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.cache":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.cache_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.caffe2_ref_test":{
  "__set__":true,
  "elements":[
   "onnx-caffe2"
  ]
 },
 "tests.calculators":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.calculators.vasp":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.calculators.vasp.test_smartvasp":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.cases":{
  "__set__":true,
  "elements":[
   "arosics"
  ]
 },
 "tests.cass_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.celery_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.check_vals":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.classes":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.classes.test_cls_dict":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.classes.test_cls_function":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.classes.test_literal_meta":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.classes.test_something":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.classes.test_subscribtable_type":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.clean_test_accounts":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.cli":{
  "__set__":true,
  "elements":[
   "grayskull",
   "great-expectations",
   "llnl-sina"
  ]
 },
 "tests.cli.diff_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.cli.driver_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.cli.tap":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_cli":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_cli_cmds":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.cli.test_cli_recipes":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.cli.test_datasource_pandas":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_datasource_sqlite":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_docs":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_init":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_init_missing_libraries":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_init_pandas":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_init_sqlite":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_parser":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.cli.test_project":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_stdout":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.cli.test_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_suite":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_taps_pandas":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.test_validation_operator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.cli.utils":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.client":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.clustering":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.clustering.test_box_discretization":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.clustering.test_clustering":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.clustering.test_kmeans":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.clustering.test_mini_batch_kmeans":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.clustering.test_regspace":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.collections":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.collections.test_dict":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.collections.test_fs":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.collections.test_schema":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.colorgrids":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.column_aggregate_expectations_distributional":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.common":{
  "__set__":true,
  "elements":[
   "birdy",
   "raven-wps"
  ]
 },
 "tests.communication":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.filters":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.filters.test_FilterBase":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_AsciiFileComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_AsciiTableComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_BufferComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_CommBase":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_FileComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_ForkComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_IPCComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_MPIComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_PandasFileComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_RESTComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_RMQAsyncComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_RMQComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_ServerComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_ValueComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.test_ZMQComm":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.transforms":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.communication.transforms.test_TransformBase":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.compat":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.compile":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.function":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.function.test_function":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.function.test_pfunc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.function.test_types":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_builders":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_debugmode":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_function":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_function_module":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_function_name":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_misc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_mode":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_modes":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_monitormode":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_nanguardmode":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_ops":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_pfunc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_profiling":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compile.test_shared":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.compiler":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.ir":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.ir.test_compile_ir":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.ir.test_optimize_ir":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.ir.test_repeat":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.ir.test_with":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_bytecode_runtime":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_calldatacopy":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_compile_code":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_opcodes":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_pre_parser":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_sha3_32":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.compiler.test_source_map":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.components.chi_index":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.chi_index.test_chi_finder":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.depth_dependent_diffusion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.depth_dependent_diffusion.test_depth_dependent_diffuser":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.depth_dependent_taylor_soil_creep":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.depth_dependent_taylor_soil_creep.test_depth_dependent_taylor_diffuser":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.diffusion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.diffusion.test_sniff_diffusion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.dimensionless_discharge":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.dimensionless_discharge.test_dimensionless_discharge":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.drainage_density":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.drainage_density.test_drainage_density":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flexure":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flexure.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flexure.test_api":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flexure.test_flexure":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flexure.test_flexure_1d":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum.test_flow_accums":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum.test_flow_accumulator":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum.test_flow_routing":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_accum.test_lossy_flow_accumulator":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_director":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_director.test_dinf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_director.test_flow_director":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.flow_director.test_mfd":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.fracture_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.fracture_grid.test_fracture_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.hack_calculator":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.hack_calculator.test_hack":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.landslides":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.landslides.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.landslides.test_landslide_probability":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_abrasion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_active_layer_methods":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_filo":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_init":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_parcel_leaves":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_pulse_sediment":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_recycling":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.network_sediment_transporter.test_transport":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.nonlinear_diffusion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.nonlinear_diffusion.test_sniff_nldiff":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_active_links_at_node":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_bates_overland_flow":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_dealmeida_overland_flow":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_kinwave":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_kinwave_implicit":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.overland_flow.test_linear_diffusion_overland_flow":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.pet":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.pet.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.pet.test_pet":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.plant_competition_ca":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.plant_competition_ca.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.plant_competition_ca.test_plant_competition_ca":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.potentiality_flowrouting":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.potentiality_flowrouting.test_sniff_pot_fr":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.priority_flood_flow_router":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.priority_flood_flow_router.test_priority_flood_flow_router":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.radiation":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.radiation.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.radiation.test_radiation":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.sink_fill":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.sink_fill.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.sink_fill.test_sink_filler":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.soil_moisture":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.soil_moisture.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.soil_moisture.test_green_ampt_infil":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.soil_moisture.test_soil_moisture":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.spatial_precip":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.spatial_precip.test_spatial_storm_generator":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.steepness_index":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.steepness_index.test_steepness_finder":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_fastscape":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_not_implemented_errors":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_sed_flux_dep":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_simple":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_smooth_thresh":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_sp_driver_discharges":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_sp_driver_widths":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_sp_storms":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.stream_power.test_voronoi_sp":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.taylor_nonlinear_hillslope_flux":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.taylor_nonlinear_hillslope_flux.test_taylor_nonlinear_hillslope_flux":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.transport_length_diffusion":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.transport_length_diffusion.test_tl_hill_diff":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.vegetation_dynamics":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.vegetation_dynamics.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.vegetation_dynamics.test_vegetation_dynamics":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.weathering":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.weathering.test_exponential_weatherer":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.components.weathering.test_exponential_weathering_integrated":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.config":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.config.test_json_parser":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.configuration":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.conftest":{
  "__set__":true,
  "elements":[
   "ablog",
   "bqplot",
   "btrack",
   "caper",
   "causalml",
   "cloudpathlib",
   "deepforest",
   "deeptime",
   "edgetest",
   "esmlab",
   "fps",
   "genestboost",
   "grayskull",
   "histogrammar",
   "icet",
   "ipywebrtc",
   "jupyter_server",
   "landlab",
   "lifelines",
   "localtileserver",
   "looker-sdk",
   "lux-api",
   "mikeio",
   "mktestdocs",
   "optimade",
   "pathy",
   "peppy",
   "portalocker",
   "pyathena",
   "pydeck",
   "pygpcca",
   "pykafka",
   "pyomniscidb",
   "pyopenrivercam",
   "pyrobuf",
   "quilt",
   "quilt3",
   "raven-wps",
   "reciprocalspaceship",
   "sanic",
   "suds-jurko",
   "terrainbento",
   "textnets",
   "tinydb",
   "tomlkit",
   "trio-asyncio",
   "trio_asyncio",
   "verta",
   "xclim",
   "yggdrasil"
  ]
 },
 "tests.const":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.constants":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.context":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.contrib":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.aws_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.bigquery_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.emr_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.gcp_dataflow_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.spark_submit_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.test_ftp_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.hooks.test_jira_hook":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.dataflow_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.ecs_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.emr_add_steps_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.emr_create_job_flow_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.emr_terminate_job_flow_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.fs_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.hipchat_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.jira_operator_test":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.spark_submit_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.operators.ssh_execute_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.datadog_sensor":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.emr_base_sensor":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.emr_job_flow_sensor":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.emr_step_sensor":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.hdfs_sensors":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.contrib.sensors.jira_sensor_test":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.conversion_test":{
  "__set__":true,
  "elements":[
   "onnx-caffe2"
  ]
 },
 "tests.core":{
  "__set__":true,
  "elements":[
   "airflow",
   "great-expectations",
   "landlab",
   "theseus-ai",
   "tyssue",
   "xcube_geodb"
  ]
 },
 "tests.core.common":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_cost_function":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_cost_weight":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_evaluation_parameters":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_example_data":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.core.test_expectation_configuration":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_expectation_kwargs":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_expectation_suite":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_expectation_suite_crud_methods":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_geodb":{
  "__set__":true,
  "elements":[
   "xcube_geodb"
  ]
 },
 "tests.core.test_load_params":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.core.test_manifold":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_message":{
  "__set__":true,
  "elements":[
   "xcube_geodb"
  ]
 },
 "tests.core.test_messager":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.core.test_monolayer":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.core.test_multisheet":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.core.test_objective":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_objects":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.core.test_robust_cost":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_serialization":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.test_theseus_function":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_variable":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.test_vectorizer":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.core.usage_statistics":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.usage_statistics.test_anonymizer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.usage_statistics.test_schema_validation":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core.usage_statistics.test_usage_statistics":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.core_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.corpus":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.corpus.test_copy_document_compare_size":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.corpus.test_copy_document_resize_images_compare_size":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.corpus.test_extract_text_expect_ground_truth":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.corpus.test_open_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.corpus.test_open_encrypted_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.covariance":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.covariance.test_covar_estimator":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.covariance.test_moments":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.covariance.test_running_moments":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.covariance.test_util":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.create_message":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.custodian":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.custodian.test_vasp_custodian":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.custom_terminal":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.d3viz":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.d3viz.models":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.d3viz.test_d3viz":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.d3viz.test_formatting":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.dashboard_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.data":{
  "__set__":true,
  "elements":[
   "deeptime",
   "glymur",
   "pybtex",
   "wrighttools"
  ]
 },
 "tests.data.from_BrunoldrRaman":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_COLORS":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_Cary50":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_JASCO":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_PyCMDS":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_Tensor27":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.from_spcm":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.join":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.rename_attrs":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.data.test_bd_chain":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_cpp_systems":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_double_well":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_drunkards_walk":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_ellipsoids":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_metropolis1d":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_pbf":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_prinz":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_sqrt_model":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_swissroll":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data.test_util":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.data_asset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_data_asset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_data_asset_citations":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_data_asset_internals":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_data_asset_util":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_expectation_decorators":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_filedata_asset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_filedata_asset_expectations":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_asset.test_parameter_substitution":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.conftest":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store.test_evaluation_parameter_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store.test_expectations_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store.test_html_site_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store.test_store_backends":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.store.test_validations_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_configuration_storage":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_config_errors":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_config_variables":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_on_teams":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_resource_identifiers":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_store_configs":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_types":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_context.test_data_context_utils":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.data_generation":{
  "__set__":true,
  "elements":[
   "tsod"
  ]
 },
 "tests.database_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.database_test.data":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.database_test.database_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.dataframe_test":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.dataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_dataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_dataset_legacy":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_dataset_util_legacy":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_pandas_dataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_sparkdfdataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_sqlalchemydataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.dataset.test_util":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_batch_kwargs_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_glob_reader_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_manual_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_query_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_s3_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_subdir_reader_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.batch_kwarg_generator.test_table_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.conftest":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_batch_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_batch_kwargs_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_glob_reader_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_manual_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_query_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_s3_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_subdir_reader_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.generator.test_table_generator":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_batch_generators":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_batch_kwargs":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_datasource":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_datasource_anonymizer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_pandas_datasource":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_sparkdf_datasource":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_sqlalchemy_datasource":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource.test_sqlalchemy_datasource_workarounds":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.datasource_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.datastore_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.db_engine_specs_test":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.decomposition":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_dmd":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_edmd":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_kcca":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_kedmd":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_koopman_reweighting":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_kvadnet":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_score":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_tae":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_tica":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_utils":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_vamp":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decomposition.test_vampnet":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.decorators":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.decorators.test_hintable":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.defences":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.evasion":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.evasion.subsetscanning":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.evasion.subsetscanning.test_detector":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.evasion.test_detector":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_activation_defence":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_clustering_analyzer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_ground_truth_evaluator":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_provenance_defence":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_roni":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.detector.poison.test_spectral_signature_defense":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_adversarial_trainer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_adversarial_trainer_madry_pgd":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_class_labels":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_defensive_distillation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_feature_squeezing":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_gaussian_augmentation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_gaussian_noise":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_high_confidence":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_label_smoothing":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_neural_cleanse":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_pixel_defend":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_reverse_sigmoid":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_rounded":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_thermometer_encoding":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.test_variance_minimization":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.trainer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.trainer.test_adversarial_trainer_FBF":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.trainer.test_certified_adversarial_trainer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.transformer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.transformer.poisoning":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.defences.transformer.poisoning.test_strip":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.demos":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.demos.test_CiS2021_hackathon":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.demos.test_fspm2020":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.dict_import_export_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.dispatcher":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_cache":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_cases":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_dispatcher":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_future_annotations":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_precedence":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.dispatcher.test_return_type":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.disturb_mem":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.diverse_tests":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.doc":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.draw":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.draw.test_plt":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.draw.test_volume":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.drivers":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_BuildModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_CMakeModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_CModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_CompiledModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_ConnectionDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_Driver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_ExecutableModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_FileInputDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_FileOutputDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_MakeModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_MatlabModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_ModelDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.drivers.test_RPCRequestDriver":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.druid_func_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.druid_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.dynamics":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.dynamics.test_apoptosis_model":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.dynamics.test_bulk_model":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.dynamics.test_effectors":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.dynamics.test_sheet_model":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.email_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.estimators":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.certification":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.certification.test_deepz":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.certification.test_derandomized_smoothing":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.certification.test_randomized_smoothing":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_GPy":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_blackbox":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_blackbox_existing_predictions":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_catboost":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_classifier":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_deep_partition_ensemble":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_deeplearning_common":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_deeplearning_specific":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_detector_classifier":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_ensemble":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_input_filter":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_jax":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_lightgbm":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_query_efficient_bb":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_scikitlearn":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.classification.test_xgboost":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_detection":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_detection.test_pytorch_faster_rcnn":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_detection.test_pytorch_object_detector":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_detection.test_pytorch_yolo":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_detection.test_tensorflow_faster_rcnn":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_tracking":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.object_tracking.test_pytorch_goturn":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.speech_recognition":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.speech_recognition.conftest":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.speech_recognition.test_pytorch_deep_speech":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.speech_recognition.test_pytorch_espresso":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.estimators.speech_recognition.test_tensorflow_lingvo":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.evaluation_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.evaluations":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.evaluations.test_security_curve":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.example_converters_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.example_wdl":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.examples":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_SaM":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_ascii_io":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_conditional_io":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_gs_lesson4":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_model_error_with_io":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_rpcFib":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_rpc_lesson1":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_rpc_lesson2":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_rpc_lesson2b":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_rpc_lesson3b":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_timed_pipe":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_transforms":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.test_types":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.types":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.examples.types.types":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.executors":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.executors.test_executor":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.extension":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.conftest":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.app":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mock1":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mock2":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mock3":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mockext_both":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mockext_py":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mockext_sys":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.mockextensions.mockext_user":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_app":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_config":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_entrypoint":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_handler":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_manager":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_serverextension":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.extension.test_utils":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.external":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.axis1":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.axis2":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.jasper":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.public":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.rhq":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.external.saxenc":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.extlib":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.extlib.common":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.extlib.test_baspacho":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.extlib.test_baspacho_simple":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.extlib.test_cusolver_lu_solver":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.extlib.test_mat_mult":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.fdv":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.field":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.field.test_field_dataset":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.field.test_graph_fields":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.field.test_grouped_fields":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.fixtures":{
  "__set__":true,
  "elements":[
   "glymur",
   "histolab",
   "pydeck",
   "superset",
   "vyper"
  ]
 },
 "tests.fixtures.datasource":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.fixtures.memorymock":{
  "__set__":true,
  "elements":[
   "vyper"
  ]
 },
 "tests.fixtures.pyodbcRow":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.form_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.functional_tests":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.functional_tests.my_models":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.functional_tests.test_parametric":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.functional_tests.test_yaml":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.functions":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_common_ancestor":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_get_args_and_return_type":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_get_mro":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_get_type":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_get_type_hints_of_callable":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_instance_of":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_is_optional_type":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_is_type_annotation":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_origin_and_alias":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.functions.test_subclass_of":{
  "__set__":true,
  "elements":[
   "typish"
  ]
 },
 "tests.general_engine_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.generation":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.generation.test_generation":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.generation.test_shapes":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.gensim_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.geometry":{
  "__set__":true,
  "elements":[
   "theseus-ai",
   "tyssue"
  ]
 },
 "tests.geometry.common":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.point_types_mypy_check":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_bulkgeometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_cellcell_geometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_geometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_multisheetgeom":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_periodic_geometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_planar_geometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_point_types":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_se2":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_se3":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_sheet_geometry":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.geometry.test_so2":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_so3":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.geometry.test_vector":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.ghost":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.bindings":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.ext":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.ext.django":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.ext.django.test":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.ghost":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.logger":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.ghost.test":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.gof":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_cc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_cmodule":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_compiledir":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_compute_test_value":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_destroyhandler":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_fg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_graph":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_graph_opt_caching":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_lazy":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_link":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_op":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_optdb":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_params_type":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_sched":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_toolbox":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_types":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gof.test_vm":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpflow":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals.test_broadcasted_conditionals":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals.test_conditionals":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals.test_multioutput":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals.test_uncertain_conditional":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conditionals.test_util":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.config":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.config.test_config":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.conftest":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.covariances":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.covariances.test_base_covariances":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.covariances.test_multioutput":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.expectations":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.expectations.test_expectations":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.reference":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_broadcasting":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_changepoints":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_coregion":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_kernels":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_positive_semidefinite":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.kernels.test_scaled_euclid_dist":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_gaussian":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_heteroskedastic":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_heteroskedastic_constant_variance":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_likelihoods":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_multiclass":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.likelihoods.test_switched_likelihood":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_cglb":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_gplvm":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_gpr":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_gpr_posterior":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_mcmc":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_methods":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_model_predict":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_sgpr":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_sgpr_posterior":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_svgp":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_svgp_posterior":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_training_mixins":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.models.test_variational":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.optimizers":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.optimizers.test_mcmc":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.optimizers.test_natural_gradient":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.optimizers.test_scipy":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.posteriors":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.posteriors.test_posteriors":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_base":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_base_prior":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_base_training":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_inducing_variables":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_kullback_leiblers":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_logdensities":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_mean_functions":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.test_monitor":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_bijectors":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_deepcopy":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_model_utils":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_multipledispatch":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_ops":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_set_trainable":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_training_loop":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_traversal":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpflow.utilities.test_utilities":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.gpu_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.gpuarray":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.check_dnn_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.config":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.rnn_support":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.run_dnn_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_abstractconv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_basic_ops":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_blas":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_blocksparse":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_cgpukernelbase":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_ctc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_dnn":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_elemwise":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_extra_ops":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_fft":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_gemmcorr":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_gemmcorr3d":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_linalg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_misc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_multinomial":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_neighbours":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_nnet":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_others":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_pickle":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_pool":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_reduction":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_rng_mrg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_scan":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_sort":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_subtensor":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.gpuarray.test_type":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.graph":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.hex":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.hex.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.hex.test_dual_hex":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.hex.test_hex":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.hex.test_perimeter_nodes":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.radial":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.radial.test_dual_radial":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.sort":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.sort.test_intpair":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.sort.test_remap":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.structured_quad":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.structured_quad.test_dual_quad":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.structured_quad.test_quad":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.test_graph":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.voronoi":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.graph.voronoi.test_voronoi_to_graph":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.structured_quad":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.structured_quad.test_links":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.structured_quad.test_nodes":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_constructors":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_create":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_create_network":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_diagonals":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_grid_reference":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.test_edges":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.test_link_order":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.test_links":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.test_nodes":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.test_patches":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_grid.testing_flux_divergence_hex_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_hex_mappers":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_best_fit_plane":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_find_nearest_node":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_gradients_across_cell_corners":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_gradients_across_cell_faces":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_gradients_at_active_links":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_gradients_at_links":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_is_on_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_line_to_grid_coords":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_funcs.test_node_id_of_adjacent":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_gradients":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_allocators":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_axis_methods":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_bc_updates":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_cell_areas":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_corners":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_faces":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_fields":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_fixed_link_boundary":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_has_boundary_neighbor":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_init":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_is_boundary":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_link_length":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_link_order":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_mappers":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_neighbor_nodes":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_nodes":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_nodes_around_point":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_patches":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_save":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.test_raster_grid.test_status_at_node":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.unstructured":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.grid.unstructured.test_links":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.helper_test":{
  "__set__":true,
  "elements":[
   "onnx-caffe2"
  ]
 },
 "tests.helpers":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.html_test":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.http3":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.http3.test_http_receiver":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.http3.test_server":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.http3.test_session_ticket_store":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.impersonation":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.import":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.import_export_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.indirect_parametrize":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.initial_model_class_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.integration":{
  "__set__":true,
  "elements":[
   "gpflow",
   "great-expectations",
   "histolab",
   "looker-sdk",
   "quilt",
   "quilt3"
  ]
 },
 "tests.integration.test_dynamic_shapes":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.integration.test_image_filters":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_masks":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_method_equivalence":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.integration.test_methods":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.integration.test_morphological_filters":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_netrc":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.integration.test_notebooks":{
  "__set__":true,
  "elements":[
   "gpflow"
  ]
 },
 "tests.integration.test_packages":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.integration.test_scorer":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_slide":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_tile":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_tiler":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_util":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.integration.test_workflows":{
  "__set__":true,
  "elements":[
   "quilt3"
  ]
 },
 "tests.integration.usage_statistics":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.integration.usage_statistics.instantiate_context_with_usage_statistics":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.integration.usage_statistics.test_integration_usage_statistics":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.integration_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.interop":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.interop.test_adapter":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.interop.test_calls":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.io":{
  "__set__":true,
  "elements":[
   "landlab",
   "pydeck",
   "pyusid",
   "tyssue"
  ]
 },
 "tests.io.data_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.hdf_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.hdf_utils.test_base":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.hdf_utils.test_model":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.hdf_utils.test_simple":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.test_from_netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.test_read_netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.test_to_netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.test_write_netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.netcdf.test_write_raster_netcdf":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.simple_process":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_aisoff":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.io.test_array_translator":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_csv":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.io.test_dtype_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_html":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.io.test_image_translator":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_io_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_obj":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.io.test_partial_h5":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_read_esri_ascii":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.test_read_write_native":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.test_reg_ref":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_translator":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_usi_dataset":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io.test_write_esri_ascii":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.test_write_obj":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.io.test_write_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.io_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.ip":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_dtypes":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_interface":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_ip":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_ip_pandas":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_pandas_methods":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ip.test_parser":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.ipp":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.jobs":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.jupyter_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.jupyter_ux":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.jupyter_ux.test_jupyter_ux":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.kernels":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.kernels.test_kernels":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.kernels.test_kernels_torch":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.kit":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.kit.flatten_list":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.kit.symmetric_sqrt":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.knn_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.languages":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.languages.test_YggInterface":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.languages.test_install_languages":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.lava":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.builders":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.builders.test_builder":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.channels":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.channels.test_pypychannel":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.subcompilers":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.subcompilers.py":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.subcompilers.py.test_pyproc_compiler":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.subcompilers.test_channel_builders_factory":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.subcompilers.test_channel_map_updater":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.test_channel_builder":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.test_channel_map":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.test_compiler":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.compiler.test_node":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_learning_rule":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_learning_rule_applier":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_product_series":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_random":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_symbolic_equation":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.learning.test_utils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.model":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.model.py":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.model.py.test_ports":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.model.test_decorators":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.model.test_sub_model":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.ports":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.ports.test_ports":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.ports.test_virtual_ports_in_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.test_lif_dense_lif":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.test_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.core.process.test_variable":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_async_protocol":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_exception_handling":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_get_set_non_determinism":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_get_set_var":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_io_ports":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_loihi_protocol":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_pause_requested_from_model":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_ref_var_ports":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_run_continuously_and_pause":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_runtime":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.magma.runtime.test_runtime_service":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.conv":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.conv.test_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.conv.test_utils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.dense":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.dense.test_models":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.dense.test_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.dense.test_stdp_sim":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.io":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.io.test_dataloader":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.io.test_source_sink":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.lif":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.lif.test_models":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.lif.test_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.monitor":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.monitor.test_monitors":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.sdn":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.sdn.test_models":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.proc.sdn.test_process":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.test_utils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.test_utils.utils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.tutorials":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.tutorials.test_tutorials":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.utils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.lava.utils.test_weightutils":{
  "__set__":true,
  "elements":[
   "lava"
  ]
 },
 "tests.legacy":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.legacy.test_api":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.legacy.test_api_with_blueprint":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.license":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.license.test_discovery":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.link_functions":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.link_functions.link_function_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.link_functions.link_test_list":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.lmf_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.load_examples_test":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.local_only_tests":{
  "__set__":true,
  "elements":[
   "foundry_ml"
  ]
 },
 "tests.loss_functions":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.loss_functions.beta_loss_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.loss_functions.loss_function_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.loss_functions.loss_test_list":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.lotsa_windows":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.mac":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.mac.test_interface":{
  "__set__":true,
  "elements":[
   "cyberpandas"
  ]
 },
 "tests.macro_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.markov":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.factory":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm.test_bayesian_hmm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm.test_init_hmm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm.test_integration":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm.test_mlhmm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.hmm.test_output_models":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.conftest":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_amm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_bayesian_msm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_markov_state_model":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_mlmsm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_msm_basic_properties":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_oom":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_tram":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_tram_datatset":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.test_tram_model":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.msm.util":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.test_cktest":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.test_discrete_states":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.test_reactive_flux":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.test_sample":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.test_transition_counts":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.correlations_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.expectations_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.fingerprints_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.hitting_probability_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.pcca_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.dense.sensitivity_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.sparse":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.impl.sparse.fingerprints_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_assessment":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_committor":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_decomposition":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_expectations":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_fingerprints":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_mfpt":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_sensitivity":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.analysis.test_stationary_vector":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.conftest":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.dense":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.dense.covariance_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.dense.tmatrix_sampler_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.sparse":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.sparse.connectivity_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.sparse.likelihood_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.sparse.prior_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.impl.sparse.transition_matrix_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_bootstrapping":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_connectivity":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_count_matrix":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_effective_count_matrix":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_likelihood":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_mle_trev":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_mle_trev_given_pi":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_prior":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_ratematrix":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_tmatrix_sampling":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.estimation.tests.test_transition_matrix":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.flux":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.flux.test_pathways":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.flux.test_reactive_flux":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.flux.test_tpt":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.markov.tools.numeric":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.marks_test":{
  "__set__":true,
  "elements":[
   "bqplot",
   "ipywebrtc"
  ]
 },
 "tests.markup_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.messages":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.messages.test_message_pb2":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.messages.test_ref_message_pb2":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.metaschema":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.conftest":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_AnyMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_ArrayMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_ClassMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_ContainerMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_FunctionMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_InstanceMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_JSONArrayMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_JSONMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_JSONObjectMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_MetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_MultiMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_ObjMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_PlyMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_ScalarMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_SchemaMetaschemaType":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.datatypes.test_conversions":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_AnyMetaschemaProperties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_ArgsMetaschemaProperty":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_ArrayMetaschemaProperties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_ClassMetaschemaProperty":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_JSONArrayMetaschemaProperties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_JSONObjectMetaschemaProperties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_KwargsMetaschemaProperty":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_MetaschemaProperty":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_ScalarMetaschemaProperties":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.properties.test_TypeMetaschemaProperty":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.test_encoder":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metaschema.test_normalizer":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.metrics":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.privacy":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.privacy.test_membership_leakage":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.privacy.test_worst_case_mia_score":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.test_gradient_check":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.test_metrics":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.metrics.test_verification_decision_trees":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.migration_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.misc":{
  "__set__":true,
  "elements":[
   "borb",
   "theano-pymc"
  ]
 },
 "tests.misc.cmp":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.cmp.test_digit_comparison":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.matrix":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.matrix.test_matrix_determinant":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.matrix.test_matrix_multiplication":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.postscript":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.postscript.test_postscript_eval":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.test_may_share_memory":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.misc.test_pkl_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.misc.trie":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.trie.test_add_to_trie":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.types":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.types.test_hash_types":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.types.test_name_behaves_like_str":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.types.test_type_added_methods":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.misc.types.test_type_methods":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.mockup":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.model_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.model_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.models":{
  "__set__":true,
  "elements":[
   "airflow",
   "optimade",
   "verta"
  ]
 },
 "tests.models.conftest":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.nets":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.models.test_baseinfo":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_entries":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_jsonapi":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_links":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_optimade_json":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_references":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_structures":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.models.test_utils":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.monitoring":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.alerts":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.alerts.test_alerter":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.alerts.test_entities":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.alerts.test_status":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.comparison":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.comparison.test_comparison":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.conftest":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.notification_channels":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.notification_channels.test_config_classes":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.notification_channels.test_entities":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.strategies":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_aggregation":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_client":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_profilers":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_queries":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_summaries":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.monitoring.test_summary_samples":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.mysql_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.nbconvert":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.nbconvert.test_handlers":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.neptune":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.alpha_integration":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.alpha_integration.test_alpha_integration_backend":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.api_models":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.api_objects_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.experiments_object_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.http_objects_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.backends":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.backends.test_hosted_neptune_backend":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.backends.test_noop_object":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.channels":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.channels.test_channels_values_sender":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.gauges":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.gauges.gauges_fixture":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.gauges.test_cpu_gauges":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.gauges.test_gpu_gauges":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.gauges.test_memory_gauges":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.metrics":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.metrics.test_metric_reporter_integration":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.metrics.test_metric_service_integration":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.metrics.test_metrics_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.resources":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.hardware.resources.test_system_resource_info_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.storage":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.storage.test_datastream":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.internal.storage.test_upload_storage_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.management":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.management.internal":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.management.internal.test_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_artifact":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_artifact_hash":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_datetime":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_file":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_float":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.atoms.test_string":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.series":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.series.test_file_series":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.series.test_float_series":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.series.test_series":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.series.test_string_series":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.sets":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.sets.test_file_set":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.sets.test_string_set":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.test_attribute_base":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.attributes.test_attribute_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.backend_test_mixin":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.abstract_experiment_test_mixin":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.abstract_tables_test":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_model":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_model_version":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_model_version_tables":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_project":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_run":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.client.test_run_tables":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.drivers":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.drivers.test_local":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.drivers.test_s3":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.test_file_hasher":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.test_serializer":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.test_types":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.artifacts.utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_hosted_artifact_operations":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_hosted_client":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_hosted_file_operations":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_hosted_neptune_backend":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_neptune_backend_mock":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_nql":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_operations_preprocessor":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.backends.test_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.containers":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.containers.test_disk_queue":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_container_structure":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_credentials":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_disk_queue":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_operations":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_run_structure":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.test_streams":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.utils.test_images":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.utils.test_json_file_splitter":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.internal.utils.test_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.sync":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.sync.test_status":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.sync.test_sync":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.sync.test_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.sync.utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_client":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_experiment":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_handler":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_log_handler":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_run":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.test_sync":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.types":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.types.atoms":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.types.atoms.test_file":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.utils.api_experiments_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.utils.file_helpers":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.websockets":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.new.websockets.test_websockets_signals_background_job":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.oauth_objects_factory":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.project_test_fixture":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.random_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_channel_writer":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_experiment":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_git_info":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_imports":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_oauth":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_project":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_session":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.test_utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.utils":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.neptune.utils.assertions":{
  "__set__":true,
  "elements":[
   "neptune-client"
  ]
 },
 "tests.numeric":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.numeric.test_kahan_summation":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.numeric.test_norm":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.numeric.test_utils":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.onnx_backend_test":{
  "__set__":true,
  "elements":[
   "onnx-caffe2"
  ]
 },
 "tests.operators":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.docker_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.hive_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.latest_only_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.operators":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.s3_to_hive_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.sensors":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.operators.subdag_operator":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.params":{
  "__set__":true,
  "elements":[
   "mesmerize-core"
  ]
 },
 "tests.parse_name_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.parser_styled_plains":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.pcluster":{
  "__set__":true,
  "elements":[
   "aws-parallelcluster"
  ]
 },
 "tests.pcluster.efs_test":{
  "__set__":true,
  "elements":[
   "aws-parallelcluster"
  ]
 },
 "tests.pcluster.pcluster-unittest":{
  "__set__":true,
  "elements":[
   "aws-parallelcluster"
  ]
 },
 "tests.pdf":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_analogous_color_scheme":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_color_conversion":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_extract_colors":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_split_complementary_color_scheme":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_tetradic_rectangle_color_scheme":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_tetradic_square_color_scheme":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.color.test_triadic_color_scheme":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font.test_digit_placement_ubuntu_font":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font.test_extract_font_names":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font.test_write_hello_world_with_monaco_font":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font.test_write_hello_world_with_simhei_font":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.font.test_write_with_truetype_font":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.barcode":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.barcode.test_write_all_types_barcode":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.barcode.test_write_all_types_of_barcode":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.barcode.test_write_code_128_barcode":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.barcode.test_write_code_128_barcode_in_color":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chart":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chart.test_write_2_scatter_plots":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chart.test_write_3d_density_chart":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chart.test_write_3d_surface_plot":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chart.test_write_radar_plot":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text.test_write_chunk_of_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text.test_write_chunk_of_text_escaped_chars":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text.test_write_chunk_of_text_in_rainbow_colors":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text.test_write_paragraph_with_accented_letters":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunk_of_text.test_write_using_low_level_instructions":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunks_of_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunks_of_text.test_write_chunks_of_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.chunks_of_text.test_write_chunks_of_text_preserves_bounding_boxes":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.codeblock":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.codeblock.test_write_codeblock":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.emoji":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.emoji.test_write_emoji":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.forms":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.forms.test_write_check_box":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.forms.test_write_drop_down_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.forms.test_write_text_area":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.forms.test_write_text_field":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.heading":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.heading.test_write_paragraphs_with_headings":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.hyphenation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.hyphenation.test_hyphenation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.hyphenation.test_write_hyphenated_paragraph":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_modify_image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_grayscale_image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_image_aligned_center":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_image_by_url":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_image_justified_center":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_pil_image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_png_image_by_url":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.image.test_write_xl_image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art.test_write_blobs":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art.test_write_dragon_curve":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art.test_write_flowchart_line_art":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art.test_write_flyer":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_art.test_write_lissajours_line_art":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_of_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_of_text.test_write_line_of_text_justified_center":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_of_text.test_write_line_of_text_justified_full":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.line_of_text.test_write_line_of_text_justified_right":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list.test_write_long_unordered_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list.test_write_nested_ordered_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list.test_write_nested_unordered_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list.test_write_ordered_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.list.test_write_unordered_list":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_browser_layout_inline_next_line":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_line_height_parameter":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_margin_and_padding":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_write_multiple_pages":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_write_paragraphs_using_multi_column_layout":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.page_layout.test_write_paragraphs_using_single_column_layout":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_hello_world":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_alignment":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_border_left":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_force_split":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_center":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_center_with_padding":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_center_with_padding_and_border":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_center_with_padding_and_border_and_background":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_full":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_justified_right":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_preserve_space":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.paragraph.test_write_paragraph_save_twice":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_battleship":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_fixed_column_width_table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_flexi_table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_flexi_table_with_preferred_width":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_incomplete_table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_col_span":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_non_black_paragraphs":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_rainbow_background":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_row_span":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_table_with_special_characters":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.layout.table.test_write_tents_and_trees":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.canvas.test_write_empty_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.conformance":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.conformance.test_write_pdf_a_1b":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.concat":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.concat.test_concat_documents":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.count_pages":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.count_pages.test_count_pages":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.embedded_files":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.embedded_files.test_append_embedded_file":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.outlines":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.outlines.test_add_outline":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.outputintent":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.outputintent.test_create_document_with_output_intent":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.split_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.split_document.test_split_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.document.test_remove_page":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_all_rubber_stamp_annotations":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_circle_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_free_text_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_highlight_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_line_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_polygon_annotation_using_line_art_factory":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_polyline_annotation_using_line_art_factory":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_redact_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_remote_go_to_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_square_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_square_annotation_in_free_space":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_squiggle_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_strikeout_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_super_mario_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_text_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_add_underline_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_count_annotations":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.annotations.test_remove_annotation":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.redact":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.redact.test_apply_redaction_annotations":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.rotate":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.rotate.test_rotate_page":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.shape":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.page.shape.test_page_has_empty_resource_dictionary":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.trailer":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.trailer.profile_read_document":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.trailer.test_change_info_dictionary_author":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.pdf.trailer.test_read_xmp_metadata":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.perf_lists":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.performances":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.plot":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.network_sediment_transporter":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.network_sediment_transporter.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.network_sediment_transporter.test_plot_network_and_parcels":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.test_drainage_plot":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.test_event_handler":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.test_imshow_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plot.test_layers":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.plots":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.plots.test_ck_test":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.plots.test_implied_timescales":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.plugin_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.plugins_manager":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.preprocessing":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.audio":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.audio.test_l_filter":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.audio.test_l_filter_pytorch":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions.test_brightness":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions.test_contrast":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions.test_gaussian_noise":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions.test_shot_noise":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.natural_corruptions.test_zoom_blur":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.expectation_over_transformation.test_image_rotation":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.preprocessing.test_standardisation_mean_std":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.processing":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.processing.data_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.processing.proc_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.processing.test_comp_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.processing.test_process":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.profile":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.profile.test_SampleExpectationsDatasetProfiler":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.profile.test_basic_suite_builder_profiler":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.profile.test_multi_batch_validation_meta_analysis":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.profile.test_profile":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.psycopg2_mock":{
  "__set__":true,
  "elements":[
   "xcube_geodb"
  ]
 },
 "tests.pykafka":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.rdkafka":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.rdkafka.test_producer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.rdkafka.test_rd_kafka_consumer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.rdkafka.test_simple_consumer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.rdkafka.test_ssl":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_balancedconsumer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_cluster":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_connection":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_partition":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_partitioners":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_producer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_protocol":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_simpleconsumer":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.test_ssl":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.utils":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.utils.test_compression":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pykafka.utils.test_struct_helpers":{
  "__set__":true,
  "elements":[
   "pykafka"
  ]
 },
 "tests.pyspark":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.feature":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.feature.math_binary_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.feature.math_unary_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.feature.string_map_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.lib":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.lib.assertions":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.pyspark.lib.spark_session":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.python":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.conftest":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_base_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_futures":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_locks":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_pep492":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_proactor_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_queues":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_selector_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_sslproto":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_streams":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_subprocess":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_tasks":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_transports":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_unix_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_windows_events":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.python.test_windows_utils":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.emt":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.emt.test_emt_recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.gaussian":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.gaussian.conftest":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.gaussian.test_gaussian_recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.orca":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.orca.conftest":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.orca.test_orca_recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.vasp":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.vasp.conftest":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.vasp.test_vasp_recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.xtb":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recipes.xtb.test_xtb_recipes":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.recommender_base_test":{
  "__set__":true,
  "elements":[
   "implicit"
  ]
 },
 "tests.record":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.recording":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.reforms":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.conftest":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_allocations_familliales_imposables":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_cesthra":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_landais_piketty_saez":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_parametric_reform":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_plf2015":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_plf2016":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_plf2016_ayrault_muet":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_plfr2014":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.reforms.test_trannoy_wasmer":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.render":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.renderer.content_block":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.renderer.content_block.test_expectation_string_renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.renderer.test_notebook_renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_SlackRenderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_column_section_renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_data_documentation_site_builder":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_default_jinja_view":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_page_renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_render":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_render_BulletListContentBlock":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_render_ExceptionListContentBlockRenderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_render_ValidationResultsTableContentBlockRenderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_renderer":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_styled_string_template":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.render.test_util":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.rest_framework":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.rest_framework.apps":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.rest_framework.models":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.rest_framework.test_backends":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.rest_framework.test_filters":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.rest_framework.test_filterset":{
  "__set__":true,
  "elements":[
   "django-filter"
  ]
 },
 "tests.richtext_test":{
  "__set__":true,
  "elements":[
   "pybtex"
  ]
 },
 "tests.rtl":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_api_methods":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_api_settings":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_auth_session":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_auth_token":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_requests_transport":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_serialize":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.rtl.test_transport":{
  "__set__":true,
  "elements":[
   "looker-sdk"
  ]
 },
 "tests.run":{
  "__set__":true,
  "elements":[
   "ghost.py"
  ]
 },
 "tests.run_raster_model_grid_builtin_unit_test":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.run_tests":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.sandbox":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.linalg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.linalg.test_linalg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.test_jax":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.test_minimal":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.test_multinomial":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.test_multinomial_wo_replacement":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sandbox.test_rng_mrg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scalar":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scalar.test_basic":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scalar.test_basic_sympy":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan.test_basic":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan.test_checkpoints":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan.test_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan_module":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan_module.test_scan":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan_module.test_scan_checkpoints":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan_module.test_scan_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.scan_module.test_scan_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.schedules_test":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.schemas":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.schemas.test_atoms":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.schemas.test_calc":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.schemas.test_cclib":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.schemas.test_vasp":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.security_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.selector_test":{
  "__set__":true,
  "elements":[
   "bqplot"
  ]
 },
 "tests.serialization":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.serialization.test_identify":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.serialization.test_migrate":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.serialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_AsciiMapSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_AsciiTableSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_DefaultSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_FunctionalSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_MatSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_PandasSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_PickleSerialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.serialize.test_serialize":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.server":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.conftest":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params.conftest":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params.test_filter":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params.test_include":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params.test_response_fields":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.query_params.test_sort":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_info":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_links":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_references":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_structures":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_utils":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.routers.test_versions":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.test_client":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.test_config":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.test_mappers":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.test_schemas":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.test_server_validation":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.server.utils":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.services":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.api.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.config":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.config.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents.test_config":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents.test_fileio":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents.test_largefilemanager":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.contents.test_manager":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.kernels":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.kernels.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.kernels.test_config":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.kernelspecs":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.kernelspecs.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.nbconvert":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.nbconvert.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.sessions":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.sessions.test_api":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.services.sessions.test_manager":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.settings":{
  "__set__":true,
  "elements":[
   "djangocms-admin-style"
  ]
 },
 "tests.settings-docker":{
  "__set__":true,
  "elements":[
   "djangocms-admin-style"
  ]
 },
 "tests.sindy":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.sindy.test_sindy":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.skip_test_custom_protocol":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.sklearn":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.base_tests":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.extensions":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.extensions.data_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.extensions.imputer_extension_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.feature_extraction":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.feature_extraction.text_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.preprocessing":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.preprocessing.data_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.preprocessing.imputer_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.preprocessing.one_hot_encoder_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.tree":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.sklearn.tree.tree_test":{
  "__set__":true,
  "elements":[
   "mleap"
  ]
 },
 "tests.smoketests":{
  "__set__":true,
  "elements":[
   "peppy"
  ]
 },
 "tests.smoketests.test_Project":{
  "__set__":true,
  "elements":[
   "peppy"
  ]
 },
 "tests.smoketests.test_Sample":{
  "__set__":true,
  "elements":[
   "peppy"
  ]
 },
 "tests.solvers":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.solvers.test_isotropic_solver":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.solvers.test_sheet_solver":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.sparse":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.sandbox":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.sandbox.test_sp":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.test_basic":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.test_sp2":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.test_type":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sparse.test_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.sql":{
  "__set__":true,
  "elements":[
   "llnl-sina",
   "xcube_geodb"
  ]
 },
 "tests.sql.test_sql_functions":{
  "__set__":true,
  "elements":[
   "xcube_geodb"
  ]
 },
 "tests.sql_parse_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.sqla_models_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.sqlalchemy_dataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.sqlalchemy_dataset.test_sqlalchemydataset":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.sqlite_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.sqllab_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.ssa_test":{
  "__set__":true,
  "elements":[
   "onnx-caffe2"
  ]
 },
 "tests.stats_logger_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.std_col":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.store.test_html_site_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.store.test_new_stores":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.store.test_store_backends":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.store.test_validation_store":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.stored_dataframes":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.superset_test_config":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.syntax":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.system":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.temporary_file_lock":{
  "__set__":true,
  "elements":[
   "portalocker"
  ]
 },
 "tests.tensor":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor._test_mpi_roundtrip":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.speed_test_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_abstract_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_blocksparse":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_bn":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_conv3d2d":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_corr":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_corr3d":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_ctc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_neighbours":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_nnet":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.nnet.test_sigm":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.signal":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.signal.test_conv":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.signal.test_pool":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_basic":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_basic_scipy":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_blas":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_blas_c":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_blas_scipy":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_casting":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_complex":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_elemwise":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_extra_ops":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_fft":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_fourier":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_gc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_inc_subtensor":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_inplace":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_io":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_keepdims":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_merge":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_misc":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_mlp":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_mpi":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_nlinalg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_opt_uncanonicalize":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_raw_random":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_shared_randomstreams":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_sharedvar":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_slinalg":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_sort":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_subtensor":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_type_other":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_var":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.test_xlogx":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.tensor.utils":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.test":{
  "__set__":true,
  "elements":[
   "benchmark-4dn",
   "jaws"
  ]
 },
 "tests.test-confluence-attach":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_1st_system":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_2nd_order_grads":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.test_COREG":{
  "__set__":true,
  "elements":[
   "arosics"
  ]
 },
 "tests.test_COREG_LOCAL":{
  "__set__":true,
  "elements":[
   "arosics"
  ]
 },
 "tests.test_GbibClean":{
  "__set__":true,
  "elements":[
   "goosebib"
  ]
 },
 "tests.test_IOH_benchmarking":{
  "__set__":true,
  "elements":[
   "iohexperimenter"
  ]
 },
 "tests.test_IOH_function":{
  "__set__":true,
  "elements":[
   "iohexperimenter"
  ]
 },
 "tests.test_IOH_logger":{
  "__set__":true,
  "elements":[
   "iohexperimenter"
  ]
 },
 "tests.test_Material":{
  "__set__":true,
  "elements":[
   "neutronics_material_maker"
  ]
 },
 "tests.test_Material_from_mixture":{
  "__set__":true,
  "elements":[
   "neutronics_material_maker"
  ]
 },
 "tests.test_Multmaterial":{
  "__set__":true,
  "elements":[
   "neutronics_material_maker"
  ]
 },
 "tests.test_Project":{
  "__set__":true,
  "elements":[
   "peppy"
  ]
 },
 "tests.test_accept":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_action":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_activitysim":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_actual_docstrings":{
  "__set__":true,
  "elements":[
   "mktestdocs"
  ]
 },
 "tests.test_addressing":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_aggregator":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_aio_subprocess":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.test_all_notebooks":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_animations":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_annotations":{
  "__set__":true,
  "elements":[
   "pyannote.core"
  ]
 },
 "tests.test_anypath":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_api":{
  "__set__":true,
  "elements":[
   "flask-restplus",
   "nb_cron",
   "quilt",
   "quilt3",
   "tomlkit"
  ]
 },
 "tests.test_apidoc":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_app":{
  "__set__":true,
  "elements":[
   "localtileserver",
   "sanic"
  ]
 },
 "tests.test_arg_tool":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_argument_parser":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_artifacts":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_asgi":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_async_cursor":{
  "__set__":true,
  "elements":[
   "pyathena"
  ]
 },
 "tests.test_atom":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_auth":{
  "__set__":true,
  "elements":[
   "conda-store-server"
  ]
 },
 "tests.test_auto":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_autoreload":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.test_aws":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_azure_specific":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_backend":{
  "__set__":true,
  "elements":[
   "kbatch",
   "verta"
  ]
 },
 "tests.test_backwards_compatibility":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_bad_n_sp":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_bad_request":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_base":{
  "__set__":true,
  "elements":[
   "atlassian-python-api",
   "awacs",
   "codext",
   "crystals",
   "pathy",
   "sanic"
  ]
 },
 "tests.test_base_class_erosion_model_boundary_handers":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_erosion_model_inputs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_erosion_model_misc":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_erosion_model_output_writers":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_erosion_model_outputs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_erosion_model_run":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_stochastic_erosion_model":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_class_two_lithology_base":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_level_capture_node_baselevel_handler":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_level_generic_function_baselevel_handler":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_level_not_core_node_baselevel_handler":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_level_precip_changer":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_level_single_node_baselevel_handler":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_base_recipe":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_basic":{
  "__set__":true,
  "elements":[
   "histogrammar",
   "igl"
  ]
 },
 "tests.test_basic_regression":{
  "__set__":true,
  "elements":[
   "propka"
  ]
 },
 "tests.test_basics":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_batch":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_bindings":{
  "__set__":true,
  "elements":[
   "metview-python"
  ]
 },
 "tests.test_biologics":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_bitbucket_cloud":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_bitbucket_cloud_oo":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_bitbucket_server":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_bitbucket_server_oo":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_block":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_blueprint_copy":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_blueprint_group":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_blueprints":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_bool_field":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_boosting_models":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_boron":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_boron_isotopes":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_breakpoint":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_bucket":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_build":{
  "__set__":true,
  "elements":[
   "ablog",
   "tomlkit"
  ]
 },
 "tests.test_bulk":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_bytes_and_string_lists":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_cache":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_caching":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_callbacks":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_cameraconfig":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_caper_labels":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_caper_wdl_parser":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_caper_workflow_opts":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_carbon":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_case":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_catalog":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_cats_only":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_cbsyst":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_cell_readers":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_cellpy":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_cellpy_cmd":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_cellpy_splitting":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_centerline":{
  "__set__":true,
  "elements":[
   "sed-plume"
  ]
 },
 "tests.test_cevae":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_checks":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_cinema":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_class":{
  "__set__":true,
  "elements":[
   "mktestdocs"
  ]
 },
 "tests.test_classifier_base":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_classifier_explainer":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_cli":{
  "__set__":true,
  "elements":[
   "andes",
   "birdy",
   "explainerdashboard",
   "pathy",
   "pyremo",
   "quilt",
   "quilt3",
   "sanic",
   "saws",
   "sed-plume",
   "verta"
  ]
 },
 "tests.test_cli.test_endpoint":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_cli.test_registry":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_cli.test_repository":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_cli_run":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_cli_server_client_gcp":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_client":{
  "__set__":true,
  "elements":[
   "birdy",
   "cloudpathlib",
   "kbatch",
   "localtileserver"
  ]
 },
 "tests.test_client_cache":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_client_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_client_resource_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_client_unit":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_clients":{
  "__set__":true,
  "elements":[
   "pathy"
  ]
 },
 "tests.test_climatology":{
  "__set__":true,
  "elements":[
   "esmlab"
  ]
 },
 "tests.test_clock":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_cloudpath_file_io":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_cloudpath_instantiation":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_cloudpath_internal":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_cloudpath_manipulation":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_cloudpath_upload_copy":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_cmor":{
  "__set__":true,
  "elements":[
   "py-cordex",
   "pyremo"
  ]
 },
 "tests.test_cmreshandler":{
  "__set__":true,
  "elements":[
   "cmreshandler"
  ]
 },
 "tests.test_cmresserializer":{
  "__set__":true,
  "elements":[
   "cmreshandler"
  ]
 },
 "tests.test_codeblock":{
  "__set__":true,
  "elements":[
   "mktestdocs"
  ]
 },
 "tests.test_codestream":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_coefficient":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_coffee":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_collection":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_collections":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_colors":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_colour_specification_box":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_columns":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_combined":{
  "__set__":true,
  "elements":[
   "portalocker"
  ]
 },
 "tests.test_command_line":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_command_line_tool":{
  "__set__":true,
  "elements":[
   "remove_dagmc_tags"
  ]
 },
 "tests.test_commandline_entrypoint":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_commands":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_common":{
  "__set__":true,
  "elements":[
   "codext"
  ]
 },
 "tests.test_comms":{
  "__set__":true,
  "elements":[
   "mpire"
  ]
 },
 "tests.test_compiler":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_completer":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_components":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_concurrency":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_concurrency.run_functions":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_concurrency.test_concurrency":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_concurrent":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.test_conditions":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_config":{
  "__set__":true,
  "elements":[
   "aesara",
   "andes",
   "btrack",
   "fps",
   "glymur",
   "ioos_qc",
   "lux-api",
   "pytermgui",
   "sanic",
   "theano-pymc",
   "verta",
   "yggdrasil"
  ]
 },
 "tests.test_config_manager":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_confluence_advanced_mode":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_confluence_attach":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_connection":{
  "__set__":true,
  "elements":[
   "pyomniscidb",
   "webdavclient3"
  ]
 },
 "tests.test_constants":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_constraints":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_content":{
  "__set__":true,
  "elements":[
   "pdfme"
  ]
 },
 "tests.test_controls":{
  "__set__":true,
  "elements":[
   "mpl-interactions"
  ]
 },
 "tests.test_conversion":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_converters":{
  "__set__":true,
  "elements":[
   "birdy",
   "radioactivedecay"
  ]
 },
 "tests.test_cookies":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_cordex":{
  "__set__":true,
  "elements":[
   "py-cordex"
  ]
 },
 "tests.test_core":{
  "__set__":true,
  "elements":[
   "edgetest",
   "emperor",
   "flox",
   "kbatch",
   "mesmerize-core"
  ]
 },
 "tests.test_correctness":{
  "__set__":true,
  "elements":[
   "fasttsne"
  ]
 },
 "tests.test_cors":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_counterfactual_unit_selection":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_create_precipitator":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_create_runoff_generator":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_create_task":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_creating":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_cromwell":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_cromwell_backend":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_cromwell_metadata":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_cromwell_rest_api":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_crystal":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_cursor":{
  "__set__":true,
  "elements":[
   "pyathena",
   "pyomniscidb"
  ]
 },
 "tests.test_custom_options":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_custom_request":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_cv":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_cyrilic_client_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_dae_names":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_dashboard":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_data":{
  "__set__":true,
  "elements":[
   "deepforest"
  ]
 },
 "tests.test_data_arrays":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_data_generators":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.test_data_transfer":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_data_types":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_data_utils":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.test_dataframes":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_dataseries":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset":{
  "__set__":true,
  "elements":[
   "mikeio",
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_anomalous":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_grid":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_implementations":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_dataset_implementations.test_dataset_implementations":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_dataset_index":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_preserve_attributes":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_symops":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_dataset_versioning":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_dataset_versioning.test_dataset":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_dataset_versioning.test_dataset_version":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_datasets":{
  "__set__":true,
  "elements":[
   "causalml",
   "esmlab",
   "verta"
  ]
 },
 "tests.test_date_time":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_dates":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_dbreader":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_decaydata":{
  "__set__":true,
  "elements":[
   "radioactivedecay"
  ]
 },
 "tests.test_decisiontrees":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_deckgl_widget":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.test_decorators":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_deepforest":{
  "__set__":true,
  "elements":[
   "deepforest"
  ]
 },
 "tests.test_definitions":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_definitions.test_expectations":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_deleting":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_dependencies":{
  "__set__":true,
  "elements":[
   "birdy"
  ]
 },
 "tests.test_deployment":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_deprecated_field":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_deprecation":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_detect":{
  "__set__":true,
  "elements":[
   "reacnetgenerator"
  ]
 },
 "tests.test_detectors":{
  "__set__":true,
  "elements":[
   "tsod"
  ]
 },
 "tests.test_determinism":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_dfs0":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dfs1":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dfs2":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dfs3":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dfsu":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dfsu_plot":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dict_tool":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_dictionary_output":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_discrete":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_display":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_dlm_perturbation":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.test_doclets":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_docs":{
  "__set__":true,
  "elements":[
   "scikit-partial"
  ]
 },
 "tests.test_docstrings":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_doctor":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_document_store":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_documentation_code_blocks":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_domain":{
  "__set__":true,
  "elements":[
   "py-cordex",
   "pyremo"
  ]
 },
 "tests.test_dotnet":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_dump_n_load":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_dynamic_routes":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_ec2":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_en":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_encode":{
  "__set__":true,
  "elements":[
   "poster"
  ]
 },
 "tests.test_end2end":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_endpoint":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_endpoint.test_endpoint":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_endpoint.test_resources":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_entities":{
  "__set__":true,
  "elements":[
   "openfisca-france",
   "verta"
  ]
 },
 "tests.test_eo":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_equality":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_error_generation":{
  "__set__":true,
  "elements":[
   "swot_simulator"
  ]
 },
 "tests.test_error_warning":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_errorpages":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_errors":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_estimation":{
  "__set__":true,
  "elements":[
   "lifelines"
  ]
 },
 "tests.test_eum":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_examples":{
  "__set__":true,
  "elements":[
   "awacs",
   "btrack",
   "larch",
   "point_cloud_utils"
  ]
 },
 "tests.test_exceptions":{
  "__set__":true,
  "elements":[
   "sanic",
   "webdavclient3"
  ]
 },
 "tests.test_exceptions_handler":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_executor":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_experimentrun":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_experimentrun.test_attributes":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_experimentrun.test_environment":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_experimentrun.test_requirements":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_exporters":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_ext_integration":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_external":{
  "__set__":true,
  "elements":[
   "ablog"
  ]
 },
 "tests.test_externalsource":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_extra":{
  "__set__":true,
  "elements":[
   "grayskull",
   "soupsieve"
  ]
 },
 "tests.test_extra.test_attribute":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_extra.test_contains":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_extra.test_custom":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_extra.test_defined":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_ezc3d":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_factory":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_fancy_repr":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_features":{
  "__set__":true,
  "elements":[
   "causalml",
   "pyannote.core"
  ]
 },
 "tests.test_fetching":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_field_defaults":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_fields":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_fields_mask":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_file":{
  "__set__":true,
  "elements":[
   "pathy"
  ]
 },
 "tests.test_file_handler":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_filefinder":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_fileio_read_csv_c3d":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_fileio_read_other_formats":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_fileio_write":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_files":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_filetree":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_filetree.test_query":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_filetree.test_read":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_filetree.test_registration":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_filetree.test_template":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_filtering":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_flake8":{
  "__set__":true,
  "elements":[
   "yt_astro_analysis"
  ]
 },
 "tests.test_folium":{
  "__set__":true,
  "elements":[
   "localtileserver"
  ]
 },
 "tests.test_format":{
  "__set__":true,
  "elements":[
   "emperor"
  ]
 },
 "tests.test_formats":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_formatter":{
  "__set__":true,
  "elements":[
   "pyathena"
  ]
 },
 "tests.test_foundry_gha":{
  "__set__":true,
  "elements":[
   "foundry_ml"
  ]
 },
 "tests.test_fr":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_frames":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_functions":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_g2p":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_gateway":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_gemgis":{
  "__set__":true,
  "elements":[
   "gemgis"
  ]
 },
 "tests.test_general_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_generate_datasets":{
  "__set__":true,
  "elements":[
   "lifelines"
  ]
 },
 "tests.test_generated":{
  "__set__":true,
  "elements":[
   "codext"
  ]
 },
 "tests.test_generic":{
  "__set__":true,
  "elements":[
   "mikeio",
   "mpl-interactions",
   "nr.types",
   "xclim"
  ]
 },
 "tests.test_geo":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_coord_grid":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_coord_trafo":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_map_info":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_projection":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_vector":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geo.test_vector.test_geometry":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_geoarray":{
  "__set__":true,
  "elements":[
   "geoarray"
  ]
 },
 "tests.test_geofile":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geofileops_singlelayer":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geofileops_singlelayer_gpd":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geofileops_singlelayer_sql":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geofileops_twolayers":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geofiletype":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geometry_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_geoseries_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_gfile":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_gliders":{
  "__set__":true,
  "elements":[
   "ioos_qc"
  ]
 },
 "tests.test_golden_rules":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_gpcca":{
  "__set__":true,
  "elements":[
   "pygpcca"
  ]
 },
 "tests.test_gpu":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_graceful_shutdown":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_gradient":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_grid_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_group":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_groupby":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_gs_specific":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_handler_annotations":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_has_field":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_has_field_many":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_headers":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_helper":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_helpers":{
  "__set__":true,
  "elements":[
   "awacs",
   "cellpy",
   "mikeio",
   "mpl-interactions",
   "pytermgui",
   "sanic"
  ]
 },
 "tests.test_highlight_markup_literal":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_histograms":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_hocon_string":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_hook":{
  "__set__":true,
  "elements":[
   "edgetest-conda",
   "edgetest-pip-tools"
  ]
 },
 "tests.test_http":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_http_alt_svc":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_hybrid36":{
  "__set__":true,
  "elements":[
   "propka"
  ]
 },
 "tests.test_iam":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_ica":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_idce":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_ifelse":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_import":{
  "__set__":true,
  "elements":[
   "panda3d_viewer"
  ]
 },
 "tests.test_imported_enums":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_in_out":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_indices":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_init":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_input_parameters":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_inputs":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_insights":{
  "__set__":true,
  "elements":[
   "mpire"
  ]
 },
 "tests.test_int_mats":{
  "__set__":true,
  "elements":[
   "pfapack"
  ]
 },
 "tests.test_integraiton":{
  "__set__":true,
  "elements":[
   "condorpy"
  ]
 },
 "tests.test_integration":{
  "__set__":true,
  "elements":[
   "edgetest",
   "pyomniscidb",
   "vizlo"
  ]
 },
 "tests.test_integrations":{
  "__set__":true,
  "elements":[
   "cloudpathlib",
   "verta"
  ]
 },
 "tests.test_interestingness":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_interface":{
  "__set__":true,
  "elements":[
   "edgetest",
   "mols2grid",
   "nr.types"
  ]
 },
 "tests.test_interpolation":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_inventory":{
  "__set__":true,
  "elements":[
   "radioactivedecay"
  ]
 },
 "tests.test_io":{
  "__set__":true,
  "elements":[
   "btrack",
   "py-tools-ds"
  ]
 },
 "tests.test_io.test_raster":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_io.test_raster.test_gdal":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_io_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_ir":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_is_initialized":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_issue_11":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_issue_69":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_it":{
  "__set__":true,
  "elements":[
   "awslogs"
  ]
 },
 "tests.test_item":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_item_collection":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_items":{
  "__set__":true,
  "elements":[
   "pyrobuf",
   "tomlkit"
  ]
 },
 "tests.test_ivlearner":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_job":{
  "__set__":true,
  "elements":[
   "condorpy"
  ]
 },
 "tests.test_journals":{
  "__set__":true,
  "elements":[
   "goosebib"
  ]
 },
 "tests.test_jp2box":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_jp2box_jpx":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_jp2box_uuid":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_jp2box_xml":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_jp2k":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_json_decoding":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_json_encoding":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_jsonapi":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_creating_resources":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_deleting_resources":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_document_structure":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_fetching_data":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_server_responsibilities":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_updating_relationships":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonapi.test_updating_resources":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_jsonpatch":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_keep_alive_timeout":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_keras_retinanet":{
  "__set__":true,
  "elements":[
   "deepforest"
  ]
 },
 "tests.test_keys":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_kim_convergence":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_batch":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_outlier":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_scale":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats_beta_dist":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats_nonnormal_test":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats_normal_test":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats_s_normal_dist":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_stats_t_dist":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_timeseries":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_timeseries_equilibration_length":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_ucl":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_convergence.test_ucl_mser_m":{
  "__set__":true,
  "elements":[
   "kim-convergence"
  ]
 },
 "tests.test_kim_property":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_create":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_definition":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_destroy":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_instance":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_kim_property":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_modify":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_numeric":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_kim_property.test_pickle":{
  "__set__":true,
  "elements":[
   "kim-property"
  ]
 },
 "tests.test_known_good":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_label":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_latent_class":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_lattice":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_launcher":{
  "__set__":true,
  "elements":[
   "swot_simulator"
  ]
 },
 "tests.test_layouts":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_leaflet":{
  "__set__":true,
  "elements":[
   "localtileserver"
  ]
 },
 "tests.test_level1":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_active":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_at_rule":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_class":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_comments":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_descendant":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_escapes":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_id":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_link":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_list":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_pseudo_class":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_pseudo_element":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level1.test_visited":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_attribute":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_first_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_focus":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_hover":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_lang":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_next_sibling":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level2.test_universal_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_attribute":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_checked":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_disabled":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_empty":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_enabled":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_first_of_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_last_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_last_of_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_namespace":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_not":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_nth_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_nth_last_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_nth_last_of_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_nth_of_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_only_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_only_of_type":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_root":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_subsequent_sibling":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level3.test_target":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_any_link":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_attribute":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_current":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_default":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_dir":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_focus_visible":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_focus_within":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_future":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_has":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_host":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_host_context":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_in_range":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_indeterminate":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_is":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_lang":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_local_link":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_matches":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_not":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_nth_child":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_optional":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_out_of_range":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_past":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_paused":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_placeholder_shown":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_playing":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_read_only":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_read_write":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_required":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_scope":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_target_within":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_user_invalid":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_level4.test_where":{
  "__set__":true,
  "elements":[
   "soupsieve"
  ]
 },
 "tests.test_lib":{
  "__set__":true,
  "elements":[
   "xyzservices"
  ]
 },
 "tests.test_libtiff":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_linear":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_linear_diffusion":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_linear_model":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_lists":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_local":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_log_code":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_logger":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_logging":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_logo":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_main":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_maintainence":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_manager":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_manual":{
  "__set__":true,
  "elements":[
   "codext"
  ]
 },
 "tests.test_maps_ordereddict":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_markdown":{
  "__set__":true,
  "elements":[
   "mktestdocs"
  ]
 },
 "tests.test_marshalling":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_mask":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_match":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_merge_from":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_mesh":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_message":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_message_field_types":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_message_init_kwargs":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_message_with_no_fields":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_meta":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_meta_learners":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_metadata":{
  "__set__":true,
  "elements":[
   "flask-restless",
   "geoarray",
   "openfisca-france",
   "verta"
  ]
 },
 "tests.test_metview":{
  "__set__":true,
  "elements":[
   "metview-python"
  ]
 },
 "tests.test_middleware":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_middlewares":{
  "__set__":true,
  "elements":[
   "tinydb"
  ]
 },
 "tests.test_migrations":{
  "__set__":true,
  "elements":[
   "djangocms-admin-style"
  ]
 },
 "tests.test_misc":{
  "__set__":true,
  "elements":[
   "gemgis",
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.test_mktestdocs":{
  "__set__":true,
  "elements":[
   "mktestdocs"
  ]
 },
 "tests.test_mlconjug":{
  "__set__":true,
  "elements":[
   "mlconjug3"
  ]
 },
 "tests.test_model":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_model5":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_model_basicCh":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicChRt_and_basicChRtTh":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicChSa":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicDd":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicDdHy":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicDdRt":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicDdSt":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicDdVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicHyRt":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicHySa":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicHyVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicHy_and_basicHySt":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicRtSa_basicSa_basicSaVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicRtTh":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicRtVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicSaVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicStVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicSt_basicStTh":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicTh":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicThVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_basicVs":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_model_group":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_model_registry":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_model_registry.test_model":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_model_registry.test_model_base":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_model_registry.test_model_version":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_models":{
  "__set__":true,
  "elements":[
   "btrack"
  ]
 },
 "tests.test_modules":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_molgrid":{
  "__set__":true,
  "elements":[
   "mols2grid"
  ]
 },
 "tests.test_motd":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_mrs":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_base":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_basis":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_core":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_fitting":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_ima":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_image":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_io":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_mrsdata":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_processing":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_rda":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_mrs.test_twix":{
  "__set__":true,
  "elements":[
   "suspect"
  ]
 },
 "tests.test_multi_client_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_multi_serve":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_multiclass":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_multiprocessing":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_multitasking":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_named_routes":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_namespace":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_nan":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_nb_enfants":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_nb_subproc_thread":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_nbextension_path":{
  "__set__":true,
  "elements":[
   "pydeck"
  ]
 },
 "tests.test_nested_issue55":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_njobs":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_nl_1":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_nnnl":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_node":{
  "__set__":true,
  "elements":[
   "condorpy"
  ]
 },
 "tests.test_normalisation":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_not_vanilla_options":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_notebook":{
  "__set__":true,
  "elements":[
   "birdy",
   "nb_cron"
  ]
 },
 "tests.test_notebooks":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_nuclide":{
  "__set__":true,
  "elements":[
   "radioactivedecay"
  ]
 },
 "tests.test_numba":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_numeric":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_numeric.test_array":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_numeric.test_vector":{
  "__set__":true,
  "elements":[
   "py-tools-ds"
  ]
 },
 "tests.test_numpy":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_object_creation":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_ocv_relax":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_ogr_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_oneof":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_openjp2":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_operations":{
  "__set__":true,
  "elements":[
   "tinydb"
  ]
 },
 "tests.test_optimizers":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.test_options":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_organization":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_output":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_package_functions":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_palaeoB":{
  "__set__":true,
  "elements":[
   "cbsyst"
  ]
 },
 "tests.test_pandapower":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_pandas":{
  "__set__":true,
  "elements":[
   "emperor",
   "lux-api"
  ]
 },
 "tests.test_pandas_coverage":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_pandas_cursor":{
  "__set__":true,
  "elements":[
   "pyathena"
  ]
 },
 "tests.test_pandas_histogrammar":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_parameters":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_parametric":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.test_params":{
  "__set__":true,
  "elements":[
   "mpire"
  ]
 },
 "tests.test_parser":{
  "__set__":true,
  "elements":[
   "lux-api",
   "pyrobuf",
   "pytermgui",
   "tomlkit"
  ]
 },
 "tests.test_parser.test_field_validity":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_parser.test_map_field":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_parser.test_missing_lbraces":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_parser.test_oneof":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_parser.test_syntax":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_parsers":{
  "__set__":true,
  "elements":[
   "crystals",
   "sphinx-js"
  ]
 },
 "tests.test_paths":{
  "__set__":true,
  "elements":[
   "andes",
   "jupyter_server"
  ]
 },
 "tests.test_payload":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_payload_too_large":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_pec":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_performance":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_permissions":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.conftest":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.test_lazy_lists":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.test_sharing_old":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.test_visibility_api":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.test_visibility_e2e":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_permissions.test_workspace":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_persistence":{
  "__set__":true,
  "elements":[
   "tsod"
  ]
 },
 "tests.test_pfaffian":{
  "__set__":true,
  "elements":[
   "pfapack"
  ]
 },
 "tests.test_pflow_matpower":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_pfs":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_physics":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_pickle_unpickle_theano_fn":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.test_pipelines":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_pipelining":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_platform":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_plbvfu1":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_plots":{
  "__set__":true,
  "elements":[
   "radioactivedecay"
  ]
 },
 "tests.test_plotting":{
  "__set__":true,
  "elements":[
   "lifelines"
  ]
 },
 "tests.test_plugin":{
  "__set__":true,
  "elements":[
   "pyls-memestra"
  ]
 },
 "tests.test_plugins":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_plugins.fake_actions":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_plugins.fake_configs":{
  "__set__":true,
  "elements":[
   "great-expectations"
  ]
 },
 "tests.test_plume":{
  "__set__":true,
  "elements":[
   "sed-plume"
  ]
 },
 "tests.test_pool":{
  "__set__":true,
  "elements":[
   "mpire"
  ]
 },
 "tests.test_pos":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_postlist":{
  "__set__":true,
  "elements":[
   "ablog"
  ]
 },
 "tests.test_postman":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_precip":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_precip_changer":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_prepare":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_preproc":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_preprocess":{
  "__set__":true,
  "elements":[
   "deepforest"
  ]
 },
 "tests.test_preprocessing":{
  "__set__":true,
  "elements":[
   "openfisca-france",
   "py-cordex"
  ]
 },
 "tests.test_printing":{
  "__set__":true,
  "elements":[
   "aesara",
   "glymur",
   "theano-pymc"
  ]
 },
 "tests.test_prms":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.test_processing_algebra":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_processing_filter":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_processing_interp":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_processing_marker":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_processing_misc":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_processing_rt":{
  "__set__":true,
  "elements":[
   "pyomeca"
  ]
 },
 "tests.test_promotion":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.test_propensity":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_protonate":{
  "__set__":true,
  "elements":[
   "propka"
  ]
 },
 "tests.test_protos":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_providers":{
  "__set__":true,
  "elements":[
   "xyzservices"
  ]
 },
 "tests.test_proxy":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_prsint":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_psse_parser":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_pypi":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_pyplot":{
  "__set__":true,
  "elements":[
   "mpl-interactions"
  ]
 },
 "tests.test_pyremo":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_pysyncrosim":{
  "__set__":true,
  "elements":[
   "pysyncrosim"
  ]
 },
 "tests.test_python_api":{
  "__set__":true,
  "elements":[
   "remove_dagmc_tags"
  ]
 },
 "tests.test_qartod":{
  "__set__":true,
  "elements":[
   "ioos_qc"
  ]
 },
 "tests.test_qmnl":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_queries":{
  "__set__":true,
  "elements":[
   "tinydb"
  ]
 },
 "tests.test_query":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_quickle":{
  "__set__":true,
  "elements":[
   "quickle"
  ]
 },
 "tests.test_random_signal":{
  "__set__":true,
  "elements":[
   "swot_simulator"
  ]
 },
 "tests.test_randomforest_explainer":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_raster":{
  "__set__":true,
  "elements":[
   "gemgis"
  ]
 },
 "tests.test_reacnetgen":{
  "__set__":true,
  "elements":[
   "reacnetgenerator"
  ]
 },
 "tests.test_recipe_item":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_recognise":{
  "__set__":true,
  "elements":[
   "goosebib"
  ]
 },
 "tests.test_record":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_redirect":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_reformat":{
  "__set__":true,
  "elements":[
   "goosebib"
  ]
 },
 "tests.test_regex":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_regions":{
  "__set__":true,
  "elements":[
   "py-cordex"
  ]
 },
 "tests.test_regression_base":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_regression_explainer":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_regressions":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_regrid":{
  "__set__":true,
  "elements":[
   "esmlab"
  ]
 },
 "tests.test_reloader":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_remo_ds":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_repeated_enum":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_reply_handling":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_reporting":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_repr":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_reqparse":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_request":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_request_cancel":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_request_construction":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_request_data":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_request_stream":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_requests":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_res1d":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_resolvable":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.test_resource_analysis":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_resources":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_response":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_response_timeout":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_result_set":{
  "__set__":true,
  "elements":[
   "pyathena"
  ]
 },
 "tests.test_results_set":{
  "__set__":true,
  "elements":[
   "pyomniscidb"
  ]
 },
 "tests.test_rootcling":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_rop":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_routes":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_run":{
  "__set__":true,
  "elements":[
   "propka"
  ]
 },
 "tests.test_run_length":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_runner":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_runtime_udf":{
  "__set__":true,
  "elements":[
   "pyomniscidb"
  ]
 },
 "tests.test_s3":{
  "__set__":true,
  "elements":[
   "awacs"
  ]
 },
 "tests.test_s3_specific":{
  "__set__":true,
  "elements":[
   "cloudpathlib"
  ]
 },
 "tests.test_saws":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_scanf":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_scenarios":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_schema":{
  "__set__":true,
  "elements":[
   "edgetest",
   "yggdrasil"
  ]
 },
 "tests.test_scripts":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_atlasq_list_summary":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_atlasq_ohi":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_atlasq_query":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_fsl_apply_x5":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_fsl_convert_x5":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_fsl_ents":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_imglob":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_immv_imcp":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_scripts.test_resample_image":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_search":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_sections":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_segment":{
  "__set__":true,
  "elements":[
   "pyannote.core"
  ]
 },
 "tests.test_select":{
  "__set__":true,
  "elements":[
   "mols2grid"
  ]
 },
 "tests.test_sensitivity":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_serialization":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_serialize":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_series":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_server":{
  "__set__":true,
  "elements":[
   "poster"
  ]
 },
 "tests.test_server_events":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_server_heartbeat":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_server_loop":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_serverapp":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_servicedesk":{
  "__set__":true,
  "elements":[
   "atlassian-python-api"
  ]
 },
 "tests.test_services":{
  "__set__":true,
  "elements":[
   "andes",
   "yggdrasil"
  ]
 },
 "tests.test_session":{
  "__set__":true,
  "elements":[
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_set_decoded_components":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_settings":{
  "__set__":true,
  "elements":[
   "planetary-computer",
   "pydeck"
  ]
 },
 "tests.test_setup":{
  "__set__":true,
  "elements":[
   "optimade"
  ]
 },
 "tests.test_setup_commands":{
  "__set__":true,
  "elements":[
   "stitchm"
  ]
 },
 "tests.test_shapely":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_sign_assets":{
  "__set__":true,
  "elements":[
   "planetary-computer"
  ]
 },
 "tests.test_signal":{
  "__set__":true,
  "elements":[
   "mpire"
  ]
 },
 "tests.test_signal_handlers":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_signals":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_signature":{
  "__set__":true,
  "elements":[
   "plum-dispatch"
  ]
 },
 "tests.test_signed_integer":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_signing":{
  "__set__":true,
  "elements":[
   "planetary-computer"
  ]
 },
 "tests.test_simple_detachment_limited":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_single_file_stac":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_singularity":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_skorch_models":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_slicing":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_snapshot":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_spark":{
  "__set__":true,
  "elements":[
   "intake-spark"
  ]
 },
 "tests.test_spark_histogrammar":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_spatial":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_spec":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.test_sqlalchemy_athena":{
  "__set__":true,
  "elements":[
   "pyathena"
  ]
 },
 "tests.test_sqlite_phonemizer":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_sqlite_util":{
  "__set__":true,
  "elements":[
   "geofileops"
  ]
 },
 "tests.test_ssml":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_stat_dist":{
  "__set__":true,
  "elements":[
   "pygpcca"
  ]
 },
 "tests.test_static":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_statistics":{
  "__set__":true,
  "elements":[
   "esmlab",
   "lifelines"
  ]
 },
 "tests.test_storages":{
  "__set__":true,
  "elements":[
   "tinydb"
  ]
 },
 "tests.test_stream":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_streamflow":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_streaming":{
  "__set__":true,
  "elements":[
   "poster"
  ]
 },
 "tests.test_streamio":{
  "__set__":true,
  "elements":[
   "propka"
  ]
 },
 "tests.test_struct":{
  "__set__":true,
  "elements":[
   "quickle"
  ]
 },
 "tests.test_structured":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_structured_utils":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_styles":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.test_suds":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_suffix_tree":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_summarize_mtz_dtypes":{
  "__set__":true,
  "elements":[
   "reciprocalspaceship"
  ]
 },
 "tests.test_summary_writer":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox"
  ]
 },
 "tests.test_sumtype":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_supercell":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_swagger":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_swagger_utils":{
  "__set__":true,
  "elements":[
   "flask-restplus"
  ]
 },
 "tests.test_sync":{
  "__set__":true,
  "elements":[
   "trio-asyncio",
   "trio_asyncio"
  ]
 },
 "tests.test_table":{
  "__set__":true,
  "elements":[
   "pdfme"
  ]
 },
 "tests.test_tables":{
  "__set__":true,
  "elements":[
   "py-cordex",
   "tinydb"
  ]
 },
 "tests.test_tailing_slash_client_it":{
  "__set__":true,
  "elements":[
   "webdavclient3"
  ]
 },
 "tests.test_tasks":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_tax_rates":{
  "__set__":true,
  "elements":[
   "openfisca-france"
  ]
 },
 "tests.test_tds_resume":{
  "__set__":true,
  "elements":[
   "andes"
  ]
 },
 "tests.test_telemetry":{
  "__set__":true,
  "elements":[
   "quilt3"
  ]
 },
 "tests.test_temperature":{
  "__set__":true,
  "elements":[
   "xclim"
  ]
 },
 "tests.test_templates":{
  "__set__":true,
  "elements":[
   "condorpy"
  ]
 },
 "tests.test_terminal":{
  "__set__":true,
  "elements":[
   "jupyter_server"
  ]
 },
 "tests.test_test_client_port":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_testing":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_tex":{
  "__set__":true,
  "elements":[
   "goosebib"
  ]
 },
 "tests.test_text":{
  "__set__":true,
  "elements":[
   "pdfme"
  ]
 },
 "tests.test_text_processor":{
  "__set__":true,
  "elements":[
   "gruut"
  ]
 },
 "tests.test_textnets":{
  "__set__":true,
  "elements":[
   "textnets"
  ]
 },
 "tests.test_tfrecords":{
  "__set__":true,
  "elements":[
   "deepforest"
  ]
 },
 "tests.test_theseus_layer":{
  "__set__":true,
  "elements":[
   "theseus-ai"
  ]
 },
 "tests.test_tie_point_grid":{
  "__set__":true,
  "elements":[
   "arosics"
  ]
 },
 "tests.test_tiff2jp2":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_timeline":{
  "__set__":true,
  "elements":[
   "pyannote.core"
  ]
 },
 "tests.test_timeout_logic":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_timezone":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_timing":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_tinydb":{
  "__set__":true,
  "elements":[
   "tinydb"
  ]
 },
 "tests.test_tls":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_toml_document":{
  "__set__":true,
  "elements":[
   "tomlkit"
  ]
 },
 "tests.test_toml_file":{
  "__set__":true,
  "elements":[
   "tomlkit"
  ]
 },
 "tests.test_toml_spec_tests":{
  "__set__":true,
  "elements":[
   "tomlkit"
  ]
 },
 "tests.test_toml_tests":{
  "__set__":true,
  "elements":[
   "tomlkit"
  ]
 },
 "tests.test_toolbar":{
  "__set__":true,
  "elements":[
   "saws"
  ]
 },
 "tests.test_tools":{
  "__set__":true,
  "elements":[
   "reacnetgenerator",
   "yggdrasil"
  ]
 },
 "tests.test_touchup":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_track_packages":{
  "__set__":true,
  "elements":[
   "grayskull"
  ]
 },
 "tests.test_tracker":{
  "__set__":true,
  "elements":[
   "btrack"
  ]
 },
 "tests.test_tracklets":{
  "__set__":true,
  "elements":[
   "btrack"
  ]
 },
 "tests.test_transect":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_transform":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transform.test_affine":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transform.test_flirt":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transform.test_fnirt":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transform.test_nonlinear":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transform.test_x5":{
  "__set__":true,
  "elements":[
   "fslpy"
  ]
 },
 "tests.test_transport":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_transport_http":{
  "__set__":true,
  "elements":[
   "suds-jurko"
  ]
 },
 "tests.test_tsne":{
  "__set__":true,
  "elements":[
   "fasttsne"
  ]
 },
 "tests.test_tutorial":{
  "__set__":true,
  "elements":[
   "pyremo"
  ]
 },
 "tests.test_type":{
  "__set__":true,
  "elements":[
   "lux-api",
   "plum-dispatch"
  ]
 },
 "tests.test_typed_lists":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_typedoc":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.test_unicode_strings":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_units":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.test_unix_socket":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_unknown_field":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_updates":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.test_updating":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_updatingrelationship":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_uplift_trees":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_url_building":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_url_for":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_url_for_static":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_utf8":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_util":{
  "__set__":true,
  "elements":[
   "borb",
   "emperor",
   "ncar-jobqueue",
   "plum-dispatch",
   "quilt",
   "quilt3"
  ]
 },
 "tests.test_util_manipulation":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_utilities":{
  "__set__":true,
  "elements":[
   "deepforest",
   "localtileserver"
  ]
 },
 "tests.test_utility_spec":{
  "__set__":true,
  "elements":[
   "larch"
  ]
 },
 "tests.test_utils":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox",
   "airflow",
   "birdy",
   "btrack",
   "causalml",
   "edgetest",
   "flask-restplus",
   "gemgis",
   "grayskull",
   "ioos_qc",
   "jupyter_server",
   "mols2grid",
   "mpire",
   "neutronics_material_maker",
   "onnx-caffe2",
   "pygpcca",
   "pyremo",
   "pystac",
   "radioactivedecay",
   "sanic",
   "tinydb",
   "tomlkit",
   "verta",
   "xclim"
  ]
 },
 "tests.test_utils.fake_datetime":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.test_utils.test_file_utils":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_utils.test_pagination":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_utils.test_pip_requirements":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_utils.test_time_utils":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_utils.test_utils":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_utils_typing":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.test_validation":{
  "__set__":true,
  "elements":[
   "flask-restless"
  ]
 },
 "tests.test_value_optimization":{
  "__set__":true,
  "elements":[
   "causalml"
  ]
 },
 "tests.test_varint_encoding":{
  "__set__":true,
  "elements":[
   "pyrobuf"
  ]
 },
 "tests.test_vector":{
  "__set__":true,
  "elements":[
   "gemgis"
  ]
 },
 "tests.test_velocimetry":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_version":{
  "__set__":true,
  "elements":[
   "geofileops",
   "jupyter_server",
   "propka"
  ]
 },
 "tests.test_versioning":{
  "__set__":true,
  "elements":[
   "sanic",
   "verta"
  ]
 },
 "tests.test_versioning.test_code":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_versioning.test_configuration":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_versioning.test_dataset":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_versioning.test_environment":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_versioning.test_repository":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.test_versions":{
  "__set__":true,
  "elements":[
   "awslogs"
  ]
 },
 "tests.test_vhosts":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_video":{
  "__set__":true,
  "elements":[
   "pyopenrivercam"
  ]
 },
 "tests.test_views":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_vis":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests.test_visualization":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox",
   "gemgis"
  ]
 },
 "tests.test_vsa_aeff":{
  "__set__":true,
  "elements":[
   "terrainbento"
  ]
 },
 "tests.test_vsi":{
  "__set__":true,
  "elements":[
   "localtileserver"
  ]
 },
 "tests.test_warnings":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_wdl_parser":{
  "__set__":true,
  "elements":[
   "caper"
  ]
 },
 "tests.test_web":{
  "__set__":true,
  "elements":[
   "gemgis"
  ]
 },
 "tests.test_websockets":{
  "__set__":true,
  "elements":[
   "sanic"
  ]
 },
 "tests.test_workflow":{
  "__set__":true,
  "elements":[
   "condorpy"
  ]
 },
 "tests.test_workflows":{
  "__set__":true,
  "elements":[
   "quilt3"
  ]
 },
 "tests.test_wps_caps":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_client":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_climatology_esp":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_climpred_hindcast_verification":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_era5":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_forecast_evaluation":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_forecast_flood_risk":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_forecast_graphs":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_generic_raster_subset":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_generic_shape_properties":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_generic_terrain_analysis":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_generic_zonal_stats":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_graph_fit":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_graph_tsstats":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_hindcast":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_hydrobasins_shape_selection":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_nalcms_zonal_stats":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_nrcan_daily":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_objective_functions":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_ostrich_gr4j_cemaneige":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_ostrich_hbv_ec":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_ostrich_hmets":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_ostrich_mohyse":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven_gr4j_cemaneige":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven_hbv_ec":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven_hmets":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven_mohyse":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_raven_multi_model":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_realtime_forecast":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wps_regionalization":{
  "__set__":true,
  "elements":[
   "raven-wps"
  ]
 },
 "tests.test_wrapper":{
  "__set__":true,
  "elements":[
   "otwrapy"
  ]
 },
 "tests.test_write":{
  "__set__":true,
  "elements":[
   "tomlkit"
  ]
 },
 "tests.test_writers":{
  "__set__":true,
  "elements":[
   "crystals"
  ]
 },
 "tests.test_writing":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.test_writing_tiles":{
  "__set__":true,
  "elements":[
   "glymur"
  ]
 },
 "tests.test_xarray":{
  "__set__":true,
  "elements":[
   "flox"
  ]
 },
 "tests.test_xgboost_explainer":{
  "__set__":true,
  "elements":[
   "explainerdashboard"
  ]
 },
 "tests.test_xns11":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_xsum":{
  "__set__":true,
  "elements":[
   "xsum"
  ]
 },
 "tests.test_xsum.test_xsum":{
  "__set__":true,
  "elements":[
   "xsum"
  ]
 },
 "tests.test_xyz":{
  "__set__":true,
  "elements":[
   "mikeio"
  ]
 },
 "tests.test_yamlfile":{
  "__set__":true,
  "elements":[
   "yggdrasil"
  ]
 },
 "tests.testbasic":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.testgpu":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.testing":{
  "__set__":true,
  "elements":[
   "sphinx-js"
  ]
 },
 "tests.testing_utilities":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.testnumpy":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.testrootcling":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.tests":{
  "__set__":true,
  "elements":[
   "ffx",
   "neurokit2",
   "openmichrom",
   "portalocker"
  ]
 },
 "tests.tests_bio":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_complexity":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_data":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_ecg":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_ecg_delineate":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_eda":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_eeg":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_emg":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_eog":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_events":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_for_travis":{
  "__set__":true,
  "elements":[
   "cellpy"
  ]
 },
 "tests.tests_hrv":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_microstates":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_ppg":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_rsp":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_signal":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_signal_fixpeaks":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.tests_stats":{
  "__set__":true,
  "elements":[
   "neurokit2"
  ]
 },
 "tests.testspec":{
  "__set__":true,
  "elements":[
   "histogrammar"
  ]
 },
 "tests.theanolm":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.basiclayer_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.classdistribution_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.iterators_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.lattice_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.latticedecoder_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.operations_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.probfunctions_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.recurrentstate_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.score_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.statistics_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.textsampler_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.textscorer_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.trainers_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.vocabulary_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.theanolm.wordclass_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.ti_deps":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.contexts":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.dag_ti_slots_available_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.dag_unpaused_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.dagrun_exists_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.fake_models":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.not_in_retry_period_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.not_running_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.not_skipped_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.pool_has_space_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.prev_dagrun_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.runnable_exec_date_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.trigger_rule_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.ti_deps.deps.valid_state_dep":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.time_strategies":{
  "__set__":true,
  "elements":[
   "verta"
  ]
 },
 "tests.toolkit":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.html_to_pdf":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.html_to_pdf.test_export_html_to_pdf":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.markdown_to_pdf":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.markdown_to_pdf.test_export_markdown_to_pdf":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_jpg":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_jpg.test_export_pdf_to_jpg":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_json":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_json.test_export_pdf_to_json":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_mp3":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_mp3.test_export_to_mp3":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_svg":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.export.pdf_to_svg.test_export_pdf_to_svg":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.image":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.image.test_extract_images":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.image.test_optimize_images":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.ocr":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.ocr.test_extract_text_using_ocr":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.redact":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.redact.test_redact_common_regular_expressions":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.table.test_detect_table":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_courier_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_keywords":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_red_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_regex":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_text":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_extract_text_from_self_made_invoice":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.toolkit.text.test_part_of_speech_tagger":{
  "__set__":true,
  "elements":[
   "borb"
  ]
 },
 "tests.topology":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.topology.test_bulk_topology":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.topology.test_topology":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.tuning":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.tuning.spectral_delay_correction":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.tuning.spectral_delay_correction.process_wigner":{
  "__set__":true,
  "elements":[
   "wrighttools"
  ]
 },
 "tests.typed_list":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.typed_list.test_basic":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.typed_list.test_opt":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.typed_list.test_type":{
  "__set__":true,
  "elements":[
   "theano-pymc"
  ]
 },
 "tests.typewriter":{
  "__set__":true,
  "elements":[
   "pytermgui"
  ]
 },
 "tests.unit":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery",
   "google-cloud-resource-manager",
   "histolab",
   "jupyterlab-git"
  ]
 },
 "tests.unit.data":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.data.test_data":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.filters":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.filters.test_image_filters":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.filters.test_morphological_filters":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.filters.test_util":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.gapic":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_folders":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_organizations":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_projects":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_tag_bindings":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_tag_keys":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.gapic.resourcemanager_v3.test_tag_values":{
  "__set__":true,
  "elements":[
   "google-cloud-resource-manager"
  ]
 },
 "tests.unit.test__helpers":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test__http":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_branch":{
  "__set__":true,
  "elements":[
   "jupyterlab-git"
  ]
 },
 "tests.unit.test_client":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_clone":{
  "__set__":true,
  "elements":[
   "jupyterlab-git"
  ]
 },
 "tests.unit.test_compositions":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_dataset":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_diff":{
  "__set__":true,
  "elements":[
   "jupyterlab-git"
  ]
 },
 "tests.unit.test_exceptions":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_handlers":{
  "__set__":true,
  "elements":[
   "jupyterlab-git"
  ]
 },
 "tests.unit.test_job":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_masks":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_pushpull":{
  "__set__":true,
  "elements":[
   "jupyterlab-git"
  ]
 },
 "tests.unit.test_query":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_schema":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_scorer":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_slide":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_table":{
  "__set__":true,
  "elements":[
   "google-cloud-bigquery"
  ]
 },
 "tests.unit.test_tile":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_tiler":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit.test_util":{
  "__set__":true,
  "elements":[
   "histolab"
  ]
 },
 "tests.unit_tests":{
  "__set__":true,
  "elements":[
   "vizlo"
  ]
 },
 "tests.unit_tests.test_solving":{
  "__set__":true,
  "elements":[
   "vizlo"
  ]
 },
 "tests.unit_tests.test_transformation":{
  "__set__":true,
  "elements":[
   "vizlo"
  ]
 },
 "tests.unit_tests.test_visualization":{
  "__set__":true,
  "elements":[
   "vizlo"
  ]
 },
 "tests.unittest_tools":{
  "__set__":true,
  "elements":[
   "aesara",
   "theano-pymc"
  ]
 },
 "tests.unittests":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_arguments":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_calibration":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_detector":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_environment":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_fitting":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.unittests.test_model_function":{
  "__set__":true,
  "elements":[
   "pyxel-sim"
  ]
 },
 "tests.util":{
  "__set__":true,
  "elements":[
   "deeptime",
   "intake-spark",
   "plum-dispatch",
   "pyathena",
   "quacc"
  ]
 },
 "tests.util.conftest":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.util.test_atoms":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.util.test_calc":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.util.test_data":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.util.test_decorators":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.util.test_pop_analysis":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.util.test_pytorch":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.util.test_quantity_statistics":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.util.test_slabs":{
  "__set__":true,
  "elements":[
   "quacc"
  ]
 },
 "tests.util.test_sparse_utils":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.util.test_types":{
  "__set__":true,
  "elements":[
   "deeptime"
  ]
 },
 "tests.utils":{
  "__set__":true,
  "elements":[
   "adversarial-robustness-toolbox",
   "airflow",
   "crystals",
   "esmlab",
   "genestboost",
   "iohexperimenter",
   "jupyter_server",
   "landlab",
   "mpire",
   "nr.types",
   "pdfme",
   "pyannote.core",
   "pybtex",
   "pyomeca",
   "pystac",
   "quilt",
   "quilt3",
   "superset",
   "triad",
   "trio-asyncio",
   "trio_asyncio",
   "tyssue",
   "verta",
   "xcube_geodb"
  ]
 },
 "tests.utils.compression":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.utils.convert_examples":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.dates":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.utils.dispatcher_examples":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.dispatcher_examples.examples":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.dispatcher_examples.invalid":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.gradients_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.utils.stac_io_mock":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.utils.test_assertion":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_cases":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.utils.test_class_extension":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_convert":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_count_repeats":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_decorators":{
  "__set__":true,
  "elements":[
   "landlab",
   "tyssue"
  ]
 },
 "tests.utils.test_dispatcher":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_distance_from_divide":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_flow__distance":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_funcdef":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.utils.test_function":{
  "__set__":true,
  "elements":[
   "nr.types"
  ]
 },
 "tests.utils.test_halo":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_hash":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_iter":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_json":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_matrix":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_neighbor_node_array":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_pandas_like":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_pyarrow":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_pyarrow_convert":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_rename":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_return_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_schema":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_source_tracking_algorithm":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_stable_priority_queue":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_string":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_structured_grid":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.test_threading":{
  "__set__":true,
  "elements":[
   "triad"
  ]
 },
 "tests.utils.test_time":{
  "__set__":true,
  "elements":[
   "esmlab"
  ]
 },
 "tests.utils.test_utils":{
  "__set__":true,
  "elements":[
   "tyssue"
  ]
 },
 "tests.utils.test_watershed":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.utils.validator":{
  "__set__":true,
  "elements":[
   "pystac"
  ]
 },
 "tests.utils_test":{
  "__set__":true,
  "elements":[
   "llnl-sina"
  ]
 },
 "tests.utils_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.values":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.values.conftest":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.values.test_synthetic":{
  "__set__":true,
  "elements":[
   "landlab"
  ]
 },
 "tests.viz":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.viz.test_jupyter_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.viz.test_plot_utils":{
  "__set__":true,
  "elements":[
   "pyusid"
  ]
 },
 "tests.viz_tests":{
  "__set__":true,
  "elements":[
   "superset"
  ]
 },
 "tests.weak_learners":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.weak_learners.simple_pls_data":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.weak_learners.simple_pls_test":{
  "__set__":true,
  "elements":[
   "genestboost"
  ]
 },
 "tests.wordclasses":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.wordclasses.bigramoptimizer_test":{
  "__set__":true,
  "elements":[
   "theanolm"
  ]
 },
 "tests.www":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.www.api":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.www.api.experimental":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.www.api.experimental.test_endpoints":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.www.api.experimental.test_kerberos_endpoints":{
  "__set__":true,
  "elements":[
   "airflow"
  ]
 },
 "tests.x_square_test":{
  "__set__":true,
  "elements":[
   "ffx"
  ]
 },
 "tests_sql":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests_sql.conftest":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests_sql.context":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests_sql.test_sql_compiler":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests_sql.test_sql_executor":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 },
 "tests_sql.test_sql_interestingness":{
  "__set__":true,
  "elements":[
   "lux-api"
  ]
 }
}